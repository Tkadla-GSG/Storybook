import _ from 'lodash';
import React, { Component } from 'react';
import { PropTypes as pt } from 'prop-types';
import {
    TableElement,
    TableHeadElement,
    TableBodyElement,
    TableHeaderRowElement,
    TableRowElement,
    TableCellElement,
    ColumnDefinitionsElement,
    ColumnElement,
} from './style';
import TableHeaderCell from './TableHeaderCell';
import SortOrder from './SortOrder';

class Table extends Component {
    static propTypes = {
        mapping: pt.array,
        source: pt.array,
    };

    static defaultProps = {
        mapping: [],
        source: [],
    };

    state = {
        sortColumn: null,
        sortOrder: SortOrder.Descending,
    };

    handleSort = columnIndex => {
        const column = this.props.mapping[columnIndex];
        if (this.state.sortColumn === columnIndex) {
            this.setState({ sortOrder: this.state.sortOrder.getOpposite() });
        } else if (column.valueKey) {
            this.setState({ sortColumn: columnIndex, sortOrder: SortOrder.Descending });
        }
    };

    render() {
        const { mapping, source, ...other } = this.props;
        const { sortColumn, sortOrder } = this.state;

        const headerProps = {
            onSort: this.handleSort,
            sortOrder,
        };

        let sortedSource = source;
        if (sortColumn) {
            const { valueKey } = mapping[sortColumn];
            sortedSource = _.orderBy(sortedSource, valueKey, sortOrder.value);
        }

        return (
            <TableElement {...other}>
                <ColumnDefinitionsElement>
                    {_.map(mapping, (m, index) => <ColumnElement key={index} columnWidth={m.columnWidth} />)}
                </ColumnDefinitionsElement>
                <TableHeadElement>
                    <TableHeaderRowElement>
                        {_.map(mapping, (m, index) => <TableHeaderCell {...m} key={index} sortedBy={index === sortColumn} columnIndex={index} {...headerProps} />)}
                    </TableHeaderRowElement>
                </TableHeadElement>
                <TableBodyElement>
                    {_.map(sortedSource, (s, index) => (
                        <TableRowElement key={index}>
                            {_.map(mapping, (m, i) => (
                                <TableCellElement key={i} columnAlignment={m.columnAlignment}>
                                    {m.render ? m.render(s) : s[m.valueKey]}
                                </TableCellElement>
                            ))}
                        </TableRowElement>
                    ))}
                </TableBodyElement>
            </TableElement>
        );
    }
}

export default Table;
