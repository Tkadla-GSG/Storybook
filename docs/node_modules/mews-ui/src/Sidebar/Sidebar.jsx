import React, { Component } from 'react';
import { PropTypes as pt } from 'prop-types';
import { noop } from '../utils/func';
import { disableScroll } from '../utils/dom';
import { SidebarContainerElement, BackdropElement, SidebarElement, SidebarHeaderElement, SidebarHeaderTitleElement, SidebarContentElement } from './style';
import ClickAway from '../ClickAway/ClickAway';
import IconButton from '../Button/IconButton';

const CloseIconButton = ({ ...props }) => <IconButton icon="close" {...props} />;

class Sidebar extends Component {
    static propTypes = {
        closeOnBackdropClick: pt.bool,
        deregisterClickAway: pt.func,
        disableScroll: pt.bool,
        modal: pt.bool,
        onClose: pt.func,
        opened: pt.bool,
        registerClickAway: pt.func,
        title: pt.node,
        width: pt.string,
    };

    static defaultProps = {
        disableScroll: true,
        modal: true,
        onClose: noop,
        width: '50vw',
    };

    componentDidMount() {
        if (this.props.opened) {
            this.open();
        }
    }

    componentWillReceiveProps(nextProps) {
        if (!this.props.opened && nextProps.opened) {
            this.open();
        }
    }

    componentWillUnmount() {
        if (this.enableScroll) {
            this.enableScroll();
        }
    }

    handleCloseButtonClick = () => {
        this.close();
    };

    handleBackdropClick = () => {
        if (this.props.closeOnBackdropClick) {
            this.close();
        }
    };

    handleClickAway = () => {
        if (!this.props.modal) {
            this.close();
        }
    };

    open() {
        this.props.registerClickAway();

        if (this.props.disableScroll) {
            this.enableScroll = disableScroll(document.body);
        }
    }

    close() {
        this.props.deregisterClickAway();
        this.props.onClose();

        if (this.enableScroll) {
            this.enableScroll();
            this.enableScroll = null;
        }
    }

    render() {
        const { opened, title, width, modal, children, innerRef, className, ...other } = this.props;

        const containerElementProps = {
            className,
        };

        const backdropElementProps = {
            opened,
            key: 'backdrop',
            onClick: this.handleBackdropClick,
        };

        const siderbarElementProps = {
            innerRef,
            opened,
            key: 'sidebar',
            width,
        };

        const closeIconButtonProps = {
            onClick: this.handleCloseButtonClick,
        };

        return (
            <SidebarContainerElement {...containerElementProps}>
                {opened && modal && <BackdropElement {...backdropElementProps} />}
                {opened && (
                    <SidebarElement {...siderbarElementProps}>
                        <SidebarHeaderElement>
                            <CloseIconButton {...closeIconButtonProps} />
                            <SidebarHeaderTitleElement>{title}</SidebarHeaderTitleElement>
                        </SidebarHeaderElement>
                        <SidebarContentElement>
                            {children}
                        </SidebarContentElement>
                    </SidebarElement>
                )}
            </SidebarContainerElement>
        );
    }
}

export default ClickAway(Sidebar);
