import { Component } from 'react';
import { unmountComponentAtNode, unstable_renderSubtreeIntoContainer } from 'react-dom'; // eslint-disable-line camelcase
import { PropTypes as pt } from 'prop-types';

export default class Portal extends Component {
    static propTypes = {
        children: pt.node,
        containerId: pt.string,
    };

    componentDidMount() {
        this.mountPortal();
        this.renderTarget();
    }

    componentWillReceiveProps(nextProps) {
        this.renderTarget(nextProps.children);
    }

    componentWillUnmount() {
        this.unmountPortal();
    }

    getContainer() {
        const { containerId } = this.props;

        let container;
        if (containerId) {
            container = document.getElementById(containerId);
        }

        return container || document.body;
    }

    mountPortal() {
        // prepare portal
        this.containerNode = this.getContainer();
        this.portalNode = document.createElement('div');
        this.containerNode.appendChild(this.portalNode);
    }

    unmountPortal() {
        // unmount children component
        if (this.portedComponent) {
            unmountComponentAtNode(this.portalNode);
            this.portedComponent = null;
        }

        // unmount portal
        if (this.portalNode) {
            this.containerNode.removeChild(this.portalNode);
            this.portalNode = null;
        }
        this.containerNode = null;
    }

    renderTarget(target = this.props.children) {
        // mount children component
        this.portedComponent = unstable_renderSubtreeIntoContainer(this, target, this.portalNode);
    }

    render() {
        return null;
    }
}
