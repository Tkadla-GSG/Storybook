import React, { Component } from 'react';
import { PropTypes as pt } from 'prop-types';
import { noop } from '../utils/func';
import { isDescendant } from '../utils/events';
import Field from '../Field/Field';
import ClickAway from '../ClickAway/ClickAway';
import OpenableOverlay from '../OpenableOverlay/OpenableOverlay';
import Origin from '../OpenableOverlay/Origin';
import TimePicker from '../TimePicker/TimePicker';
import { InputElement } from '../Input/style';
import { TimePickerContainerElement, TimePickerInputElement, TimePickerButtonElement } from './style';

class BaseTimeStringPicker extends Component {
    static propTypes = {
        getTimeService: pt.func.isRequired,
        onBlur: pt.func,
        onChange: pt.func,
        onFocus: pt.func,
        onTimeChange: pt.func,
        showSeconds: pt.bool,
        value: pt.string,
    };

    static defaultProps = {
        onBlur: noop,
        onFocus: noop,
        onChange: noop,
        onTimeChange: noop,
    };

    constructor(props) {
        super(props);

        let value = '';
        if (props.value) {
            value = props.value;
        } else if (props.timeValue) {
            // support setting the value from time object for legacy code
            value = props.showSeconds
                ? this.props.getTimeService().getString(props.timeValue)
                : this.props.getTimeService().getShortString(props.timeValue);
        }

        this.state = {
            value,
            opened: false,
        };
    }

    componentWillReceiveProps(nextProps) {
        if (nextProps.value && nextProps.value !== this.props.value) {
            this.setState({ value: nextProps.value });
        }
    }

    componentWillUnmount() {
        this.isUnmounted = true;
        this.deregisterBlurHandler();
    }

    handleFocus = e => {
        if (!this.state.opened) {
            this.open();
        }

        this.props.onFocus(e);
    };

    handleBlur = () => {
        if (this.isUnmounted) {
            return;
        }

        if (!isDescendant(document.activeElement, this.containerElement)) {
            if (this.state.opened) {
                this.close();
            }

            this.props.onBlur();
        }
    };

    handleChange = e => {
        const value = e.target.value;

        this.setState({ value });
        this.props.onChange(value);

        // Provided for legacy code that works with instances rather than with strings
        const time = this.getTimeFromValue(value);
        if (value) {
            this.props.onTimeChange(time);
        }
    };

    handleTimeChange = time => {
        const value = this.props.showSeconds
            ? this.props.getTimeService().getString(time)
            : this.props.getTimeService().getShortString(time);
        this.setState({ value });
        this.props.onChange(value);
        this.props.onTimeChange(time);
    };

    handleClickAway = () => {
        if (this.state.opened) {
            this.close();
            this.props.onBlur();
        }
    };

    handleArrowClick = () => {
        if (!this.state.opened) {
            this.inputElement.focus();
        }
    };

    registerBlurHandler() {
        this.blurHandler = document.addEventListener('focus', () => this.handleBlur(), true);
    }

    deregisterBlurHandler() {
        document.removeEventListener('focus', this.blurHandler);
    }

    open() {
        this.setState({ opened: true });
        this.props.registerClickAway();
        this.registerBlurHandler();
    }

    close() {
        this.setState({ opened: false });
        this.props.deregisterClickAway();
        this.deregisterBlurHandler();
    }

    getTimeFromValue(value) {
        const { showSeconds, getTimeService } = this.props;

        let time;
        if (showSeconds) {
            if (getTimeService().isValidString(value)) {
                time = getTimeService().fromString(value);
            }
        } else if (getTimeService().isValidShortString(value)) {
            time = getTimeService().fromShortString(value);
        }

        return time;
    }

    render() {
        const { getTimeService, innerRef, showSeconds, ...other } = this.props;
        const { opened, value } = this.state;

        const time = this.getTimeFromValue(value);

        const containerProps = {
            innerRef: c => {
                this.containerElement = c;
                innerRef(c);
            },
        };

        const inputProps = {
            ...other,
            innerRef: c => (this.inputElement = c),
            onChange: this.handleChange,
            onFocus: this.handleFocus,
            value,
        };

        const openableOverlayProps = {
            opened,
            anchorOrigin: Origin.BottomCenter,
            targetOrigin: Origin.TopCenter,
            anchorElement: () => this.containerElement,
        };

        const timePickerProps = {
            ...other,
            showSeconds,
            getTimeService,
            onTimeChange: this.handleTimeChange,
            time,
        };

        const arrowProps = {
            tabIndex: -1,
            onClick: this.handleArrowClick,
        };

        return (
            <TimePickerContainerElement {...containerProps}>
                <TimePickerInputElement>
                    <InputElement {...inputProps} />
                    <TimePickerButtonElement {...arrowProps} />
                </TimePickerInputElement>
                <OpenableOverlay {...openableOverlayProps}>
                    <TimePicker {...timePickerProps} />
                </OpenableOverlay>
            </TimePickerContainerElement>
        );
    }
}

export const TimeStringPicker = ClickAway(BaseTimeStringPicker);
export default Field(TimeStringPicker);
