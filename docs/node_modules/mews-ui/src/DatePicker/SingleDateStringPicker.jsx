import React, { Component } from 'react';
import { PropTypes as pt } from 'prop-types';
import { KeyCode } from 'mews-js';
import { noop } from '../utils/func';
import { isDescendant } from '../utils/events';
import Field from '../Field/Field';
import { InputElement } from '../Input/style';
import Origin from '../OpenableOverlay/Origin';
import ClickAway from '../ClickAway/ClickAway';
import { DatePickerContainerElement, DatePickerInputElement, DatePickerButtonElement } from './style';
import OverlayedSingleDatePicker from './OverlayedSingleDatePicker';

class BaseSingleDateStringPicker extends Component {
    static propTypes = {
        closeOnDateClick: pt.bool,
        deregisterClickAway: pt.func,
        getCalendarService: pt.func,
        innerRef: pt.func,
        minDate: pt.any, // eslint-disable-line react/forbid-prop-types
        maxDate: pt.any, // eslint-disable-line react/forbid-prop-types
        onBlur: pt.func,
        onChange: pt.func,
        onDateChange: pt.func,
        onFocus: pt.func,
        opened: pt.bool,
        registerClickAway: pt.func,
        showMonthSelector: pt.bool,
        value: pt.string,
    };

    static defaultProps = {
        closeOnDateClick: true,
        innerRef: noop,
        onBlur: noop,
        onChange: noop,
        onDateChange: noop,
        onFocus: noop,
    };

    state = {
        opened: false,
        // support setting the value from date object for legacy code
        value: this.props.value || (this.props.dateValue && this.props.getCalendarService().getDateString(this.props.dateValue)) || '',
    };

    componentWillReceiveProps(nextProps) {
        if (nextProps.value && nextProps.value !== this.props.value) {
            this.setState({ value: nextProps.value });
        }
    }

    componentWillUnmount() {
        this.isUnmounted = true;
        this.deregisterBlurHandler();
    }

    handleFocus = e => {
        if (!this.state.opened) {
            this.open();
        }

        this.props.onFocus(e);
    };

    handleBlur = () => {
        if (this.isUnmounted) {
            return;
        }

        if (!isDescendant(document.activeElement, this.containerElement)) {
            if (this.state.opened) {
                this.close();
            }

            this.props.onBlur();
        }
    };

    handleKeyUp = e => {
        const keyCode = KeyCode.getByValue(e.which);
        if (keyCode === KeyCode.Enter && this.state.opened) {
            this.close();
        } else {
            this.calendarComponent.getCalendar().handleKeyUp(e);
        }
    };

    handleChange = e => {
        const value = e.target.value;

        this.setState({ value });
        this.props.onChange(value);

        // Provided for legacy code that works with instances rather than with strings
        if (this.props.getCalendarService().isValidDateString(value)) {
            const date = this.props.getCalendarService().getDateFromDateString(value);
            this.props.onDateChange(date);
        }
    };

    handleDateChange = date => {
        const value = this.props.getCalendarService().getDateString(date);
        this.setState({ value });
        this.props.onChange(value);
        this.props.onDateChange(date);
    };

    handleDateClick = () => {
        if (this.props.closeOnDateClick && this.state.opened) {
            if (this.state.opened) {
                this.close();
                this.props.onBlur();
            }
        }
    };

    handleClickAway = () => {
        if (this.state.opened) {
            this.close();
            this.props.onBlur();
        }
    };

    handleArrowClick = () => {
        if (!this.state.opened) {
            this.inputElement.focus();
        }
    };

    registerBlurHandler() {
        this.blurHandler = document.addEventListener('focus', () => this.handleBlur(), true);
    }

    deregisterBlurHandler() {
        document.removeEventListener('focus', this.blurHandler);
    }

    open() {
        this.setState({ opened: true });
        this.props.registerClickAway();
        this.registerBlurHandler();
    }

    close() {
        this.setState({ opened: false });
        this.props.deregisterClickAway();
        this.deregisterBlurHandler();
    }

    render() {
        const { innerRef, getCalendarService, showMonthSelector, ...other } = this.props;
        const { opened, value } = this.state;

        delete other.onBlur;
        delete other.defaultValue;

        let date;
        if (getCalendarService().isValidDateString(value)) {
            date = getCalendarService().getDateFromDateString(value);
        }

        const datePickerContainerElementProps = {
            innerRef: c => {
                this.containerElement = c;
                innerRef(c);
            },
        };

        const calendarProps = {
            ref: c => (this.calendarComponent = c),
            anchorElement: () => this.containerElement,
            anchorOrigin: Origin.BottomCenter,
            date,
            getCalendarService,
            onDateClick: this.handleDateClick,
            onDateChange: this.handleDateChange,
            opened,
            showMonthSelector,
        };

        const inputProps = {
            ...other,
            ref: c => (this.inputComponent = c),
            innerRef: c => (this.inputElement = c),
            value,
            onFocus: this.handleFocus,
            onKeyUp: this.handleKeyUp,
            onChange: this.handleChange,
        };

        const arrowProps = {
            tabIndex: -1,
            onClick: this.handleArrowClick,
        };

        return (
            <DatePickerContainerElement {...datePickerContainerElementProps}>
                <DatePickerInputElement>
                    <InputElement {...inputProps} />
                    <DatePickerButtonElement {...arrowProps} />
                </DatePickerInputElement>
                <OverlayedSingleDatePicker {...calendarProps} />
            </DatePickerContainerElement>
        );
    }
}

export const SingleDateStringPicker = ClickAway(BaseSingleDateStringPicker);
export default Field(SingleDateStringPicker);
