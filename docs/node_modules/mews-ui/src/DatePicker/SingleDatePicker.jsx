import React, { Component } from 'react';
import { PropTypes as pt } from 'prop-types';
import { KeyCode } from 'mews-js';
import { noop } from '../utils/func';
import Calendar from '../Calendar/Calendar';

export default class SingleDatePicker extends Component {
    static propTypes = {
        date: pt.any, // eslint-disable-line react/forbid-prop-types
        minDate: pt.any, // eslint-disable-line react/forbid-prop-types
        maxDate: pt.any, // eslint-disable-line react/forbid-prop-types
        getCalendarService: pt.func,
        modifiers: pt.objectOf(pt.func),
        onDateClick: pt.func,
        onDateChange: pt.func,
    };

    static defaultProps = {
        onDateClick: noop,
        onDateChange: noop,
    };

    constructor(props) {
        super(props);

        const { date, getCalendarService } = props;

        this.state = {
            selectedDate: date || getCalendarService().getCurrentDate(),
        };

        this.modifiers = {
            selected: this.isSelected,
        };
    }

    componentWillReceiveProps(nextProps) {
        if (nextProps.date && !this.props.getCalendarService().isDateEqual(nextProps.date, this.state.selectedDate)) {
            this.setState({
                selectedDate: nextProps.date,
            });
        }
    }

    handleDateClick = date => {
        if (!this.props.getCalendarService().isDateEqual(date, this.state.selectedDate)) {
            this.setState({ selectedDate: date });
            this.props.onDateChange(date);
        }

        this.props.onDateClick(date);
    };

    handleKeyUp = e => {
        let handled;
        const keyCode = KeyCode.getByValue(e.which);

        switch (keyCode) {
            case KeyCode.Up:
                this.moveDate(this.props.getCalendarService().getPrevWeek);
                handled = true;
                break;

            case KeyCode.Down:
                this.moveDate(this.props.getCalendarService().getNextWeek);
                handled = true;
                break;

            case KeyCode.Left:
                this.moveDate(this.props.getCalendarService().getPrevDate);
                handled = true;
                break;

            case KeyCode.Right:
                this.moveDate(this.props.getCalendarService().getNextDate);
                handled = true;
                break;

            default:
                break;
        }

        if (handled) {
            e.stopPropagation();
            e.preventDefault();
        }
    };

    moveDate(operation) {
        const newDate = operation(this.state.selectedDate);
        if (!this.isDateDisabled(newDate)) {
            this.setState(() => ({ selectedDate: newDate }), () => this.props.onDateChange(newDate));
        }
    }

    isDateDisabled(date) {
        return this.props.getCalendarService().isDateDisabled(date, { minDate: this.props.minDate, maxDate: this.props.maxDate });
    }

    isSelected = date => {
        return this.props.getCalendarService().isDateEqual(date, this.state.selectedDate);
    };

    render() {
        const { getCalendarService, modifiers, ...other } = this.props;
        const { selectedDate } = this.state;

        const month = getCalendarService().getMonthOfDate(selectedDate);

        const calendarProps = {
            ...other,
            getCalendarService,
            month,
            modifiers: {
                ...modifiers,
                ...this.modifiers,
            },
            onDateClick: this.handleDateClick,
            singlePicker: true,
        };

        return (
            <Calendar {...calendarProps} />
        );
    }
}
