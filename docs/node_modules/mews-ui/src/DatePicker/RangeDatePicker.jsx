import _ from 'lodash';
import React, { Component } from 'react';
import { PropTypes as pt } from 'prop-types';
import { noop } from '../utils/func';
import Calendar from '../Calendar/Calendar';

const START_DATE = 'start';
const END_DATE = 'end';

export default class RangeDatePicker extends Component {
    static propTypes = {
        allowOneDateRange: pt.bool,
        startDate: pt.any, // eslint-disable-line react/forbid-prop-types
        endDate: pt.any, // eslint-disable-line react/forbid-prop-types
        getCalendarService: pt.func,
        modifiers: pt.objectOf(pt.func),
        onDateClick: pt.func,
        onRangeChange: pt.func,
    };

    static defaultProps = {
        onDateClick: noop,
        onRangeChange: noop,
    };

    constructor(props) {
        super(props);

        const { startDate, endDate } = props;

        this.state = {
            startDate,
            endDate,
            selecting: START_DATE,
        };

        this.modifiers = {
            startDate: this.isStartDate,
            endDate: this.isEndDate,
            inBetweenDate: this.isInBetweenDate,
        };
    }

    handleDateClick = date => {
        const { getCalendarService } = this.props;
        const { selecting } = this.state;

        if (selecting === START_DATE) {
            this.setState({
                startDate: date,
                endDate: null,
                selecting: END_DATE,
            });
        } else {
            const [startDate, endDate] = getCalendarService().getOrderedRange(date, this.state.startDate);
            if (!this.props.allowOneDateRange && getCalendarService().isDateEqual(startDate, endDate)) {
                return;
            }

            this.setState({
                startDate,
                endDate,
                selecting: START_DATE,
            });

            this.props.onRangeChange(startDate, endDate);
        }

        this.props.onDateClick(date);
    };

    isStartDate = date => {
        const { startDate } = this.state;
        return !_.isNil(startDate) && this.props.getCalendarService().isDateEqual(date, startDate);
    };

    isEndDate = date => {
        const { endDate } = this.state;
        return !_.isNil(endDate) && this.props.getCalendarService().isDateEqual(date, endDate);
    };

    isInBetweenDate = date => {
        const { startDate, endDate } = this.state;
        return !_.isNil(startDate) && !_.isNil(endDate) && this.props.getCalendarService().isDateBetween(date, startDate, endDate);
    };

    render() {
        const { modifiers, ...other } = this.props;

        const calendarProps = {
            ...other,
            modifiers: {
                ...modifiers,
                ...this.modifiers,
            },
            onDateClick: this.handleDateClick,
            rangePicker: true,
        };

        return (
            <Calendar {...calendarProps} />
        );
    }
}
