import React, { Component } from 'react';
import { PropTypes as pt } from 'prop-types';
import Checkbox from '../Checkbox/Checkbox';

import { noop } from '../utils/func';
import {
    ListItemAvatarElement,
    ListItemContentElement,
    ListItemElement,
    ListItemIconElement,
    ListItemLeftElement,
    ListItemRightElement,
    ListItemPrimaryTextElement,
    ListItemSecondaryTextElement,
} from './style';

class ListItem extends Component {
    static propTypes = {
        dense: pt.bool,

        leftAvatar: pt.element,
        leftIcon: pt.element,

        rightAvatar: pt.element,
        rightIcon: pt.element,
        rightIconButton: pt.element,

        primaryText: pt.oneOfType([pt.string, pt.element]),
        secondaryText: pt.string,
        secondaryTextLines: pt.number,

        inset: pt.bool,

        value: pt.any,

        onClick: pt.func,
        innerRef: pt.func,
        children: pt.node,
    };

    static defaultProps = {
        innerRef: noop,
        onFocus: noop,
        onClick: noop,
    };

    state = {};

    getPrimaryText = () => this.primaryTextElement.textContent;

    handleClick = e => {
        e.preventDefault();
        e.stopPropagation();
        this.props.onClick(this);
    };

    render() {
        const { leftAvatar, children, dense, primaryText, secondaryText, innerRef, leftIcon, rightIcon, selected, multiselect, ...other } = this.props;

        let left;
        if (multiselect) {
            left = <Checkbox tabIndex={-1} checked={selected} />;
        }
        else if (leftAvatar) {
            left = <ListItemAvatarElement>{leftAvatar}</ListItemAvatarElement>;
        } else if (leftIcon) {
            left = <ListItemIconElement left>{leftIcon}</ListItemIconElement>;
        }

        let right;
        if (rightIcon) {
            right = <ListItemIconElement right>{rightIcon}</ListItemIconElement>;
        }

        const itemProps = {
            ...other,
            active: this.state.active,
            dense,
            innerRef: c => {
                this.domElement = c;
                innerRef(c);
            },
            selected,
            singleLineWithAvatar: !!leftAvatar && !secondaryText,
            twoLine: !!secondaryText,
            onFocus: this.handleFocus,
            onBlur: this.handleBlur,
            onClick: this.handleClick,
        };

        const primaryTextProps = {
            dense,
            innerRef: c => (this.primaryTextElement = c),
        };

        return (
            <ListItemElement {...itemProps} listVariant="single-line">
                {left && <ListItemLeftElement>{left}</ListItemLeftElement>}
                <ListItemContentElement>
                    <ListItemPrimaryTextElement {...primaryTextProps}>{primaryText}</ListItemPrimaryTextElement>
                    {secondaryText && <ListItemSecondaryTextElement>{secondaryText}</ListItemSecondaryTextElement>}
                </ListItemContentElement>
                {right && <ListItemRightElement>{right}</ListItemRightElement>}
                {children}
            </ListItemElement>
        );
    }
}

export default ListItem;
