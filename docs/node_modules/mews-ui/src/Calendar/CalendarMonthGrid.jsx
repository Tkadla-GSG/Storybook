import _ from 'lodash';
import React, { Component } from 'react';
import { PropTypes as pt } from 'prop-types';
import { noop } from '../utils/func';
import CalendarMonth from './CalendarMonth';
import { MONTH_WIDTH, MonthGridElement } from './style';

const PREV_TRANSITION = 'prev';
const NEXT_TRANSITION = 'next';

export default class CalendarMonthGrid extends Component {
    static propTypes = {
        innerRef: pt.func,
        month: pt.any.isRequired, // eslint-disable-line react/forbid-prop-types
        numberOfMonths: pt.number,
        onMonthTransitionEnd: pt.func,
        getCalendarService: pt.func.isRequired,
    };

    static defaultProps = {
        innerRef: noop,
        month: null,
        numberOfMonths: 1,
        onMonthTransitionEnd: noop,
    };

    state = {
        months: _.times(
            this.props.numberOfMonths,
            i => this.props.getCalendarService().addMonths(this.props.month, i)
        ),
        monthTransition: null,
    };

    componentWillReceiveProps(nextProps) {
        const { month, numberOfMonths, getCalendarService } = this.props;
        const { month: nextMonth } = nextProps;
        const { months } = this.state;

        const hasMonthChanged = !getCalendarService().isMonthEqual(month, nextMonth);

        if (this.state.monthTransition !== null) {
            return;
        }

        // check month change
        if (hasMonthChanged) {
            const newMonths = [...months];

            // sliding to right
            if (getCalendarService().isMonthGreater(nextMonth, month)) {
                // compute number of months to be slided in
                const newMonthsCount = Math.min(getCalendarService().diffMonths(nextMonth, month), numberOfMonths);

                const initialNewMonth = newMonthsCount >= numberOfMonths
                    ? nextMonth
                    : getCalendarService().addMonths(_.last(months), 1);

                for (let i = 0; i !== newMonthsCount; ++i) {
                    newMonths.push(getCalendarService().addMonths(initialNewMonth, i));
                }

                this.setState({
                    months: newMonths,
                    monthTransition: NEXT_TRANSITION,
                    newMonthsCount,
                });
            } else {
                // compute number of months to be slided in
                const newMonthsCount = Math.min(getCalendarService().diffMonths(month, nextMonth), numberOfMonths);

                const initialNewMonth = newMonthsCount >= numberOfMonths
                    ? nextMonth
                    : getCalendarService().subtractMonths(_.first(months), 1);

                for (let i = newMonthsCount - 1; i >= 0; --i) {
                    newMonths.unshift(getCalendarService().addMonths(initialNewMonth, i));
                }

                // First prepare new months on the left side, translating the grid container
                const transform = `translateX(-${newMonthsCount * MONTH_WIDTH}px)`;
                this.monthGridElement.style.transform = transform;

                this.setState({
                    months: newMonths,
                    newMonthsCount,
                }, () => {
                    setTimeout(() => {
                        this.setState({
                            monthTransition: PREV_TRANSITION,
                        });
                    });
                });
            }
        }
    }

    handleMonthTransitionEnd = () => {
        const { months, monthTransition, newMonthsCount } = this.state;

        let newMonths = [...months];

        if (monthTransition === NEXT_TRANSITION) {
            newMonths = newMonths.slice(newMonthsCount);
        } else if (monthTransition === PREV_TRANSITION) {
            newMonths = newMonths.slice(0, months.length - newMonthsCount);
        }

        this.setState({
            months: newMonths,
            monthTransition: null,
            newMonthsCount: null,
        }, () => this.props.onMonthTransitionEnd());
    };

    render() {
        const { innerRef, getCalendarService, ...other } = this.props;
        const { months, monthTransition, newMonthsCount } = this.state;

        let transform;
        if (monthTransition === PREV_TRANSITION) {
            transform = `translateX(0)`;
        } else if (monthTransition === NEXT_TRANSITION) {
            transform = `translateX(-${newMonthsCount * MONTH_WIDTH}px)`;
        }

        const finalStyle = {
            transform,
            width: `${months.length * MONTH_WIDTH}px`,
        };

        const monthGridProps = {
            innerRef: c => {
                this.monthGridElement = c;
                innerRef(c);
            },
            animating: monthTransition !== null,
            style: finalStyle,
            onTransitionEnd: this.handleMonthTransitionEnd,
        };

        return (
            <MonthGridElement {...monthGridProps}>
                {_.map(months, m => {
                    const monthName = getCalendarService().getMonthName(m);

                    return (
                        <CalendarMonth
                            {...other}
                            key={monthName}
                            month={m}
                            getCalendarService={getCalendarService}
                        />
                    );
                })}
            </MonthGridElement>
        );
    }
}
