import styled, { css } from 'styled-components';
import { COLOR_WHITE, PALETTE_GREY_400 } from '../colors';
import { DEFAULT_THEME, PREFERRED_FONT } from '../variables';
import { alpha } from '../utils/color';
import IconButton from '../Button/IconButton';

const MONTH_NAME_SIZE = 48;
const DAY_SIZE = 40;
const DAY_NAME_SIZE = 20;
const HORIZONTAL_PADDING = 12;
const VERTICAL_PADDING = 8;

export const MONTH_WIDTH = (7 * DAY_SIZE) + (HORIZONTAL_PADDING * 2);
const MONTH_HEIGHT = MONTH_NAME_SIZE + DAY_NAME_SIZE + (6 * DAY_SIZE) + (VERTICAL_PADDING * 2);

export const CalendarElement = styled.div`
    display: inline-flex;
`;

export const CalendarMonthGridContainerElement = styled.div`
    position: relative;
    overflow-x: hidden;
`;

const buttonDefaultProps = {
    ...IconButton.defaultProps,
    tabIndex: -1,
};

export const PrevMonthIconButton = styled(IconButton)`
    position: absolute;
    top: 0;
    left: 0;
`;
PrevMonthIconButton.defaultProps = { ...buttonDefaultProps, icon: 'chevron_left' };

export const NextMonthIconButton = styled(IconButton)`
    position: absolute;
    top: 0;
    right: 0;
`;
NextMonthIconButton.defaultProps = { ...buttonDefaultProps, icon: 'chevron_right' };

export const CalendarMonthSelectorElement = styled.div`
    width: 180px;
    height: ${MONTH_HEIGHT}px;
    border-right: 1px solid ${props => props.theme.dividerColor};
    overflow: hidden;
`;
CalendarMonthSelectorElement.defaultProps = { theme: DEFAULT_THEME };

export const ScrollContainerElement = styled.div`
    width: 200px;
    height: 100%;
    overflow-y: scroll;
    overflow-x: hidden;
`;

export const SelectableMonthElement = styled.div.attrs({
    onClick: props => () => {
        props.onMonthClick(props.month);
    },
})`
    font-size: 14px;
    width: 100%;
    height: 48px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;

    ${props => props.selected && `
        font-weight: 500;
        color: ${COLOR_WHITE};
        background-color: ${props.theme.primaryColor};
    `}
`;
SelectableMonthElement.defaultProps = { theme: DEFAULT_THEME };

export const MonthGridElement = styled.div`
    display: flex;

    ${props => props.animating && `
        transition: transform .2s;
    `}
`;

export const MonthElement = styled.div`
    height: ${MONTH_HEIGHT}px;
    width: ${MONTH_WIDTH}px;
    padding: ${VERTICAL_PADDING}px ${HORIZONTAL_PADDING}px;

    box-sizing: border-box;

    #overflow: hidden;

    display: inline-flex;
    flex-direction: column;
    align-items: center;
    justify-content: flex-start;
`;

export const WeekElement = styled.div`
    display: flex;
    justify-content: space-between;
`;

export const MonthNameElement = styled.div`
    font-size: 14px;
    font-weight: 500;
    text-align: center;
    height: ${MONTH_NAME_SIZE}px;
    margin-top: -8px;
    margin-bottom: ${DAY_NAME_SIZE}px;

    align-items: center;
    display: flex;
    justify-content: center;
`;

export const DayNamesElement = styled.div`
    color: ${PALETTE_GREY_400};
    font-size: 12px;
    font-weight: 500;
    position: absolute;
    top: ${MONTH_NAME_SIZE}px;
`;

export const DayNamesWeekElement = styled.div`
    padding: 0 12px;
    width: ${MONTH_WIDTH}px;
    box-sizing: border-box;
    display: inline-flex;
    justify-content: space-between;
`;

export const DayNameElement = styled.span`
    width: ${DAY_SIZE}px;
    height: ${DAY_NAME_SIZE}px;
    text-align: center;
`;

export const CalendarDayElement = styled.div`
    width: ${DAY_SIZE}px;
    height: ${DAY_SIZE}px;
    text-align: center;
`;

export const DayButtonElement = styled.button`
    background: transparent;
    border: 0;
    color: ${props => props.theme.primaryTextColor};
    cursor: pointer;
    display: inline-block;
    font-family: ${PREFERRED_FONT};
    font-size: 12px;
    outline: none;
    -webkit-tap-highlight-color: transparent;

    width: 40px;
    height: 40px;
    margin: 0;

    ${props => props.singlePicker && `
        width: 32px;
        height: 32px;
        margin: 4px;
        padding: 0;
        border-radius: 50%;
    `}

    &[disabled] {
        color: ${props => props.theme.disabledColor};
        cursor: auto;
        pointer-events: none;
    }

    ${props => !props.selected && css`
        &:hover {
            background-color: ${alpha(props.theme.primaryColor, 0.3)};
            color: ${COLOR_WHITE} !important;
        }
    `}

    ${props => props.selected && css`
        border-radius: 50%;
        background-color: ${props.theme.primaryColor};
        color: ${COLOR_WHITE};
    `}

    ${props => props.startDate && `
        background-color: ${props.theme.primaryColor};
        color: ${COLOR_WHITE};
        border-top-left-radius: 50%;
        border-bottom-left-radius: 50%;
    `}

    ${props => props.endDate && `
        background-color: ${props.theme.primaryColor};
        color: ${COLOR_WHITE};
        border-top-right-radius: 50%;
        border-bottom-right-radius: 50%;
    `}

    ${props => props.inBetweenDate && `
        background-color: ${alpha(props.theme.primaryColor, 0.6)};
        color: ${COLOR_WHITE};
    `}
`;
DayButtonElement.defaultProps = {
    theme: DEFAULT_THEME,
};
