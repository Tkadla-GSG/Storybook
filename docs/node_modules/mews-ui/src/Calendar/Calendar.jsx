import _ from 'lodash';
import React, { Component } from 'react';
import { PropTypes as pt } from 'prop-types';
import { noop } from '../utils/func';

import CalendarMonthSelector from './CalendarMonthSelector';
import CalendarMonthGrid from './CalendarMonthGrid';
import {
    CalendarElement,
    CalendarMonthGridContainerElement,
    PrevMonthIconButton,
    NextMonthIconButton,
    DayNamesElement,
    DayNamesWeekElement,
    DayNameElement,
} from './style';

export default class Calendar extends Component {
    static propTypes = {
        className: pt.string,
        getCalendarService: pt.func.isRequired,
        modifiers: pt.objectOf(pt.func),
        month: pt.any, // eslint-disable-line react/forbid-prop-types
        minDate: pt.any, // eslint-disable-line react/forbid-prop-types
        maxDate: pt.any, // eslint-disable-line react/forbid-prop-types
        numberOfMonths: pt.number,
        onMonthTransitionEnd: pt.func,
        showMonthSelector: pt.bool,
    };

    static defaultProps = {
        modifiers: {},
        numberOfMonths: 1,
        onMonthTransitionEnd: noop,
    };

    constructor(props) {
        super(props);

        const { getCalendarService } = props;
        const month = props.month || getCalendarService().getMonthOfDate(getCalendarService().getCurrentDate());

        const dayNames = getCalendarService().getDayNames();

        this.state = {
            month,
            monthTransition: null,
            dayNames,
        };
    }

    componentDidMount() {
        // limit width of the calendar - it won't work if the month grid has margin
        this.monthGridContainerElement.style.width = this.monthGridElement.style.width;
    }

    componentWillReceiveProps(nextProps) {
        // This can potentially fail in case of current transition, there should be queing implemented, but it's not easily solvable
        // Any suggestions are welcomed
        if (nextProps.month && !this.props.getCalendarService().isMonthEqual(nextProps.month, this.state.month)) {
            if (!this.isTransitioning) {
                this.changeMonth(nextProps.month);
            }
        }
    }

    handlePrevClick = () => {
        if (this.isTransitioning) {
            return;
        }

        const { month } = this.state;
        const prevMonth = this.props.getCalendarService().getPrevMonth(month);
        this.changeMonth(prevMonth);
    };

    handleNextClick = () => {
        if (this.isTransitioning) {
            return;
        }

        const { month } = this.state;
        const nextMonth = this.props.getCalendarService().getNextMonth(month);
        this.changeMonth(nextMonth);
    };

    handleMonthSelect = month => {
        if (this.isTransitioning) {
            return;
        }

        this.changeMonth(month);
    };

    handleMonthTransitionEnd = () => {
        this.isTransitioning = false;
        this.props.onMonthTransitionEnd();
    };

    changeMonth = month => {
        this.isTransitioning = true;
        this.setState({ month });
    };

    render() {
        const { className, getCalendarService, minDate, maxDate, numberOfMonths, showMonthSelector, ...other } = this.props;
        const { month, dayNames } = this.state;

        const allowedRange = { minDate, maxDate };
        const prevMonth = getCalendarService().subtractMonths(month, 1);
        const nextMonth = getCalendarService().addMonths(month, numberOfMonths);

        const calendarProps = {
            className,
        };

        const monthGridContainerProps = {
            innerRef: c => (this.monthGridContainerElement = c),
        };

        const monthGridProps = {
            ...other,
            getCalendarService,
            month,
            numberOfMonths,
            onMonthTransitionEnd: this.handleMonthTransitionEnd,
            innerRef: c => (this.monthGridElement = c),
        };

        return (
            <CalendarElement {...calendarProps}>
                {showMonthSelector && <CalendarMonthSelector month={month} onChange={this.handleMonthSelect} getCalendarService={getCalendarService} />}
                <CalendarMonthGridContainerElement {...monthGridContainerProps}>
                    <CalendarMonthGrid {...monthGridProps} />
                    <PrevMonthIconButton
                        onClick={this.handlePrevClick}
                        disabled={getCalendarService().isMonthDisabled(prevMonth, allowedRange)}
                    />
                    <NextMonthIconButton
                        onClick={this.handleNextClick}
                        disabled={getCalendarService().isMonthDisabled(nextMonth, allowedRange)}
                    />
                    <DayNamesElement>
                        {_.times(numberOfMonths, n => (
                            <DayNamesWeekElement key={n}>
                                {_.map(dayNames, name => <DayNameElement key={name}>{name}</DayNameElement>)}
                            </DayNamesWeekElement>
                        ))}
                    </DayNamesElement>
                </CalendarMonthGridContainerElement>
            </CalendarElement>
        );
    }
}
