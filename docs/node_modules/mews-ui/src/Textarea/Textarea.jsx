import React, { Component } from 'react';
import { PropTypes as pt } from 'prop-types';
import { noop } from '../utils/func';
import Field from '../Field/Field';
import { TextareaElement } from './style';

export class Textarea extends Component {
    static propTypes = {
        onChange: pt.func,
        onHeightChange: pt.func,
        value: pt.any,
        defaultValue: pt.any,
    };

    static defaultProps = {
        onChange: noop,
        onHeightChange: noop,
        rows: 1,
    };

    state = {
        value: this.props.value || this.props.defaultValue,
    };

    componentDidMount() {
        this.handleResize();
    }

    componentWillReceiveProps(nextProps) {
        if (this.props.value !== nextProps.value) {
            this.setState({ value: nextProps.value });
        }
    }

    componentDidUpdate() {
        this.handleResize();
    }

    handleChange = e => {
        const value = e.target.value;
        this.setState({ value });
        this.props.onChange(value);
    };

    handleResize = () => {
        // compute the height difference between inner height and outer height
        const style = window.getComputedStyle(this.textarea);
        const heightOffset = style.boxSizing === 'content-box'
            ? -(parseFloat(style.paddingTop) + parseFloat(style.paddingBottom))
            : parseFloat(style.borderTopWidth) + parseFloat(style.borderBottomWidth);

        // resize the input to its content size
        this.textarea.style.height = 'auto';
        const height = `${this.textarea.scrollHeight + heightOffset}px`;
        this.textarea.style.height = height;

        this.props.onHeightChange(height);
    };

    render() {
        const textareaProps = {
            ...this.props,
            innerRef: c => (this.textarea = c),
            onChange: this.handleChange,
        };

        return (
            <TextareaElement {...textareaProps} />
        );
    }
}

export default Field(Textarea);
