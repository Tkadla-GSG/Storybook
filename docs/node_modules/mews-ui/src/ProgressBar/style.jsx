import styled, { css, keyframes } from 'styled-components';

import { PALETTE_GREY_500 } from '../colors';
import { ANIMATION_CURVE_DEFAULT, ANIMATION_DURATION, DEFAULT_THEME } from '../variables';
import ProgressMode from './ProgressMode';

const PROGRESS_HEIGHT = '4px';
export const PROGRESS_BAR_COLOR = PALETTE_GREY_500;

const CIRCLE_WRAPPER_WIDTH = '60px';
const CIRCLE_RADIUS = 25;
const SCALE_RATIO = CIRCLE_RADIUS / 20;

const linearIndeterminateBar = keyframes`
    0% {
        transform: translate(-50%) scaleX(0);
    }

    50% {
        transform: translate(-0%) scaleX(0.3);
    }

    100% {
        transform: translate(50%) scaleX(0);
    }
`;

export const ProgressLinearElement = styled.div`
    background: ${PROGRESS_BAR_COLOR};
    display: inline-block;
    height: ${PROGRESS_HEIGHT};
    overflow: hidden;
    position: relative;
    width: 100%;
`;

export const LinearValueBar = styled.span`
    bottom: 0;
    left: 0;
    position: absolute;
    right: 0;
    top: 0;
    transform: scaleX(0);
    transform-origin: left center;
    transition-duration: ${ANIMATION_DURATION};
    transition-timing-function: ${ANIMATION_CURVE_DEFAULT};
    background-color: ${props => props.theme.primaryColor};

    ${props => props.mode === ProgressMode.Indeterminate && css`
        animation: ${linearIndeterminateBar} 1s linear infinite;
        transform-origin: center center;
    `}

    ${props => props.disabled && css`
        background-color: ${PROGRESS_BAR_COLOR};
    `}
`;
LinearValueBar.defaultProps = { theme: DEFAULT_THEME };

const circularIndeterminateBarRotate = keyframes`
    100% {
        transform: rotate(360deg);
    }
`;

const circularIndeterminateBarDash = keyframes`
    0% {
        stroke-dasharray: ${SCALE_RATIO * 1}, ${SCALE_RATIO * 200};
        stroke-dashoffset: ${SCALE_RATIO * 0};
    }

    50% {
        stroke-dasharray: ${SCALE_RATIO} * 89), ${SCALE_RATIO * 200};
        stroke-dashoffset: ${SCALE_RATIO} * -35);
    }

    100% {
        stroke-dasharray: ${SCALE_RATIO * 89}, ${SCALE_RATIO * 200};
        stroke-dashoffset: ${SCALE_RATIO * -124};
    }
`;

export const ProgressCircularElement = styled.div`
    display: inline-block;
    height: ${CIRCLE_WRAPPER_WIDTH};
    position: relative;
    transform: rotate(-90deg);
    width: ${CIRCLE_WRAPPER_WIDTH};
`;

export const ProgressCircularSvg = styled.svg`
    height: 100%;
    width: 100%;

    ${props => props.mode === ProgressMode.Indeterminate && css`
        animation: ${circularIndeterminateBarRotate} 2s linear infinite;
    `}
`;

export const ProgressCircularPath = styled.circle`
    fill: none;
    stroke: ${props => props.theme.primaryColor};
    stroke-dasharray: 0, calc(${SCALE_RATIO} * 200);
    stroke-dashoffset: 0;
    stroke-linecap: round;
    stroke-miterlimit: 20;
    stroke-width: 4;
    transition: stroke-dasharray ${ANIMATION_DURATION} ${ANIMATION_CURVE_DEFAULT};

    ${props => props.mode === ProgressMode.Indeterminate && css`
        animation: ${circularIndeterminateBarDash} 1.5s ease-in-out infinite;
        stroke-dasharray: calc(${SCALE_RATIO} * 1), calc(${SCALE_RATIO} * 200);
        stroke-dashoffset: 0;
    `}
`;
ProgressCircularPath.defaultProps = { theme: DEFAULT_THEME };

export function calculateRatio({ max, min, value }) {
    if (value < min) {
        return 0;
    }
    if (value > max) {
        return 1;
    }

    return (value - min) / (max - min);
}
