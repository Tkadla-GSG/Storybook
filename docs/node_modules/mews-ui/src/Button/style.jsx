import styled, { css } from 'styled-components';
import { alpha } from '../utils/color';
import {
    ANIMATION_CURVE_DEFAULT,
    ANIMATION_CURVE_FAST_OUT_LINEAR_IN,
    PREFERRED_FONT,
    SHADOW_2P,
} from '../variables';
import { COLOR_BLACK, COLOR_WHITE, PALETTE_GREY_900 } from '../colors';
import FontIcon from '../FontIcon/FontIcon';
import { RIPPLE_WRAPPER_CLASSNAME } from '../Ripple/style';

const BUTTON_BORDER_RADIUS = '2px';
const BUTTON_HEIGHT = '36px';
const BUTTON_FLOATING_FONT_SIZE = '24px';
const BUTTON_FLOATING_HEIGHT = '56px';
const BUTTON_FLOATING_MINI_HEIGHT = '40px';
const BUTTON_FLOATING_MINI_FONT_SIZE = `calc(${BUTTON_FLOATING_MINI_HEIGHT} / 2.25)`;

const BUTTON_DISABLED_BACKGROUND_COLOR = alpha(COLOR_BLACK, 0.12);
const BUTTON_DISABLED_TEXT_COLOR = alpha(COLOR_BLACK, 0.24);
// const BUTTON_DISABLED_TEXT_COLOR_INVERSE = alpha(COLOR_BLACK, 0.54);
// const BUTTON_DISABLED_BACKGROUND_COLOR_INVERSE = alpha(COLOR_BLACK, 0.08);

const BUTTON_PRIMARY_COLOR = ({ theme }) => theme.primaryColor;
const BUTTON_PRIMARY_COLOR_HOVER = ({ theme }) => alpha(theme.primaryColor, 0.2);
const BUTTON_PRIMARY_COLOR_CONTRAST = ({ theme }) => theme.primaryContrastColor;

const BUTTON_NEUTRAL_COLOR = COLOR_WHITE;
const BUTTON_NEUTRAL_COLOR_CONTRAST = PALETTE_GREY_900;
const BUTTON_NEUTRAL_COLOR_HOVER = alpha(PALETTE_GREY_900, 0.2);

const BUTTON_SQUARED_ICON_MARGIN = '6px';
const BUTTON_SQUARED_MIN_WIDTH = '88px';
const BUTTON_SQUARED_PADDING = '0 16px';

const ICON_BUTTON_FONT_SIZE = '24px';
const ICON_BUTTON_SIZE = '48px';

const squaredButtonStyles = css`
    border-radius: ${BUTTON_BORDER_RADIUS};
    min-width: ${BUTTON_SQUARED_MIN_WIDTH};
    padding: ${BUTTON_SQUARED_PADDING};

    & > svg {
        margin-right: '5px';
    }
`;

const solidButtonStyles = css`
    &[disabled] {
        background-color: ${BUTTON_DISABLED_BACKGROUND_COLOR};
        box-shadow: ${SHADOW_2P};
    }

    &:active {
        box-shadow: ${SHADOW_2P};
    }

    &:focus:not(:active) {
        box-shadow:
        0 0 8px rgba(0, 0, 0, 0.18),
        0 8px 16px rgba(0, 0, 0, 0.36);
    }
`;

const primaryStyles = css`
    ${({ shape }) => (shape === 'raised' || shape === 'floating') && css`
        background: ${BUTTON_PRIMARY_COLOR};
        color: ${BUTTON_PRIMARY_COLOR_CONTRAST};
    `}

    ${({ shape }) => (shape === 'flat' || shape === 'icon') && css`
        color: ${BUTTON_PRIMARY_COLOR};

        &:focus:not(:active) {
            background: ${BUTTON_PRIMARY_COLOR_HOVER};
        }
    `}

    ${({ shape }) => shape === 'flat' && css`
        &:hover {
            background: ${BUTTON_PRIMARY_COLOR_HOVER};
        }
    `}
`;

const neutralStyles = css`
    ${({ shape }) => (shape === 'raised' || shape === 'floating') && css`
        background-color: ${BUTTON_NEUTRAL_COLOR};
        color: ${BUTTON_NEUTRAL_COLOR_CONTRAST};
    `}

    ${({ shape }) => (shape === 'flat' || shape === 'icon') && css`
        color: ${BUTTON_NEUTRAL_COLOR_CONTRAST};

        &:focus:not(:active) {
            background: ${BUTTON_NEUTRAL_COLOR_HOVER};
        }
    `}

    ${props => (props.shape === 'icon') && css`
        color: ${props.theme.iconColor};

        &:focus:not(:active) {
            background: ${BUTTON_NEUTRAL_COLOR_HOVER};
        }
    `}

    ${({ shape }) => shape === 'flat' && css`
        &:hover {
            background: ${BUTTON_NEUTRAL_COLOR_HOVER};
        }
    `}
`;

// TODO apply reset
const buttonStyles = css`
    align-content: center;
    align-items: center;
    border: 0;
    cursor: pointer;
    display: inline-block;
    flex-direction: row;
    font-family: ${PREFERRED_FONT};
    font-size: 14px;
    font-weight: 400;
    height: ${BUTTON_HEIGHT};
    justify-content: center;
    letter-spacing: 0;
    line-height: ${BUTTON_HEIGHT};
    outline: none;
    padding: 0;
    position: relative;
    text-align: center;
    text-decoration: none;
    text-transform: uppercase;
    transition:
        box-shadow 0.2s ${ANIMATION_CURVE_FAST_OUT_LINEAR_IN},
        background-color 0.2s ${ANIMATION_CURVE_DEFAULT},
        color 0.2s ${ANIMATION_CURVE_DEFAULT};
    white-space: nowrap;

    &::-moz-focus-inner {
        border: 0;
    }

    & > * {
        pointer-events: none;
    }

    & > input {
        height: 0.1px;
        margin: 0;
        opacity: 0;
        overflow: hidden;
        padding: 0;
        position: absolute;
        width: 0.1px;
        z-index: 0;
    }

    & > svg {
        display: inline-block;
        fill: currentColor;
        font-size: 120%;
        height: ${BUTTON_HEIGHT};
        vertical-align: top;
        width: 1em;
    }

    & > .${RIPPLE_WRAPPER_CLASSNAME} {
        overflow: hidden;
    }

    &[disabled] {
        color: ${BUTTON_DISABLED_TEXT_COLOR};
        cursor: auto;
        pointer-events: none;
    }
    
    ${({ shape }) => {
        if (shape === 'raised') {
            return css`
                ${squaredButtonStyles};
                ${solidButtonStyles};
                box-shadow: ${SHADOW_2P};
            `;
        } else if (shape === 'floating') {
            return css`
                ${solidButtonStyles}
                border-radius: 50%;
                box-shadow:
                    0 1px 1.5px 0 rgba(0, 0, 0, 0.12),
                    0 1px 1px 0 rgba(0, 0, 0, 0.24);
                font-size: ${BUTTON_FLOATING_FONT_SIZE};;
                height: ${BUTTON_FLOATING_HEIGHT};
                width: ${BUTTON_FLOATING_HEIGHT};

                ${({ mini }) => mini && css`
                    font-size: ${BUTTON_FLOATING_MINI_FONT_SIZE};
                    height: ${BUTTON_FLOATING_MINI_HEIGHT};
                    width: ${BUTTON_FLOATING_MINI_HEIGHT};
                `}

                & > .${RIPPLE_WRAPPER_CLASSNAME} {
                    border-radius: 50%;
                }
            `;
        } else if (shape === 'flat') {
            return css`
                ${squaredButtonStyles};
                background: transparent;
            `;
        }
    }}

    &:not([disabled]) {
        ${({ level }) => level === 'primary' && primaryStyles};
        ${({ level }) => level === 'neutral' && neutralStyles};
    }
`;

export const ButtonElement = styled.button`${buttonStyles}`;
export const ButtonHrefElement = styled.a`${buttonStyles}`;

export const ButtonIconElement = styled(FontIcon)`
    ${({ shape, mini }) => {
        if (shape === 'raised' || shape === 'flat') {
            return css`
                font-size: 120%;
                margin-right: ${BUTTON_SQUARED_ICON_MARGIN};
                vertical-align: middle;
            `;
        } else if (shape === 'floating') {
            const lineHeight = mini ? BUTTON_FLOATING_MINI_HEIGHT : BUTTON_FLOATING_HEIGHT;
            return css`
                line-height: ${lineHeight};
            `;
        }
    }}
`;

const iconButtonStyles = css`
    ${buttonStyles}
    background: transparent;
    border-radius: 50%;
    vertical-align: middle;
    width: ${ICON_BUTTON_SIZE};
    height: ${ICON_BUTTON_SIZE};
    padding: 12px;

    box-sizing: border-box;

    & svg {
        font-size: ${ICON_BUTTON_FONT_SIZE};
        line-height: ${BUTTON_HEIGHT};
        vertical-align: top;
    }

    & > .${RIPPLE_WRAPPER_CLASSNAME} {
        border-radius: 50%;
    }
`;

export const IconButtonElement = styled.button`${iconButtonStyles}`;
export const IconButtonHrefElement = styled.a`${iconButtonStyles}`;

export const IconButtonIconElement = styled(FontIcon)`
    font-size: ${ICON_BUTTON_FONT_SIZE};
    vertical-align: top;
`;
