import _ from 'lodash';
import React, { Component } from 'react';
import { PropTypes as pt } from 'prop-types';

import { noop } from '../utils/func';
import { DEFAULT_THEME } from '../variables';
import { IconButtonElement, IconButtonHrefElement, IconButtonIconElement } from './style';

export default class IconButton extends Component {
    static propTypes = {
        accent: pt.bool,
        children: pt.node,
        className: pt.string,
        disabled: pt.bool,
        href: pt.string,
        icon: pt.oneOfType([
            pt.string,
            pt.element,
        ]),
        innerRef: pt.func,
        inverse: pt.bool,
        neutral: pt.bool,
        onMouseUp: pt.func,
        onMouseLeave: pt.func,
        primary: pt.bool,
        type: pt.string,
    };

    static defaultProps = {
        innerRef: noop,
        neutral: true,
        onMouseUp: noop,
        onMouseLeave: noop,
        primary: false,
        theme: DEFAULT_THEME,
        type: 'button',
    };

    handleMouseUp = e => {
        this.button.blur();
        this.props.onMouseUp(e);
    };

    handleMouseLeave = e => {
        this.button.blur();
        this.props.onMouseLeave(e);
    };

    render() {
        const { children, href, icon, innerRef, primary, type, ...others } = this.props;

        const Element = href ? IconButtonHrefElement : IconButtonElement;

        const level = primary ? 'primary' : 'neutral';
        const props = {
            ...others,
            disabled: this.props.disabled,
            icon: !!icon,
            innerRef: c => {
                this.button = c;
                innerRef(c);
            },
            href,
            level,
            onMouseLeave: this.handleMouseLeave,
            onMouseUp: this.handleMouseUp,
            type: !href ? type : null,
            shape: 'icon',
        };

        return (
            <Element {...props}>
                {icon && (_.isString(icon) ? <IconButtonIconElement value={icon} /> : icon)}
                {children}
            </Element>
        );
    }
}
