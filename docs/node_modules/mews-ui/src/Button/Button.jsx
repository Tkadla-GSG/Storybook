import React, { Component } from 'react';
import { PropTypes as pt } from 'prop-types';

import { noop } from '../utils/func';
import { DEFAULT_THEME } from '../variables';
import { ButtonElement, ButtonHrefElement, ButtonIconElement } from './style';

export default class Button extends Component {
    static propTypes = {
        children: pt.node,
        disabled: pt.bool,
        flat: pt.bool,
        floating: pt.bool,
        href: pt.string,
        icon: pt.oneOfType([
            pt.string,
            pt.element,
        ]),
        innerRef: pt.func,
        inverse: pt.bool,
        label: pt.string,
        mini: pt.bool,
        neutral: pt.bool,
        onMouseUp: pt.func,
        onMouseLeave: pt.func,
        primary: pt.bool,
        raised: pt.bool,
        type: pt.string,
    };

    static defaultProps = {
        flat: false,
        floating: false,
        innerRef: noop,
        mini: false,
        neutral: true,
        onMouseUp: noop,
        onMouseLeave: noop,
        primary: false,
        raised: false,
        type: 'button',
    };

    handleMouseUp = e => {
        this.button.blur();
        this.props.onMouseUp(e);
    };

    handleMouseLeave = e => {
        this.button.blur();
        this.props.onMouseLeave(e);
    };

    render() {
        const { children, flat, floating, href, icon, innerRef, label, mini, primary, type, raised, ...others } = this.props;

        const Element = href ? ButtonHrefElement : ButtonElement;

        Element.defaultProps = {
            theme: DEFAULT_THEME,
        };

        const level = primary ? 'primary' : 'neutral';

        let shape = 'flat';
        if (flat) {
            shape = 'flat';
        } else if (raised) {
            shape = 'raised';
        } else if (floating) {
            shape = 'floating';
        }

        const props = {
            ...others,
            disabled: this.props.disabled,
            icon: !!icon,
            innerRef: c => {
                this.button = c;
                innerRef(c);
            },
            href,
            mini,
            onMouseLeave: this.handleMouseLeave,
            onMouseUp: this.handleMouseUp,
            shape,
            type: !href ? type : null,
            level,
        };

        return (
            <Element {...props}>
                {icon && <ButtonIconElement value={icon} shape={shape} mini={mini} />}
                {label}
                {children}
            </Element>
        );
    }
}
