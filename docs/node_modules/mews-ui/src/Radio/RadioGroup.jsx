import React, { Component } from 'react';
import { PropTypes as pt } from 'prop-types';
import { noop } from '../utils/func';
import RadioButton from './RadioButton';
import { RadioGroupElement } from './style';

export default class RadioGroup extends Component {
    static propTypes = {
        className: pt.string,
        children: pt.node,
        disabled: pt.bool,
        onChange: pt.func,
        value: pt.oneOfType([pt.number, pt.string, pt.bool]),
    };

    static defaultProps = {
        onChange: noop,
    };

    state = {
        value: this.props.value || null,
    };

    handleChange = (checked, e) => {
        const { value } = e.target;

        if (value !== this.state.value) {
            this.setState({ value });
            this.props.onChange(value);
        }
    };

    render() {
        const { className, disabled, children, ...other } = this.props;
        const { value } = this.state;

        delete other.value;

        return (
            <RadioGroupElement className={className}>
                {React.Children.map(children, child => (
                    !isComponentOfType(child, RadioButton)
                        ? child
                        : React.cloneElement(child, {
                            ...other,
                            checked: child.props.value === value,
                            disabled: disabled || child.props.disabled,
                            onChange: this.handleChange,
                        })
                ))}
            </RadioGroupElement>
        );
    }
}

function isComponentOfType(component, type) {
    return component && component.type === type;
}
