import _ from 'lodash';
import React, { Component } from 'react';
import { PropTypes as pt } from 'prop-types';
import { KeyCode } from 'mews-js';

import { noop } from '../utils/func';
import Origin from '../OpenableOverlay/Origin';
import ClickAway from '../ClickAway/ClickAway';
import Menu from './Menu';
import MenuItem from './MenuItem';
import {
    DropDownMenuElement,
    DropDownMenuValueElement,
    DropDownMenuArrowElement,
} from './style';

const selectedPropType = pt.oneOfType([
    pt.string,
    pt.number,
]);

class DropDownMenu extends Component {
    static propTypes = {
        autoWidth: pt.bool,
        children: pt.node,
        className: pt.string,
        large: pt.bool,
        onBlur: pt.func,
        onChange: pt.func,
        onFocus: pt.func,
        onClick: pt.func,
        selected: pt.oneOfType([selectedPropType, pt.arrayOf(selectedPropType)]),
        shadowField: pt.bool,
    };

    static defaultProps = {
        autoWidth: true,
        onBlur: noop,
        onClick: noop,
        onFocus: noop,
        onChange: noop,
        onItemSelected: noop,
    };

    state = {
        opened: false,
        selected: (this.props.selected && (this.props.multiselect ? this.props.selected : [this.props.selected])) || [],
    };

    componentDidMount() {
        this.setWidth();
    }

    componentWillReceiveProps(nextProps) {
        if (!_.isNil(nextProps.selected) && this.state.selected !== nextProps.selected) {
            this.setState({ selected: this.props.multiselect ? nextProps.selected : [nextProps.selected] });
        }
    }

    componentDidUpdate() {
        this.setWidth();
    }

    setWidth() {
        if (this.props.autoWidth) {
            // add one to avoid browsers rounding cutting off the text
            const width = this.menuDomElement.offsetWidth + 1;

            this.dropDownMenu.style.width = `${width}px`;
            this.menuDomElement.style.width = `${width}px`;
        } else {
            this.menuDomElement.style.width = '100%';
        }
    }

    open() {
        if (!this.state.opened) {
            this.props.registerClickAway();
            this.setState({ opened: true });
        }
    }

    close() {
        if (this.state.opened) {
            this.props.deregisterClickAway();
            this.setState({ opened: false });
        }
    }

    handleClick = e => {
        this.open();
        this.props.onClick(e);
    };

    handleItemClick = item => {
        if (!this.props.multiselect) {
            this.close();
        }

        this.props.onItemSelected(item);
    };

    handleClickAway = () => this.close();

    handleKeyDown = event => {
        const keyCode = KeyCode.getByValue(event.which);

        switch (keyCode) {
            case KeyCode.Up:
            case KeyCode.Down:
            case KeyCode.Enter:
                this.open();
                break;

            case KeyCode.Esc:
                this.close();
                break;

            default:
                break;
        }
    };

    handleChange = value => {
        this.setState({ selected: value });
        this.props.onChange(this.props.multiselect ? value : value[0]);
    };

    renderValues() {
        const { selected } = this.state;
        const displayValues = [];

        React.Children.forEach(this.props.children, c => {
            if (c.type === MenuItem) {
                const value = c.props.value;

                if (_.includes(selected, value)) {
                    const displayValue = c.props.primaryText;
                    displayValues.push(displayValue);
                }
            }
        });

        const lastChildIndex = displayValues.length - 1;
        return _.map(displayValues, (value, i) => (
            <span key={i}>
                {value}
                {i !== lastChildIndex && (', ')}
            </span>
        ));
    }

    render() {
        const { children, className, large, onBlur, onFocus, onClick, innerRef, shadowField, name, multiselect, ...other } = this.props;
        const { opened, selected } = this.state;

        const dropDownMenuProps = {
            className,
            innerRef: c => {
                this.dropDownMenu = c;
                innerRef(c);
            },
            large,
            onBlur,
            onClick: this.handleClick,
            onFocus,
            onKeyDown: this.handleKeyDown,
            tabIndex: 0,
        };

        const menuProps = {
            ...other,
            anchorOrigin: Origin.TopCenter,
            anchorElement: () => this.dropDownMenu,
            innerRef: c => (this.menuDomElement = c),
            multiselect,
            onChange: this.handleChange,
            onItemClick: this.handleItemClick,
            opened,
            selectable: true,
            targetOrigin: Origin.TopCenter,
        };

        return (
            <DropDownMenuElement {...dropDownMenuProps}>
                <DropDownMenuValueElement>
                    {this.renderValues()}
                </DropDownMenuValueElement>
                <DropDownMenuArrowElement />
                <Menu {...menuProps}>
                    {children}
                </Menu>
                {shadowField && <input type="hidden" name={name} value={multiselect ? selected : selected[0]} />}
            </DropDownMenuElement>
        );
    }
}

export default ClickAway(DropDownMenu);
