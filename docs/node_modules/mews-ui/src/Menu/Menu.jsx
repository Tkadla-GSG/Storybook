import React, { Component } from 'react';
import { PropTypes as pt } from 'prop-types';

import { noop } from '../utils/func';
import OpenableOverlay from '../OpenableOverlay/OpenableOverlay';
import Origin from '../OpenableOverlay/Origin';
import List from '../List/List';
import MenuItem from './MenuItem';

export default class Menu extends Component {
    static propTypes = {
        anchorOrigin: pt.instanceOf(Origin),
        targetOrigin: pt.instanceOf(Origin),
        children: pt.node,
        innerRef: pt.func,
        opened: pt.bool,
    };

    static defaultProps = {
        innerRef: noop,
    };

    state = {};

    componentWillReceiveProps(nextProps) {
        if (this.props.opened !== nextProps.opened && nextProps.opened) {
            // allow keyboard arrow navigation after open
            setTimeout(() => this.listDomElement.focus());
        }
    }

    render() {
        const { anchorOrigin, children, innerRef, targetOrigin, opened, ...other } = this.props;

        const overlayProps = {
            anchorOrigin,
            innerRef,
            opened,
            targetOrigin,
        };

        const listProps = {
            ...other,
            innerRef: c => (this.listDomElement = c),
            itemType: MenuItem,
            cyclicNavigation: true,
            navigable: true,
            searchable: true,
            tabIndex: -1,
        };

        return (
            <OpenableOverlay {...overlayProps}>
                <List {...listProps}>
                    {children}
                </List>
            </OpenableOverlay>
        );
    }
}
