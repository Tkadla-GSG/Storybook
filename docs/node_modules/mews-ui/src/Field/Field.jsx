import _ from 'lodash';
import React, { Component } from 'react';
import { PropTypes as pt } from 'prop-types';

import { noop } from '../utils/func';
import {
    InputWrapperElement,
    FieldElement,
    IconElement,
    LabelElement,
    LabelRequiredElement,
    ErrorElement,
    ContentWrapperElement,
} from './style';

export default function fieldFactory(WrappedComponent, { isFilled = props => props.value || props.defaultValue } = {}) {
    return class Field extends Component {
        static propTypes = {
            boxed: pt.bool,
            children: pt.node,
            disabled: pt.bool,
            error: pt.node,
            floating: pt.bool,
            icon: pt.string,
            label: pt.oneOfType([
                pt.string,
                pt.node,
            ]),
            large: pt.bool,
            name: pt.string,
            onBlur: pt.func,
            onChange: pt.func,
            onFocus: pt.func,
            required: pt.bool,
        };

        static defaultProps = {
            filled: null,
            floating: true,
            large: false,
            onBlur: noop,
            onChange: noop,
            onFocus: noop,
        };

        state = {
            filled: isFilled(this.props),
        };

        componentWillReceiveProps(nextProps) {
            if (nextProps.value !== this.state.value) {
                this.checkIsFilled(nextProps.value);
            }
        }

        handleFocus = e => {
            if (!this.state.focused) {
                this.setState({ focused: true });
                this.props.onFocus(e);
            }
        };

        handleBlur = e => {
            this.setState({ focused: false });
            this.props.onBlur(e);
        };

        handleChange = e => {
            const value = e.target ? e.target.value : e;
            this.checkIsFilled(value);
            this.props.onChange(value);
        };

        checkIsFilled(value) {
            const filled = (_.isString(value) && value.length > 0) || _.isNumber(value);

            this.setState({ filled });
        }

        render() {
            const { boxed, children, disabled, error, floating, icon, label, large, name, required, ...other } = this.props;
            const { filled, focused } = this.state;

            const fieldProps = {
                disabled,
                icon,
            };

            const iconProps = {
                filled,
                focused,
                value: icon,
            };

            const inputWrapperProps = {
                boxed,
                disabled,
                error,
                focused,
                icon,
                innerRef: c => (this.inputWrapperDomElement = c),
                large,
            };

            const labelProps = {
                boxed,
                error,
                floating,
                filled,
                focused,
                htmlFor: name,
                large,
            };

            const wrappedComponentProps = {
                ...other,
                boxed,
                disabled,
                large,
                name,
                onBlur: this.handleBlur,
                onFocus: this.handleFocus,
                onChange: this.handleChange,
                onHeightChange: this.handleHeightChange,
            };

            const errorProps = {
                boxed,
                icon,
            };

            return (
                <FieldElement {...fieldProps}>
                    <ContentWrapperElement>
                        {icon && (<IconElement {...iconProps} />)}
                        <InputWrapperElement {...inputWrapperProps}>
                            {label && (
                                <LabelElement {...labelProps}>
                                    {label}
                                    {required && <LabelRequiredElement focused={focused}>{' * '}</LabelRequiredElement>}
                                </LabelElement>
                            )}
                            <WrappedComponent {...wrappedComponentProps}>
                                {children}
                            </WrappedComponent>
                        </InputWrapperElement>
                    </ContentWrapperElement>
                    {error && (<ErrorElement {...errorProps}>{error}</ErrorElement>)}
                </FieldElement>
            );
        }
    };
}
