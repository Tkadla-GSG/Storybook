import _ from 'lodash';
import React, { Component } from 'react';
import { PropTypes as pt } from 'prop-types';
import { noop } from '../utils/func';
import { TimePickerElement } from './style';
import ScrollableSelector from './ScrollableSelector';

export const AM = 'am';
export const PM = 'pm';

const SEPARATOR = ':';

const padValue = value => _.padStart(value, 2, '0');
const replace12with0 = value => (value === 0 ? 12 : value);

const getValue = (decorate = v => v) => value => ({ value, text: decorate(value) });

const VALUES_12 = _.times(12, getValue(replace12with0)); // value => ({ value, text: `${value}` }));
const VALUES_12_PADDED = _.times(12, getValue(v => padValue(replace12with0(v)))); // value => ({ value, text: `${_.padStart(value, 2, '0')}` }));
const VALUES_24 = _.times(24, getValue()); // value => ({ value, text: `${value}` }));
const VALUES_24_PADDED = _.times(24, getValue(padValue)); // value => ({ value, text: `${_.padStart(value, 2, '0')}` }));
const VALUES_60 = _.times(60, getValue(padValue)); // value => ({ value, text: `${_.padStart(value, 2, '0')}` }));

export default class TimePicker extends Component {
    static propTypes = {
        onTimeChange: pt.func,
        time: pt.any,
        amLabel: pt.node,
        pmLabel: pt.node,
        hoursLabel: pt.node,
        minutesLabel: pt.node,
        getTimeService: pt.func.isRequired,
        showSeconds: pt.bool,
    };

    static defaultProps = {
        onTimeChange: noop,
    };

    constructor(props) {
        super(props);

        const has24HourFormat = props.getTimeService().has24HourFormat();
        const shouldPadHours = props.getTimeService().shouldPadHours();
        const time = props.time || props.getTimeService().getDefaultTime();
        const meridiem = props.getTimeService().getHours(time) > 11 ? PM : AM;

        this.state = { time, has24HourFormat, shouldPadHours, meridiem };
    }

    componentWillReceiveProps(nextProps) {
        if (nextProps.time && !this.props.getTimeService().isTimeEqual(nextProps.time, this.state.time)) {
            const meridiem = this.props.getTimeService().getHours(nextProps.time) > 11 ? PM : AM;
            this.setState({
                time: nextProps.time,
                meridiem,
            });
        }
    }

    handleHoursChange = hours => {
        const { getTimeService } = this.props;
        const { has24HourFormat, time, meridiem } = this.state;
        const realHours = hours + (!has24HourFormat && meridiem === PM ? 12 : 0);

        const currentHours = getTimeService().getHours(time);
        if (currentHours === hours) {
            return;
        }

        const diff = realHours - currentHours;
        const newTime = getTimeService().addHours(time, diff);
        this.setState({ time: newTime });

        this.props.onTimeChange(newTime);
    };

    handleMinutesChange = minutes => {
        const { getTimeService } = this.props;
        const { time } = this.state;

        const currentMinutes = getTimeService().getMinutes(time);
        if (currentMinutes === minutes) {
            return;
        }

        const diff = minutes - currentMinutes;
        const newTime = getTimeService().addMinutes(time, diff);
        this.setState({ time: newTime });

        this.props.onTimeChange(newTime);
    };

    handleSecondsChange = seconds => {
        const { getTimeService } = this.props;
        const { time } = this.state;

        const currentSeconds = getTimeService().getSeconds(time);
        if (currentSeconds === seconds) {
            return;
        }

        const diff = seconds - currentSeconds;
        const newTime = getTimeService().addSeconds(time, diff);
        this.setState({ time: newTime });

        this.props.onTimeChange(newTime);
    };

    handleMeridiemChange = meridiem => {
        const { getTimeService } = this.props;
        const { time } = this.state;

        const diff = meridiem === PM ? 12 : -12;
        const newTime = getTimeService().addHours(time, diff);

        this.setState({
            meridiem,
            time: newTime,
        });

        this.props.onTimeChange(newTime);
    };

    renderSecondsSelector() {
        const { getTimeService } = this.props;
        const { time } = this.state;

        const seconds = getTimeService().getSeconds(time);
        const props = {
            onChange: this.handleSecondsChange,
            values: VALUES_60,
            value: seconds,
        };

        return <ScrollableSelector {...props} />;
    }

    renderMeridiemSelector() {
        const { meridiem } = this.state;
        const [amLabel, pmLabel] = this.props.getTimeService().getMeridiemLabels();

        const props = {
            values: [
                { value: AM, text: amLabel },
                { value: PM, text: pmLabel },
            ],
            value: meridiem,
            onChange: this.handleMeridiemChange,
        };

        return <ScrollableSelector {...props} />;
    }

    render() {
        const { getTimeService, showSeconds } = this.props;
        const { has24HourFormat, shouldPadHours, time, meridiem } = this.state;

        const hours = getTimeService().getHours(time) - (!has24HourFormat && meridiem === PM ? 12 : 0);
        const minutes = getTimeService().getMinutes(time);

        let hourValues;
        if (has24HourFormat) {
            hourValues = shouldPadHours ? VALUES_24_PADDED : VALUES_24;
        } else {
            hourValues = shouldPadHours ? VALUES_12_PADDED : VALUES_12;
        }

        const hoursSelectorProps = {
            afterLabel: SEPARATOR,
            onChange: this.handleHoursChange,
            value: hours,
            values: hourValues,
        };

        const minutesSelectorProps = {
            afterLabel: showSeconds && SEPARATOR,
            onChange: this.handleMinutesChange,
            value: minutes,
            values: VALUES_60,
        };

        return (
            <TimePickerElement>
                <ScrollableSelector {...hoursSelectorProps} />
                <ScrollableSelector {...minutesSelectorProps} />
                {showSeconds && this.renderSecondsSelector()}
                {!has24HourFormat && this.renderMeridiemSelector()}
            </TimePickerElement>
        );
    }
}

