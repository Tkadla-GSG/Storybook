import React, { PropTypes as pt } from 'react';
import timePickerFactory from './TimePicker';
import OpenableOverlay from '../OpenableOverlay/OpenableOverlay';
import Origin from '../OpenableOverlay/Origin';
import { noop } from '../utils/func';

const overlayTimePickerFactory = ({ getTimeService, getDateService, getLocalization }) => {
    const TimePicker = timePickerFactory({ getTimeService, getDateService, getLocalization });

    return class OverlayTimePicker extends React.Component {
        static propTypes = {
            anchorOrigin: pt.object,
            targetOrigin: pt.object,
            clickAway: pt.element,
            onTimeChange: pt.func,
        };

        static defaultProps = {
            anchorOrigin: Origin.BottomCenter,
            targetOrigin: Origin.TopCenter,
            onTimeChange: noop,
        };

        open = anchorElement => {
            this.overlay.open(anchorElement);
        };

        close = ({ keepFocus = true } = {}) => {
            this.overlay.close({ keepFocus });
        };

        getTimePicker() {
            return this.timePicker;
        }

        render() {
            const { anchorOrigin, targetOrigin, clickAway, onClose, onOpen, ...other } = this.props;

            const overlayProps = {
                anchorOrigin,
                targetOrigin,
                clickAway,
                onClose,
                onOpen,
                ref: c => (this.overlay = c),
            };

            const timePickerProps = {
                ...other,
                ref: c => (this.timePicker = c),
                onTimeChange: this.props.onTimeChange,
            };

            return (
                <OpenableOverlay data-ref="time-picker-overlay" {...overlayProps}>
                    <TimePicker {...timePickerProps} />
                </OpenableOverlay>
            );
        }
    };
};

export default overlayTimePickerFactory;
