import _ from 'lodash';
import React, { Component } from 'react';
import { PropTypes as pt } from 'prop-types';
import { noop } from '../utils/func';
import { ScrollableSelectorElement, ScrollContainerElement, ScrollItemElement, ScrollItemHighlightElement, ITEM_HEIGHT } from './style';

const TOUCH_DISTANCE_SCALE = 10;

export default class ScrollableSelector extends Component {
    static propTypes = {
        afterLabel: pt.node,
        onChange: pt.func,
        value: pt.oneOfType([pt.number, pt.string]),
        values: pt.array,
    };

    static defaultProps = {
        onChange: noop,
    };

    handleWheel = e => {
        const { values } = this.props;
        const currentIndex = this.getIndexOfValue();

        const newIndex = currentIndex + (e.deltaY > 0 ? 1 : -1);
        const newValue = values[newIndex];
        if (!_.isUndefined(newValue)) {
            e.preventDefault();
            this.props.onChange(newValue.value);
        }
    };

    handleItemClick = value => {
        if (this.props.value !== value) {
            this.props.onChange(value);
        }
    };

    handleTouchStart = e => {
        this.touchStartY = e.targetTouches[0].pageY;

        this.setValueFromEvent(e);
        document.body.addEventListener('touchmove', this.handleTouchMove);
        document.body.addEventListener('touchend', this.handleTouchEnd);
    };

    handleTouchMove = e => {
        e.preventDefault();
        this.setValueFromEvent(e);
    };

    handleTouchEnd = () => {
        document.body.removeEventListener('touchmove', this.handleTouchMove);
        document.body.removeEventListener('touchend', this.handleTouchEnd);
    };

    setValueFromEvent(e) {
        const { value, values } = this.props;
        const pageY = e.targetTouches[0].pageY;

        const diff = this.touchStartY - pageY;
        const valueChange = Math.abs(diff) > TOUCH_DISTANCE_SCALE ? Math.sign(diff) * 1 : 0;

        const currentValueIndex = this.getIndexOfValue();
        const newValue = values[currentValueIndex + valueChange];

        if (!_.isUndefined(newValue) && newValue.value !== value) {
            this.touchStartY = pageY;
            this.props.onChange(newValue.value);
        }
    }

    getIndexOfValue() {
        const { value, values } = this.props;
        return _.findIndex(values, v => v.value === value);
    }

    render() {
        const { value, afterLabel } = this.props;
        const valueIndex = this.getIndexOfValue();

        const scrollContainerProps = {
            style: {
                transform: `translateY(-${valueIndex * ITEM_HEIGHT}px)`,
            },
        };

        return (
            <ScrollableSelectorElement onWheel={this.handleWheel} onTouchStart={this.handleTouchStart}>
                <ScrollItemHighlightElement>{afterLabel}</ScrollItemHighlightElement>
                <ScrollContainerElement {...scrollContainerProps}>
                    {_.map(this.props.values, (v, index) => (
                        <ScrollItemElement key={index} value={v.value} selected={value === v.value} onItemClick={this.handleItemClick}>{v.text}</ScrollItemElement>
                    ))}
                </ScrollContainerElement>
            </ScrollableSelectorElement>
        );
    }
}
