import _ from 'lodash';
import React, { Component } from 'react';
import { PropTypes as pt } from 'prop-types';
import { isTargetDescendant } from '../utils/events';
import { noop } from '../utils/func';

export default function ClickAway(WrappedComponent) {
    return class extends Component {
        static propTypes = {
            innerRef: pt.func,
            componentRef: pt.func,
        };

        static defaultProps = {
            innerRef: noop,
            componentRef: noop,
        };

        componentWillUnmount() {
            if (this.listeningElement) {
                this.deregisterClickAway();
            }
        }

        registerClickAway = (element = document) => {
            this.listeningElement = element;
            this.listeningElement.addEventListener('click', this.handleClickAway);
        };

        deregisterClickAway = () => {
            this.listeningElement.removeEventListener('click', this.handleClickAway);
        };

        handleClickAway = e => {
            if (this.component && !isTargetDescendant(e, this.componentElement) && _.isFunction(this.component.handleClickAway)) {
                this.component.handleClickAway(e);
            }
        };

        render() {
            const { innerRef, componentRef, ...other } = this.props;
            const componentProps = {
                ...other,
                deregisterClickAway: this.deregisterClickAway,
                registerClickAway: this.registerClickAway,
                innerRef: c => {
                    this.componentElement = c;
                    innerRef(c);
                },
                ref: c => {
                    this.component = c;
                    componentRef(c);
                },
            };

            return (
                <WrappedComponent {...componentProps} />
            );
        }
    };
}
