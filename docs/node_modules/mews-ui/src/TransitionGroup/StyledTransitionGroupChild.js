import React, { Component } from 'react';
import { PropTypes as pt } from 'prop-types';
import ReactDOM from 'react-dom';

const TICK = 17;

export default class StyledTransitionGroupChild extends Component {
    static propTypes = {
        children: pt.node,
        childrenProps: pt.object,
        transitionAppear: pt.bool,
        transitionEnter: pt.bool,
        transitionLeave: pt.bool,
    };

    state = {
        enter: false,
        enterActive: false,
        leave: false,
        leaveActive: false,
        appear: false,
        appearActive: false,
    };

    componentWillUnmount() {
        if (this.transitionEndListener) {
            const node = ReactDOM.findDOMNode(this);
            node.removeEventListener('transitionend', this.transitionEndListener);
            this.transitionEndListener = null;
        }

        if (this.transitionTimeout) {
            clearTimeout(this.transitionTimeout);
        }
    }

    componentWillAppear(done) {
        if (this.props.transitionAppear) {
            this.transition('appear', done);
        } else {
            done();
        }
    }

    componentWillEnter(done) {
        if (this.props.transitionEnter) {
            this.transition('enter', done);
        } else {
            done();
        }
    }

    componentWillLeave(done) {
        if (this.props.transitionLeave) {
            this.transition('leave', done);
        } else {
            done();
        }
    }

    transition(transitionName, finishCallback) {
        this.setState({ [transitionName]: true });

        const activeTransitionName = `${transitionName}Active`;
        this.transitionTimeout = setTimeout(() => {
            this.setState({ [activeTransitionName]: true });
        }, TICK);

        const node = ReactDOM.findDOMNode(this);
        this.transitionEndListener = e => {
            if (e && e.target !== node) {
                return;
            }

            node.removeEventListener('transitionend', this.transitionEndListener);
            this.transitionEndListener = null;

            if (finishCallback) {
                finishCallback();
            }
        };

        node.addEventListener('transitionend', this.transitionEndListener);
    }

    render() {
        const { childrenProps } = this.props;

        return React.cloneElement(this.props.children, {
            ...this.state,
            ...childrenProps,
        });
    }
}
