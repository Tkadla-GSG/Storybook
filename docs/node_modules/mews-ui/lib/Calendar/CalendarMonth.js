var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import _ from 'lodash';
import React, { PureComponent } from 'react';
import { PropTypes as pt } from 'prop-types';

import CalendarDay from './CalendarDay';
import { MonthElement, MonthNameElement, WeekElement } from './style';

var Month = function (_PureComponent) {
    _inherits(Month, _PureComponent);

    function Month(props) {
        _classCallCheck(this, Month);

        var _this = _possibleConstructorReturn(this, (Month.__proto__ || Object.getPrototypeOf(Month)).call(this, props));

        var month = props.month,
            getCalendarService = props.getCalendarService;


        _this.state = {
            weeks: getCalendarService().getWeeksOfMonth(month)
        };
        return _this;
    }

    _createClass(Month, [{
        key: 'render',
        value: function render() {
            var _props = this.props,
                month = _props.month,
                getCalendarService = _props.getCalendarService,
                other = _objectWithoutProperties(_props, ['month', 'getCalendarService']);

            var weeks = this.state.weeks;


            var monthName = getCalendarService().getMonthName(month);

            return React.createElement(
                MonthElement,
                null,
                React.createElement(
                    MonthNameElement,
                    null,
                    monthName
                ),
                _.map(weeks, function (week, i) {
                    return React.createElement(
                        WeekElement,
                        { key: i },
                        _.map(week, function (day, j) {
                            return React.createElement(CalendarDay, _extends({
                                key: j,
                                day: day,
                                getCalendarService: getCalendarService
                            }, other));
                        })
                    );
                })
            );
        }
    }]);

    return Month;
}(PureComponent);

Month.propTypes = {
    month: pt.any.isRequired, // eslint-disable-line react/forbid-prop-types
    getCalendarService: pt.func.isRequired
};
Month.defaultProps = {};
export default Month;