var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import _ from 'lodash';
import React, { Component } from 'react';
import { PropTypes as pt } from 'prop-types';
import { noop } from '../utils/func';
import { CalendarMonthSelectorElement, ScrollContainerElement, SelectableMonthElement } from './style';

var LOAD_THRESHOLD = 50;
var LOAD_AMOUNT = 10;

var CalendarMonthSelector = function (_Component) {
    _inherits(CalendarMonthSelector, _Component);

    function CalendarMonthSelector(props) {
        _classCallCheck(this, CalendarMonthSelector);

        var _this = _possibleConstructorReturn(this, (CalendarMonthSelector.__proto__ || Object.getPrototypeOf(CalendarMonthSelector)).call(this, props));

        _initialiseProps.call(_this);

        var month = props.month;

        var prevMonths = _this.getPreviousMonths(month);
        var nextMonths = _this.getNextMonths(month);

        _this.state = {
            months: [].concat(_toConsumableArray(prevMonths), [month], _toConsumableArray(nextMonths))
        };

        _this.monthElements = {};
        return _this;
    }

    _createClass(CalendarMonthSelector, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            var _this2 = this;

            /* This doesnt work with angular, it's hardcoded until we get rid of it in commander
            // hide scrollbar in scroll container
            const width = this.scrollElement.scrollWidth;
            this.monthSelectorElement.style.width = `${width}px`;
            */

            if (this.props.month) {
                setTimeout(function () {
                    return _this2.scrollToMonth(_this2.props.month);
                }, 100);
            }
        }
    }, {
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
            var month = nextProps.month,
                getCalendarService = nextProps.getCalendarService;


            if (month && !getCalendarService().isMonthEqual(month, this.props.month)) {
                this.scrollToMonth(month);
            }
        }
    }, {
        key: 'scrollToMonth',
        value: function scrollToMonth(month) {
            var _this3 = this;

            var monthName = this.props.getCalendarService().getMonthName(month);
            var monthElement = this.monthElements[monthName];
            if (monthElement) {
                this.scrollElement.removeEventListener('scroll', this.handleScroll);
                smoothScroll(monthElement, this.scrollElement, function () {
                    _this3.scrollElement.addEventListener('scroll', _this3.handleScroll);

                    // handle possible scroll to the edge
                    _this3.handleScroll();
                });
            }
        }
    }, {
        key: 'addMonthsToTop',
        value: function addMonthsToTop() {
            var months = this.state.months;


            var firstMonth = months[0];
            var prevMonths = this.getPreviousMonths(firstMonth);

            this.setState({ months: [].concat(_toConsumableArray(prevMonths), _toConsumableArray(months)) });
        }
    }, {
        key: 'addMonthsToBottom',
        value: function addMonthsToBottom() {
            var months = this.state.months;


            var lastMonth = months[months.length - 1];
            var nextMonths = this.getNextMonths(lastMonth);

            this.setState({ months: [].concat(_toConsumableArray(months), _toConsumableArray(nextMonths)) });
        }
    }, {
        key: 'getPreviousMonths',
        value: function getPreviousMonths(month) {
            var getCalendarService = this.props.getCalendarService;

            var months = [];
            for (var i = LOAD_AMOUNT; i !== 0; --i) {
                months.push(getCalendarService().addMonths(month, -i));
            }

            return months;
        }
    }, {
        key: 'getNextMonths',
        value: function getNextMonths(month) {
            var getCalendarService = this.props.getCalendarService;

            var months = [];
            for (var i = 1; i !== LOAD_AMOUNT; ++i) {
                months.push(getCalendarService().addMonths(month, i));
            }

            return months;
        }
    }, {
        key: 'render',
        value: function render() {
            var _this4 = this;

            var _props = this.props,
                month = _props.month,
                getCalendarService = _props.getCalendarService;
            var months = this.state.months;


            return React.createElement(
                CalendarMonthSelectorElement,
                { innerRef: function innerRef(c) {
                        return _this4.monthSelectorElement = c;
                    } },
                React.createElement(
                    ScrollContainerElement,
                    { innerRef: function innerRef(c) {
                            return _this4.scrollElement = c;
                        } },
                    months.map(function (m) {
                        var monthName = getCalendarService().getMonthName(m);
                        var selected = getCalendarService().isMonthEqual(m, month);

                        return React.createElement(
                            SelectableMonthElement,
                            {
                                key: monthName,
                                innerRef: function innerRef(c) {
                                    return _this4.monthElements[monthName] = c;
                                },
                                selected: selected,
                                month: m,
                                onMonthClick: _this4.handleMonthClick
                            },
                            monthName
                        );
                    })
                )
            );
        }
    }]);

    return CalendarMonthSelector;
}(Component);

CalendarMonthSelector.propTypes = {
    getCalendarService: pt.func.isRequired,
    month: pt.any,
    onChange: pt.func
};
CalendarMonthSelector.defaultProps = {
    onChange: noop
};

var _initialiseProps = function _initialiseProps() {
    var _this5 = this;

    this.handleScroll = function () {
        var scrollTop = _this5.scrollElement.scrollTop;


        if (scrollTop < LOAD_THRESHOLD) {
            _this5.addMonthsToTop();
        } else if (_this5.scrollElement.scrollHeight - scrollTop - _this5.scrollElement.offsetHeight < LOAD_THRESHOLD) {
            _this5.addMonthsToBottom();
        }
    };

    this.handleMonthClick = function (month) {
        if (!_this5.props.getCalendarService().isMonthEqual(month, _this5.props.month)) {
            _this5.props.onChange(month);
        }
    };
};

export default CalendarMonthSelector;


var SCROLL_SPEED = 500;
// acceleration until halfway, then deceleration
var SCROLL_EASING = function SCROLL_EASING(time) {
    return time < 0.5 ? 4 * Math.pow(time, 3) : (time - 1) * (2 * time - 2) * (2 * time - 2) + 1;
};

function smoothScroll(target, scrollContainer) {
    var callback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function () {};

    var startLocation = scrollContainer.scrollTop;
    var endLocation = target.offsetTop - scrollContainer.offsetHeight / 2;
    var distance = Math.abs(endLocation - startLocation);
    var distanceMagnitude = startLocation <= endLocation ? 1 : -1;

    var start = Date.now();
    var stepFunc = function stepFunc() {
        var timeLapsed = Date.now() - start;
        var percentage = Math.min(timeLapsed / SCROLL_SPEED, 1);

        var scrolledDistance = distance * SCROLL_EASING(percentage) * distanceMagnitude;
        var position = startLocation + scrolledDistance;

        scrollContainer.scrollTop = position;
        if (position === endLocation) {
            return callback();
        }

        window.requestAnimationFrame(stepFunc);
    };

    window.requestAnimationFrame(stepFunc);
}