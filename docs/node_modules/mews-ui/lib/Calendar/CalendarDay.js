var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import _ from 'lodash';
import React, { Component } from 'react';
import { PropTypes as pt } from 'prop-types';
import { noop } from '../utils/func';
import { CalendarDayElement, DayButtonElement } from './style';

var CalendarDay = function (_Component) {
    _inherits(CalendarDay, _Component);

    function CalendarDay() {
        var _ref;

        var _temp, _this, _ret;

        _classCallCheck(this, CalendarDay);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = CalendarDay.__proto__ || Object.getPrototypeOf(CalendarDay)).call.apply(_ref, [this].concat(args))), _this), _this.handleClick = function () {
            _this.props.onDateClick(_this.props.day);
        }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(CalendarDay, [{
        key: 'render',
        value: function render() {
            var dayButton = void 0;
            if (this.props.day) {
                var _props = this.props,
                    day = _props.day,
                    getCalendarService = _props.getCalendarService,
                    modifiers = _props.modifiers,
                    other = _objectWithoutProperties(_props, ['day', 'getCalendarService', 'modifiers']);

                var appliedModifiers = _.mapValues(modifiers, function (predicate) {
                    return predicate(day);
                });

                var buttonProps = _extends({}, other, appliedModifiers, {
                    onClick: this.handleClick,
                    tabIndex: undefined
                });

                dayButton = React.createElement(
                    DayButtonElement,
                    buttonProps,
                    getCalendarService().getDateNumber(day)
                );
            }

            return React.createElement(
                CalendarDayElement,
                null,
                dayButton
            );
        }
    }]);

    return CalendarDay;
}(Component);

CalendarDay.propTypes = {
    day: pt.any, // eslint-disable-line react/forbid-prop-types
    getCalendarService: pt.func.isRequired,
    modifiers: pt.objectOf(pt.func),
    onDateClick: pt.func
};
CalendarDay.defaultProps = {
    onDateClick: noop
};
export default CalendarDay;