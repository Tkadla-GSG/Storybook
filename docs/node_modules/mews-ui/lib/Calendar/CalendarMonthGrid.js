var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import _ from 'lodash';
import React, { Component } from 'react';
import { PropTypes as pt } from 'prop-types';
import { noop } from '../utils/func';
import CalendarMonth from './CalendarMonth';
import { MONTH_WIDTH, MonthGridElement } from './style';

var PREV_TRANSITION = 'prev';
var NEXT_TRANSITION = 'next';

var CalendarMonthGrid = function (_Component) {
    _inherits(CalendarMonthGrid, _Component);

    function CalendarMonthGrid() {
        var _ref;

        var _temp, _this, _ret;

        _classCallCheck(this, CalendarMonthGrid);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = CalendarMonthGrid.__proto__ || Object.getPrototypeOf(CalendarMonthGrid)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
            months: _.times(_this.props.numberOfMonths, function (i) {
                return _this.props.getCalendarService().addMonths(_this.props.month, i);
            }),
            monthTransition: null
        }, _this.handleMonthTransitionEnd = function () {
            var _this$state = _this.state,
                months = _this$state.months,
                monthTransition = _this$state.monthTransition,
                newMonthsCount = _this$state.newMonthsCount;


            var newMonths = [].concat(_toConsumableArray(months));

            if (monthTransition === NEXT_TRANSITION) {
                newMonths = newMonths.slice(newMonthsCount);
            } else if (monthTransition === PREV_TRANSITION) {
                newMonths = newMonths.slice(0, months.length - newMonthsCount);
            }

            _this.setState({
                months: newMonths,
                monthTransition: null,
                newMonthsCount: null
            }, function () {
                return _this.props.onMonthTransitionEnd();
            });
        }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(CalendarMonthGrid, [{
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
            var _this2 = this;

            var _props = this.props,
                month = _props.month,
                numberOfMonths = _props.numberOfMonths,
                getCalendarService = _props.getCalendarService;
            var nextMonth = nextProps.month;
            var months = this.state.months;


            var hasMonthChanged = !getCalendarService().isMonthEqual(month, nextMonth);

            if (this.state.monthTransition !== null) {
                return;
            }

            // check month change
            if (hasMonthChanged) {
                var newMonths = [].concat(_toConsumableArray(months));

                // sliding to right
                if (getCalendarService().isMonthGreater(nextMonth, month)) {
                    // compute number of months to be slided in
                    var newMonthsCount = Math.min(getCalendarService().diffMonths(nextMonth, month), numberOfMonths);

                    var initialNewMonth = newMonthsCount >= numberOfMonths ? nextMonth : getCalendarService().addMonths(_.last(months), 1);

                    for (var i = 0; i !== newMonthsCount; ++i) {
                        newMonths.push(getCalendarService().addMonths(initialNewMonth, i));
                    }

                    this.setState({
                        months: newMonths,
                        monthTransition: NEXT_TRANSITION,
                        newMonthsCount: newMonthsCount
                    });
                } else {
                    // compute number of months to be slided in
                    var _newMonthsCount = Math.min(getCalendarService().diffMonths(month, nextMonth), numberOfMonths);

                    var _initialNewMonth = _newMonthsCount >= numberOfMonths ? nextMonth : getCalendarService().subtractMonths(_.first(months), 1);

                    for (var _i = _newMonthsCount - 1; _i >= 0; --_i) {
                        newMonths.unshift(getCalendarService().addMonths(_initialNewMonth, _i));
                    }

                    // First prepare new months on the left side, translating the grid container
                    var transform = 'translateX(-' + _newMonthsCount * MONTH_WIDTH + 'px)';
                    this.monthGridElement.style.transform = transform;

                    this.setState({
                        months: newMonths,
                        newMonthsCount: _newMonthsCount
                    }, function () {
                        setTimeout(function () {
                            _this2.setState({
                                monthTransition: PREV_TRANSITION
                            });
                        });
                    });
                }
            }
        }
    }, {
        key: 'render',
        value: function render() {
            var _this3 = this;

            var _props2 = this.props,
                _innerRef = _props2.innerRef,
                getCalendarService = _props2.getCalendarService,
                other = _objectWithoutProperties(_props2, ['innerRef', 'getCalendarService']);

            var _state = this.state,
                months = _state.months,
                monthTransition = _state.monthTransition,
                newMonthsCount = _state.newMonthsCount;


            var transform = void 0;
            if (monthTransition === PREV_TRANSITION) {
                transform = 'translateX(0)';
            } else if (monthTransition === NEXT_TRANSITION) {
                transform = 'translateX(-' + newMonthsCount * MONTH_WIDTH + 'px)';
            }

            var finalStyle = {
                transform: transform,
                width: months.length * MONTH_WIDTH + 'px'
            };

            var monthGridProps = {
                innerRef: function innerRef(c) {
                    _this3.monthGridElement = c;
                    _innerRef(c);
                },
                animating: monthTransition !== null,
                style: finalStyle,
                onTransitionEnd: this.handleMonthTransitionEnd
            };

            return React.createElement(
                MonthGridElement,
                monthGridProps,
                _.map(months, function (m) {
                    var monthName = getCalendarService().getMonthName(m);

                    return React.createElement(CalendarMonth, _extends({}, other, {
                        key: monthName,
                        month: m,
                        getCalendarService: getCalendarService
                    }));
                })
            );
        }
    }]);

    return CalendarMonthGrid;
}(Component);

CalendarMonthGrid.propTypes = {
    innerRef: pt.func,
    month: pt.any.isRequired, // eslint-disable-line react/forbid-prop-types
    numberOfMonths: pt.number,
    onMonthTransitionEnd: pt.func,
    getCalendarService: pt.func.isRequired
};
CalendarMonthGrid.defaultProps = {
    innerRef: noop,
    month: null,
    numberOfMonths: 1,
    onMonthTransitionEnd: noop
};
export default CalendarMonthGrid;