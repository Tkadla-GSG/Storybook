var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import { PropTypes as pt } from 'prop-types';
import ReactDOM from 'react-dom';

var TICK = 17;

var StyledTransitionGroupChild = function (_Component) {
    _inherits(StyledTransitionGroupChild, _Component);

    function StyledTransitionGroupChild() {
        var _ref;

        var _temp, _this, _ret;

        _classCallCheck(this, StyledTransitionGroupChild);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = StyledTransitionGroupChild.__proto__ || Object.getPrototypeOf(StyledTransitionGroupChild)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
            enter: false,
            enterActive: false,
            leave: false,
            leaveActive: false,
            appear: false,
            appearActive: false
        }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(StyledTransitionGroupChild, [{
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            if (this.transitionEndListener) {
                var node = ReactDOM.findDOMNode(this);
                node.removeEventListener('transitionend', this.transitionEndListener);
                this.transitionEndListener = null;
            }

            if (this.transitionTimeout) {
                clearTimeout(this.transitionTimeout);
            }
        }
    }, {
        key: 'componentWillAppear',
        value: function componentWillAppear(done) {
            if (this.props.transitionAppear) {
                this.transition('appear', done);
            } else {
                done();
            }
        }
    }, {
        key: 'componentWillEnter',
        value: function componentWillEnter(done) {
            if (this.props.transitionEnter) {
                this.transition('enter', done);
            } else {
                done();
            }
        }
    }, {
        key: 'componentWillLeave',
        value: function componentWillLeave(done) {
            if (this.props.transitionLeave) {
                this.transition('leave', done);
            } else {
                done();
            }
        }
    }, {
        key: 'transition',
        value: function transition(transitionName, finishCallback) {
            var _this2 = this;

            this.setState(_defineProperty({}, transitionName, true));

            var activeTransitionName = transitionName + 'Active';
            this.transitionTimeout = setTimeout(function () {
                _this2.setState(_defineProperty({}, activeTransitionName, true));
            }, TICK);

            var node = ReactDOM.findDOMNode(this);
            this.transitionEndListener = function (e) {
                if (e && e.target !== node) {
                    return;
                }

                node.removeEventListener('transitionend', _this2.transitionEndListener);
                _this2.transitionEndListener = null;

                if (finishCallback) {
                    finishCallback();
                }
            };

            node.addEventListener('transitionend', this.transitionEndListener);
        }
    }, {
        key: 'render',
        value: function render() {
            var childrenProps = this.props.childrenProps;


            return React.cloneElement(this.props.children, _extends({}, this.state, childrenProps));
        }
    }]);

    return StyledTransitionGroupChild;
}(Component);

StyledTransitionGroupChild.propTypes = {
    children: pt.node,
    childrenProps: pt.object,
    transitionAppear: pt.bool,
    transitionEnter: pt.bool,
    transitionLeave: pt.bool
};
export default StyledTransitionGroupChild;