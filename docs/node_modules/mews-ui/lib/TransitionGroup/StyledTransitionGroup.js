var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import { PropTypes as pt } from 'prop-types';
import ReactDOM from 'react-dom';
import { TransitionGroup } from 'react-transition-group';
import StyledTransitionGroupChild from './StyledTransitionGroupChild';

var StyledTransitionGroup = function (_Component) {
    _inherits(StyledTransitionGroup, _Component);

    function StyledTransitionGroup() {
        var _ref;

        var _temp, _this, _ret;

        _classCallCheck(this, StyledTransitionGroup);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = StyledTransitionGroup.__proto__ || Object.getPrototypeOf(StyledTransitionGroup)).call.apply(_ref, [this].concat(args))), _this), _this.wrapChild = function (child) {
            var _this$props = _this.props,
                childrenProps = _this$props.childrenProps,
                transitionAppear = _this$props.transitionAppear,
                transitionEnter = _this$props.transitionEnter,
                transitionLeave = _this$props.transitionLeave;

            var props = {
                children: child,
                childrenProps: childrenProps,
                transitionAppear: transitionAppear,
                transitionEnter: transitionEnter,
                transitionLeave: transitionLeave
            };

            return React.createElement(StyledTransitionGroupChild, props);
        }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(StyledTransitionGroup, [{
        key: 'getDomElement',
        value: function getDomElement() {
            return ReactDOM.findDOMNode(this);
        }
    }, {
        key: 'render',
        value: function render() {
            var props = _extends({}, this.props, {
                childFactory: this.wrapChild
            });

            delete props.innerRef;
            delete props.childrenProps;

            return React.createElement(
                TransitionGroup,
                props,
                this.props.children
            );
        }
    }]);

    return StyledTransitionGroup;
}(Component);

StyledTransitionGroup.propTypes = {
    children: pt.node,
    childrenProps: pt.object, // eslint-disable-line react/forbid-prop-types
    transitionAppear: pt.bool,
    transitionEnter: pt.bool,
    transitionLeave: pt.bool
};
StyledTransitionGroup.defaultProps = {
    transitionAppear: false,
    transitionEnter: true,
    transitionLeave: true
};
export default StyledTransitionGroup;