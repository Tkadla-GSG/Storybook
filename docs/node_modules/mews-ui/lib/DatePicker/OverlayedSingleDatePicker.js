var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import { PropTypes as pt } from 'prop-types';
import OpenableOverlay from '../OpenableOverlay/OpenableOverlay';
import Origin from '../OpenableOverlay/Origin';
import SingleDatePicker from './SingleDatePicker';

var OverlayedSingleDatePicker = function (_Component) {
    _inherits(OverlayedSingleDatePicker, _Component);

    function OverlayedSingleDatePicker() {
        _classCallCheck(this, OverlayedSingleDatePicker);

        return _possibleConstructorReturn(this, (OverlayedSingleDatePicker.__proto__ || Object.getPrototypeOf(OverlayedSingleDatePicker)).apply(this, arguments));
    }

    _createClass(OverlayedSingleDatePicker, [{
        key: 'getCalendar',
        value: function getCalendar() {
            return this.calendarComponent;
        }
    }, {
        key: 'render',
        value: function render() {
            var _this2 = this;

            var _props = this.props,
                anchorElement = _props.anchorElement,
                anchorOrigin = _props.anchorOrigin,
                targetOrigin = _props.targetOrigin,
                opened = _props.opened,
                onKeyDown = _props.onKeyDown,
                other = _objectWithoutProperties(_props, ['anchorElement', 'anchorOrigin', 'targetOrigin', 'opened', 'onKeyDown']);

            var overlayProps = {
                anchorElement: anchorElement,
                anchorOrigin: anchorOrigin,
                opened: opened,
                onKeyDown: onKeyDown,
                targetOrigin: targetOrigin
            };

            var calendarProps = _extends({}, other, {
                ref: function ref(c) {
                    return _this2.calendarComponent = c;
                }
            });

            return React.createElement(
                OpenableOverlay,
                overlayProps,
                React.createElement(SingleDatePicker, calendarProps)
            );
        }
    }]);

    return OverlayedSingleDatePicker;
}(Component);

OverlayedSingleDatePicker.propTypes = {
    anchorElement: pt.oneOfType([pt.node, pt.func]),
    anchorOrigin: pt.instanceOf(Origin),
    targetOrigin: pt.instanceOf(Origin),
    onKeyDown: pt.func,
    opened: pt.bool
};
OverlayedSingleDatePicker.defaultProps = {
    anchorOrigin: Origin.BottomCenter,
    targetOrigin: Origin.TopCenter
};
export default OverlayedSingleDatePicker;