var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import _ from 'lodash';
import React, { Component } from 'react';
import { PropTypes as pt } from 'prop-types';
import { noop } from '../utils/func';
import Calendar from '../Calendar/Calendar';

var START_DATE = 'start';
var END_DATE = 'end';

var RangeDatePicker = function (_Component) {
    _inherits(RangeDatePicker, _Component);

    function RangeDatePicker(props) {
        _classCallCheck(this, RangeDatePicker);

        var _this = _possibleConstructorReturn(this, (RangeDatePicker.__proto__ || Object.getPrototypeOf(RangeDatePicker)).call(this, props));

        _initialiseProps.call(_this);

        var startDate = props.startDate,
            endDate = props.endDate;


        _this.state = {
            startDate: startDate,
            endDate: endDate,
            selecting: START_DATE
        };

        _this.modifiers = {
            startDate: _this.isStartDate,
            endDate: _this.isEndDate,
            inBetweenDate: _this.isInBetweenDate
        };
        return _this;
    }

    _createClass(RangeDatePicker, [{
        key: 'render',
        value: function render() {
            var _props = this.props,
                modifiers = _props.modifiers,
                other = _objectWithoutProperties(_props, ['modifiers']);

            var calendarProps = _extends({}, other, {
                modifiers: _extends({}, modifiers, this.modifiers),
                onDateClick: this.handleDateClick,
                rangePicker: true
            });

            return React.createElement(Calendar, calendarProps);
        }
    }]);

    return RangeDatePicker;
}(Component);

RangeDatePicker.propTypes = {
    allowOneDateRange: pt.bool,
    startDate: pt.any, // eslint-disable-line react/forbid-prop-types
    endDate: pt.any, // eslint-disable-line react/forbid-prop-types
    getCalendarService: pt.func,
    modifiers: pt.objectOf(pt.func),
    onDateClick: pt.func,
    onRangeChange: pt.func
};
RangeDatePicker.defaultProps = {
    onDateClick: noop,
    onRangeChange: noop
};

var _initialiseProps = function _initialiseProps() {
    var _this2 = this;

    this.handleDateClick = function (date) {
        var getCalendarService = _this2.props.getCalendarService;
        var selecting = _this2.state.selecting;


        if (selecting === START_DATE) {
            _this2.setState({
                startDate: date,
                endDate: null,
                selecting: END_DATE
            });
        } else {
            var _getCalendarService$g = getCalendarService().getOrderedRange(date, _this2.state.startDate),
                _getCalendarService$g2 = _slicedToArray(_getCalendarService$g, 2),
                startDate = _getCalendarService$g2[0],
                endDate = _getCalendarService$g2[1];

            if (!_this2.props.allowOneDateRange && getCalendarService().isDateEqual(startDate, endDate)) {
                return;
            }

            _this2.setState({
                startDate: startDate,
                endDate: endDate,
                selecting: START_DATE
            });

            _this2.props.onRangeChange(startDate, endDate);
        }

        _this2.props.onDateClick(date);
    };

    this.isStartDate = function (date) {
        var startDate = _this2.state.startDate;

        return !_.isNil(startDate) && _this2.props.getCalendarService().isDateEqual(date, startDate);
    };

    this.isEndDate = function (date) {
        var endDate = _this2.state.endDate;

        return !_.isNil(endDate) && _this2.props.getCalendarService().isDateEqual(date, endDate);
    };

    this.isInBetweenDate = function (date) {
        var _state = _this2.state,
            startDate = _state.startDate,
            endDate = _state.endDate;

        return !_.isNil(startDate) && !_.isNil(endDate) && _this2.props.getCalendarService().isDateBetween(date, startDate, endDate);
    };
};

export default RangeDatePicker;