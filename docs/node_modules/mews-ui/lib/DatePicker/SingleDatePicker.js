var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import { PropTypes as pt } from 'prop-types';
import { KeyCode } from 'mews-js';
import { noop } from '../utils/func';
import Calendar from '../Calendar/Calendar';

var SingleDatePicker = function (_Component) {
    _inherits(SingleDatePicker, _Component);

    function SingleDatePicker(props) {
        _classCallCheck(this, SingleDatePicker);

        var _this = _possibleConstructorReturn(this, (SingleDatePicker.__proto__ || Object.getPrototypeOf(SingleDatePicker)).call(this, props));

        _initialiseProps.call(_this);

        var date = props.date,
            getCalendarService = props.getCalendarService;


        _this.state = {
            selectedDate: date || getCalendarService().getCurrentDate()
        };

        _this.modifiers = {
            selected: _this.isSelected
        };
        return _this;
    }

    _createClass(SingleDatePicker, [{
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
            if (nextProps.date && !this.props.getCalendarService().isDateEqual(nextProps.date, this.state.selectedDate)) {
                this.setState({
                    selectedDate: nextProps.date
                });
            }
        }
    }, {
        key: 'moveDate',
        value: function moveDate(operation) {
            var _this2 = this;

            var newDate = operation(this.state.selectedDate);
            if (!this.isDateDisabled(newDate)) {
                this.setState(function () {
                    return { selectedDate: newDate };
                }, function () {
                    return _this2.props.onDateChange(newDate);
                });
            }
        }
    }, {
        key: 'isDateDisabled',
        value: function isDateDisabled(date) {
            return this.props.getCalendarService().isDateDisabled(date, { minDate: this.props.minDate, maxDate: this.props.maxDate });
        }
    }, {
        key: 'render',
        value: function render() {
            var _props = this.props,
                getCalendarService = _props.getCalendarService,
                modifiers = _props.modifiers,
                other = _objectWithoutProperties(_props, ['getCalendarService', 'modifiers']);

            var selectedDate = this.state.selectedDate;


            var month = getCalendarService().getMonthOfDate(selectedDate);

            var calendarProps = _extends({}, other, {
                getCalendarService: getCalendarService,
                month: month,
                modifiers: _extends({}, modifiers, this.modifiers),
                onDateClick: this.handleDateClick,
                singlePicker: true
            });

            return React.createElement(Calendar, calendarProps);
        }
    }]);

    return SingleDatePicker;
}(Component);

SingleDatePicker.propTypes = {
    date: pt.any, // eslint-disable-line react/forbid-prop-types
    minDate: pt.any, // eslint-disable-line react/forbid-prop-types
    maxDate: pt.any, // eslint-disable-line react/forbid-prop-types
    getCalendarService: pt.func,
    modifiers: pt.objectOf(pt.func),
    onDateClick: pt.func,
    onDateChange: pt.func
};
SingleDatePicker.defaultProps = {
    onDateClick: noop,
    onDateChange: noop
};

var _initialiseProps = function _initialiseProps() {
    var _this3 = this;

    this.handleDateClick = function (date) {
        if (!_this3.props.getCalendarService().isDateEqual(date, _this3.state.selectedDate)) {
            _this3.setState({ selectedDate: date });
            _this3.props.onDateChange(date);
        }

        _this3.props.onDateClick(date);
    };

    this.handleKeyUp = function (e) {
        var handled = void 0;
        var keyCode = KeyCode.getByValue(e.which);

        switch (keyCode) {
            case KeyCode.Up:
                _this3.moveDate(_this3.props.getCalendarService().getPrevWeek);
                handled = true;
                break;

            case KeyCode.Down:
                _this3.moveDate(_this3.props.getCalendarService().getNextWeek);
                handled = true;
                break;

            case KeyCode.Left:
                _this3.moveDate(_this3.props.getCalendarService().getPrevDate);
                handled = true;
                break;

            case KeyCode.Right:
                _this3.moveDate(_this3.props.getCalendarService().getNextDate);
                handled = true;
                break;

            default:
                break;
        }

        if (handled) {
            e.stopPropagation();
            e.preventDefault();
        }
    };

    this.isSelected = function (date) {
        return _this3.props.getCalendarService().isDateEqual(date, _this3.state.selectedDate);
    };
};

export default SingleDatePicker;