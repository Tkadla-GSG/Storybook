var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import { PropTypes as pt } from 'prop-types';
import { KeyCode } from 'mews-js';
import { noop } from '../utils/func';
import { isDescendant } from '../utils/events';
import Field from '../Field/Field';
import { InputElement } from '../Input/style';
import Origin from '../OpenableOverlay/Origin';
import ClickAway from '../ClickAway/ClickAway';
import { DatePickerContainerElement, DatePickerInputElement, DatePickerButtonElement } from './style';
import OverlayedSingleDatePicker from './OverlayedSingleDatePicker';

var BaseSingleDateStringPicker = function (_Component) {
    _inherits(BaseSingleDateStringPicker, _Component);

    function BaseSingleDateStringPicker() {
        var _ref;

        var _temp, _this, _ret;

        _classCallCheck(this, BaseSingleDateStringPicker);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = BaseSingleDateStringPicker.__proto__ || Object.getPrototypeOf(BaseSingleDateStringPicker)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
            opened: false,
            // support setting the value from date object for legacy code
            value: _this.props.value || _this.props.dateValue && _this.props.getCalendarService().getDateString(_this.props.dateValue) || ''
        }, _this.handleFocus = function (e) {
            if (!_this.state.opened) {
                _this.open();
            }

            _this.props.onFocus(e);
        }, _this.handleBlur = function () {
            if (_this.isUnmounted) {
                return;
            }

            if (!isDescendant(document.activeElement, _this.containerElement)) {
                if (_this.state.opened) {
                    _this.close();
                }

                _this.props.onBlur();
            }
        }, _this.handleKeyUp = function (e) {
            var keyCode = KeyCode.getByValue(e.which);
            if (keyCode === KeyCode.Enter && _this.state.opened) {
                _this.close();
            } else {
                _this.calendarComponent.getCalendar().handleKeyUp(e);
            }
        }, _this.handleChange = function (e) {
            var value = e.target.value;

            _this.setState({ value: value });
            _this.props.onChange(value);

            // Provided for legacy code that works with instances rather than with strings
            if (_this.props.getCalendarService().isValidDateString(value)) {
                var date = _this.props.getCalendarService().getDateFromDateString(value);
                _this.props.onDateChange(date);
            }
        }, _this.handleDateChange = function (date) {
            var value = _this.props.getCalendarService().getDateString(date);
            _this.setState({ value: value });
            _this.props.onChange(value);
            _this.props.onDateChange(date);
        }, _this.handleDateClick = function () {
            if (_this.props.closeOnDateClick && _this.state.opened) {
                if (_this.state.opened) {
                    _this.close();
                    _this.props.onBlur();
                }
            }
        }, _this.handleClickAway = function () {
            if (_this.state.opened) {
                _this.close();
                _this.props.onBlur();
            }
        }, _this.handleArrowClick = function () {
            if (!_this.state.opened) {
                _this.inputElement.focus();
            }
        }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(BaseSingleDateStringPicker, [{
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
            if (nextProps.value && nextProps.value !== this.props.value) {
                this.setState({ value: nextProps.value });
            }
        }
    }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            this.isUnmounted = true;
            this.deregisterBlurHandler();
        }
    }, {
        key: 'registerBlurHandler',
        value: function registerBlurHandler() {
            var _this2 = this;

            this.blurHandler = document.addEventListener('focus', function () {
                return _this2.handleBlur();
            }, true);
        }
    }, {
        key: 'deregisterBlurHandler',
        value: function deregisterBlurHandler() {
            document.removeEventListener('focus', this.blurHandler);
        }
    }, {
        key: 'open',
        value: function open() {
            this.setState({ opened: true });
            this.props.registerClickAway();
            this.registerBlurHandler();
        }
    }, {
        key: 'close',
        value: function close() {
            this.setState({ opened: false });
            this.props.deregisterClickAway();
            this.deregisterBlurHandler();
        }
    }, {
        key: 'render',
        value: function render() {
            var _this3 = this;

            var _props = this.props,
                _innerRef = _props.innerRef,
                getCalendarService = _props.getCalendarService,
                showMonthSelector = _props.showMonthSelector,
                other = _objectWithoutProperties(_props, ['innerRef', 'getCalendarService', 'showMonthSelector']);

            var _state = this.state,
                opened = _state.opened,
                value = _state.value;


            delete other.onBlur;
            delete other.defaultValue;

            var date = void 0;
            if (getCalendarService().isValidDateString(value)) {
                date = getCalendarService().getDateFromDateString(value);
            }

            var datePickerContainerElementProps = {
                innerRef: function innerRef(c) {
                    _this3.containerElement = c;
                    _innerRef(c);
                }
            };

            var calendarProps = {
                ref: function ref(c) {
                    return _this3.calendarComponent = c;
                },
                anchorElement: function anchorElement() {
                    return _this3.containerElement;
                },
                anchorOrigin: Origin.BottomCenter,
                date: date,
                getCalendarService: getCalendarService,
                onDateClick: this.handleDateClick,
                onDateChange: this.handleDateChange,
                opened: opened,
                showMonthSelector: showMonthSelector
            };

            var inputProps = _extends({}, other, {
                ref: function ref(c) {
                    return _this3.inputComponent = c;
                },
                innerRef: function innerRef(c) {
                    return _this3.inputElement = c;
                },
                value: value,
                onFocus: this.handleFocus,
                onKeyUp: this.handleKeyUp,
                onChange: this.handleChange
            });

            var arrowProps = {
                tabIndex: -1,
                onClick: this.handleArrowClick
            };

            return React.createElement(
                DatePickerContainerElement,
                datePickerContainerElementProps,
                React.createElement(
                    DatePickerInputElement,
                    null,
                    React.createElement(InputElement, inputProps),
                    React.createElement(DatePickerButtonElement, arrowProps)
                ),
                React.createElement(OverlayedSingleDatePicker, calendarProps)
            );
        }
    }]);

    return BaseSingleDateStringPicker;
}(Component);

BaseSingleDateStringPicker.propTypes = {
    closeOnDateClick: pt.bool,
    deregisterClickAway: pt.func,
    getCalendarService: pt.func,
    innerRef: pt.func,
    minDate: pt.any, // eslint-disable-line react/forbid-prop-types
    maxDate: pt.any, // eslint-disable-line react/forbid-prop-types
    onBlur: pt.func,
    onChange: pt.func,
    onDateChange: pt.func,
    onFocus: pt.func,
    opened: pt.bool,
    registerClickAway: pt.func,
    showMonthSelector: pt.bool,
    value: pt.string
};
BaseSingleDateStringPicker.defaultProps = {
    closeOnDateClick: true,
    innerRef: noop,
    onBlur: noop,
    onChange: noop,
    onDateChange: noop,
    onFocus: noop
};


export var SingleDateStringPicker = ClickAway(BaseSingleDateStringPicker);
export default Field(SingleDateStringPicker);