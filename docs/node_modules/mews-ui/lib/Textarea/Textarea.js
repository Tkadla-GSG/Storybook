var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import { PropTypes as pt } from 'prop-types';
import { noop } from '../utils/func';
import Field from '../Field/Field';
import { TextareaElement } from './style';

export var Textarea = function (_Component) {
    _inherits(Textarea, _Component);

    function Textarea() {
        var _ref;

        var _temp, _this, _ret;

        _classCallCheck(this, Textarea);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Textarea.__proto__ || Object.getPrototypeOf(Textarea)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
            value: _this.props.value || _this.props.defaultValue
        }, _this.handleChange = function (e) {
            var value = e.target.value;
            _this.setState({ value: value });
            _this.props.onChange(value);
        }, _this.handleResize = function () {
            // compute the height difference between inner height and outer height
            var style = window.getComputedStyle(_this.textarea);
            var heightOffset = style.boxSizing === 'content-box' ? -(parseFloat(style.paddingTop) + parseFloat(style.paddingBottom)) : parseFloat(style.borderTopWidth) + parseFloat(style.borderBottomWidth);

            // resize the input to its content size
            _this.textarea.style.height = 'auto';
            var height = _this.textarea.scrollHeight + heightOffset + 'px';
            _this.textarea.style.height = height;

            _this.props.onHeightChange(height);
        }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(Textarea, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            this.handleResize();
        }
    }, {
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
            if (this.props.value !== nextProps.value) {
                this.setState({ value: nextProps.value });
            }
        }
    }, {
        key: 'componentDidUpdate',
        value: function componentDidUpdate() {
            this.handleResize();
        }
    }, {
        key: 'render',
        value: function render() {
            var _this2 = this;

            var textareaProps = _extends({}, this.props, {
                innerRef: function innerRef(c) {
                    return _this2.textarea = c;
                },
                onChange: this.handleChange
            });

            return React.createElement(TextareaElement, textareaProps);
        }
    }]);

    return Textarea;
}(Component);

Textarea.propTypes = {
    onChange: pt.func,
    onHeightChange: pt.func,
    value: pt.any,
    defaultValue: pt.any
};
Textarea.defaultProps = {
    onChange: noop,
    onHeightChange: noop,
    rows: 1
};
export default Field(Textarea);