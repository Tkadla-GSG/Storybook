var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import { PropTypes as pt } from 'prop-types';
import ProgressMode from './ProgressMode';
import { calculateRatio, ProgressLinearElement, LinearValueBar } from './style';

var ProgressLinear = function (_Component) {
    _inherits(ProgressLinear, _Component);

    function ProgressLinear() {
        _classCallCheck(this, ProgressLinear);

        return _possibleConstructorReturn(this, (ProgressLinear.__proto__ || Object.getPrototypeOf(ProgressLinear)).apply(this, arguments));
    }

    _createClass(ProgressLinear, [{
        key: 'render',
        value: function render() {
            var _props = this.props,
                disabled = _props.disabled,
                max = _props.max,
                min = _props.min,
                mode = _props.mode,
                value = _props.value,
                other = _objectWithoutProperties(_props, ['disabled', 'max', 'min', 'mode', 'value']);

            var barProps = { disabled: disabled, mode: mode };
            if (mode === ProgressMode.Determinate) {
                barProps.style = {
                    transform: 'scaleX(' + calculateRatio({ max: max, min: min, value: value }) + ')'
                };
            }

            return React.createElement(
                ProgressLinearElement,
                _extends({ 'aria-valuenow': value, 'aria-valuemin': min, 'aria-valuemax': max }, other),
                React.createElement(LinearValueBar, barProps)
            );
        }
    }]);

    return ProgressLinear;
}(Component);

ProgressLinear.propTypes = {
    disabled: pt.bool,
    max: pt.number,
    min: pt.number,
    mode: pt.instanceOf(ProgressMode),
    value: pt.number
};
ProgressLinear.defaultProps = {
    buffer: 0,
    max: 100,
    min: 0,
    mode: ProgressMode.Indeterminate,
    multicolor: false,
    value: 0
};
export default ProgressLinear;