var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

import React, { Component } from 'react';
import { PropTypes as pt } from 'prop-types';
import { noop } from '../utils/func';
import { disableScroll } from '../utils/dom';
import { SidebarContainerElement, BackdropElement, SidebarElement, SidebarHeaderElement, SidebarHeaderTitleElement, SidebarContentElement } from './style';
import ClickAway from '../ClickAway/ClickAway';
import IconButton from '../Button/IconButton';

var CloseIconButton = function CloseIconButton(_ref) {
    var props = _objectWithoutProperties(_ref, []);

    return React.createElement(IconButton, _extends({ icon: 'close' }, props));
};

var Sidebar = function (_Component) {
    _inherits(Sidebar, _Component);

    function Sidebar() {
        var _ref2;

        var _temp, _this, _ret;

        _classCallCheck(this, Sidebar);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref2 = Sidebar.__proto__ || Object.getPrototypeOf(Sidebar)).call.apply(_ref2, [this].concat(args))), _this), _this.handleCloseButtonClick = function () {
            _this.close();
        }, _this.handleBackdropClick = function () {
            if (_this.props.closeOnBackdropClick) {
                _this.close();
            }
        }, _this.handleClickAway = function () {
            if (!_this.props.modal) {
                _this.close();
            }
        }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(Sidebar, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            if (this.props.opened) {
                this.open();
            }
        }
    }, {
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
            if (!this.props.opened && nextProps.opened) {
                this.open();
            }
        }
    }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            if (this.enableScroll) {
                this.enableScroll();
            }
        }
    }, {
        key: 'open',
        value: function open() {
            this.props.registerClickAway();

            if (this.props.disableScroll) {
                this.enableScroll = disableScroll(document.body);
            }
        }
    }, {
        key: 'close',
        value: function close() {
            this.props.deregisterClickAway();
            this.props.onClose();

            if (this.enableScroll) {
                this.enableScroll();
                this.enableScroll = null;
            }
        }
    }, {
        key: 'render',
        value: function render() {
            var _props = this.props,
                opened = _props.opened,
                title = _props.title,
                width = _props.width,
                modal = _props.modal,
                children = _props.children,
                innerRef = _props.innerRef,
                className = _props.className,
                other = _objectWithoutProperties(_props, ['opened', 'title', 'width', 'modal', 'children', 'innerRef', 'className']);

            var containerElementProps = {
                className: className
            };

            var backdropElementProps = {
                opened: opened,
                key: 'backdrop',
                onClick: this.handleBackdropClick
            };

            var siderbarElementProps = {
                innerRef: innerRef,
                opened: opened,
                key: 'sidebar',
                width: width
            };

            var closeIconButtonProps = {
                onClick: this.handleCloseButtonClick
            };

            return React.createElement(
                SidebarContainerElement,
                containerElementProps,
                opened && modal && React.createElement(BackdropElement, backdropElementProps),
                opened && React.createElement(
                    SidebarElement,
                    siderbarElementProps,
                    React.createElement(
                        SidebarHeaderElement,
                        null,
                        React.createElement(CloseIconButton, closeIconButtonProps),
                        React.createElement(
                            SidebarHeaderTitleElement,
                            null,
                            title
                        )
                    ),
                    React.createElement(
                        SidebarContentElement,
                        null,
                        children
                    )
                )
            );
        }
    }]);

    return Sidebar;
}(Component);

Sidebar.propTypes = {
    closeOnBackdropClick: pt.bool,
    deregisterClickAway: pt.func,
    disableScroll: pt.bool,
    modal: pt.bool,
    onClose: pt.func,
    opened: pt.bool,
    registerClickAway: pt.func,
    title: pt.node,
    width: pt.string
};
Sidebar.defaultProps = {
    disableScroll: true,
    modal: true,
    onClose: noop,
    width: '50vw'
};


export default ClickAway(Sidebar);