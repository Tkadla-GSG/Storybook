var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import { PropTypes as pt } from 'prop-types';
import { noop } from '../utils/func';
import { isDescendant } from '../utils/events';
import Field from '../Field/Field';
import ClickAway from '../ClickAway/ClickAway';
import OpenableOverlay from '../OpenableOverlay/OpenableOverlay';
import Origin from '../OpenableOverlay/Origin';
import TimePicker from '../TimePicker/TimePicker';
import { InputElement } from '../Input/style';
import { TimePickerContainerElement, TimePickerInputElement, TimePickerButtonElement } from './style';

var BaseTimeStringPicker = function (_Component) {
    _inherits(BaseTimeStringPicker, _Component);

    function BaseTimeStringPicker(props) {
        _classCallCheck(this, BaseTimeStringPicker);

        var _this = _possibleConstructorReturn(this, (BaseTimeStringPicker.__proto__ || Object.getPrototypeOf(BaseTimeStringPicker)).call(this, props));

        _initialiseProps.call(_this);

        var value = '';
        if (props.value) {
            value = props.value;
        } else if (props.timeValue) {
            // support setting the value from time object for legacy code
            value = props.showSeconds ? _this.props.getTimeService().getString(props.timeValue) : _this.props.getTimeService().getShortString(props.timeValue);
        }

        _this.state = {
            value: value,
            opened: false
        };
        return _this;
    }

    _createClass(BaseTimeStringPicker, [{
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
            if (nextProps.value && nextProps.value !== this.props.value) {
                this.setState({ value: nextProps.value });
            }
        }
    }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            this.isUnmounted = true;
            this.deregisterBlurHandler();
        }
    }, {
        key: 'registerBlurHandler',
        value: function registerBlurHandler() {
            var _this2 = this;

            this.blurHandler = document.addEventListener('focus', function () {
                return _this2.handleBlur();
            }, true);
        }
    }, {
        key: 'deregisterBlurHandler',
        value: function deregisterBlurHandler() {
            document.removeEventListener('focus', this.blurHandler);
        }
    }, {
        key: 'open',
        value: function open() {
            this.setState({ opened: true });
            this.props.registerClickAway();
            this.registerBlurHandler();
        }
    }, {
        key: 'close',
        value: function close() {
            this.setState({ opened: false });
            this.props.deregisterClickAway();
            this.deregisterBlurHandler();
        }
    }, {
        key: 'getTimeFromValue',
        value: function getTimeFromValue(value) {
            var _props = this.props,
                showSeconds = _props.showSeconds,
                getTimeService = _props.getTimeService;


            var time = void 0;
            if (showSeconds) {
                if (getTimeService().isValidString(value)) {
                    time = getTimeService().fromString(value);
                }
            } else if (getTimeService().isValidShortString(value)) {
                time = getTimeService().fromShortString(value);
            }

            return time;
        }
    }, {
        key: 'render',
        value: function render() {
            var _this3 = this;

            var _props2 = this.props,
                getTimeService = _props2.getTimeService,
                _innerRef = _props2.innerRef,
                showSeconds = _props2.showSeconds,
                other = _objectWithoutProperties(_props2, ['getTimeService', 'innerRef', 'showSeconds']);

            var _state = this.state,
                opened = _state.opened,
                value = _state.value;


            var time = this.getTimeFromValue(value);

            var containerProps = {
                innerRef: function innerRef(c) {
                    _this3.containerElement = c;
                    _innerRef(c);
                }
            };

            var inputProps = _extends({}, other, {
                innerRef: function innerRef(c) {
                    return _this3.inputElement = c;
                },
                onChange: this.handleChange,
                onFocus: this.handleFocus,
                value: value
            });

            var openableOverlayProps = {
                opened: opened,
                anchorOrigin: Origin.BottomCenter,
                targetOrigin: Origin.TopCenter,
                anchorElement: function anchorElement() {
                    return _this3.containerElement;
                }
            };

            var timePickerProps = _extends({}, other, {
                showSeconds: showSeconds,
                getTimeService: getTimeService,
                onTimeChange: this.handleTimeChange,
                time: time
            });

            var arrowProps = {
                tabIndex: -1,
                onClick: this.handleArrowClick
            };

            return React.createElement(
                TimePickerContainerElement,
                containerProps,
                React.createElement(
                    TimePickerInputElement,
                    null,
                    React.createElement(InputElement, inputProps),
                    React.createElement(TimePickerButtonElement, arrowProps)
                ),
                React.createElement(
                    OpenableOverlay,
                    openableOverlayProps,
                    React.createElement(TimePicker, timePickerProps)
                )
            );
        }
    }]);

    return BaseTimeStringPicker;
}(Component);

BaseTimeStringPicker.propTypes = {
    getTimeService: pt.func.isRequired,
    onBlur: pt.func,
    onChange: pt.func,
    onFocus: pt.func,
    onTimeChange: pt.func,
    showSeconds: pt.bool,
    value: pt.string
};
BaseTimeStringPicker.defaultProps = {
    onBlur: noop,
    onFocus: noop,
    onChange: noop,
    onTimeChange: noop
};

var _initialiseProps = function _initialiseProps() {
    var _this4 = this;

    this.handleFocus = function (e) {
        if (!_this4.state.opened) {
            _this4.open();
        }

        _this4.props.onFocus(e);
    };

    this.handleBlur = function () {
        if (_this4.isUnmounted) {
            return;
        }

        if (!isDescendant(document.activeElement, _this4.containerElement)) {
            if (_this4.state.opened) {
                _this4.close();
            }

            _this4.props.onBlur();
        }
    };

    this.handleChange = function (e) {
        var value = e.target.value;

        _this4.setState({ value: value });
        _this4.props.onChange(value);

        // Provided for legacy code that works with instances rather than with strings
        var time = _this4.getTimeFromValue(value);
        if (value) {
            _this4.props.onTimeChange(time);
        }
    };

    this.handleTimeChange = function (time) {
        var value = _this4.props.showSeconds ? _this4.props.getTimeService().getString(time) : _this4.props.getTimeService().getShortString(time);
        _this4.setState({ value: value });
        _this4.props.onChange(value);
        _this4.props.onTimeChange(time);
    };

    this.handleClickAway = function () {
        if (_this4.state.opened) {
            _this4.close();
            _this4.props.onBlur();
        }
    };

    this.handleArrowClick = function () {
        if (!_this4.state.opened) {
            _this4.inputElement.focus();
        }
    };
};

export var TimeStringPicker = ClickAway(BaseTimeStringPicker);
export default Field(TimeStringPicker);