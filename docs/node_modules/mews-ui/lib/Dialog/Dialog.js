var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import _ from 'lodash';
import React, { Component } from 'react';
import { PropTypes as pt } from 'prop-types';
import { DialogContainerElement, BackdropElement, DialogElement, DialogContentElement, DialogActionsElement, DialogButton } from './style';

var Dialog = function (_Component) {
    _inherits(Dialog, _Component);

    function Dialog() {
        _classCallCheck(this, Dialog);

        return _possibleConstructorReturn(this, (Dialog.__proto__ || Object.getPrototypeOf(Dialog)).apply(this, arguments));
    }

    _createClass(Dialog, [{
        key: 'render',
        value: function render() {
            var _props = this.props,
                actions = _props.actions,
                children = _props.children,
                opened = _props.opened,
                onBackdropClick = _props.onBackdropClick,
                other = _objectWithoutProperties(_props, ['actions', 'children', 'opened', 'onBackdropClick']);

            var backdropElementProps = {
                isVisible: opened,
                onClick: onBackdropClick
            };

            var dialogElementProps = {
                isOpened: opened
            };

            return React.createElement(
                DialogContainerElement,
                other,
                opened && React.createElement(BackdropElement, backdropElementProps),
                opened && React.createElement(
                    DialogElement,
                    dialogElementProps,
                    React.createElement(
                        DialogContentElement,
                        null,
                        children
                    ),
                    React.createElement(
                        DialogActionsElement,
                        null,
                        _.map(actions, function (a, index) {
                            return React.createElement(DialogButton, _extends({ key: index }, a));
                        })
                    )
                )
            );
        }
    }]);

    return Dialog;
}(Component);

Dialog.propTypes = {
    actions: pt.array,
    onBackdropClick: pt.func,
    opened: pt.bool
};


export default Dialog;