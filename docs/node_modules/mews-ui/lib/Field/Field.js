var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import _ from 'lodash';
import React, { Component } from 'react';
import { PropTypes as pt } from 'prop-types';

import { noop } from '../utils/func';
import { InputWrapperElement, FieldElement, IconElement, LabelElement, LabelRequiredElement, ErrorElement, ContentWrapperElement } from './style';

export default function fieldFactory(WrappedComponent) {
    var _class, _temp2;

    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref$isFilled = _ref.isFilled,
        isFilled = _ref$isFilled === undefined ? function (props) {
        return props.value || props.defaultValue;
    } : _ref$isFilled;

    return _temp2 = _class = function (_Component) {
        _inherits(Field, _Component);

        function Field() {
            var _ref2;

            var _temp, _this, _ret;

            _classCallCheck(this, Field);

            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }

            return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref2 = Field.__proto__ || Object.getPrototypeOf(Field)).call.apply(_ref2, [this].concat(args))), _this), _this.state = {
                filled: isFilled(_this.props)
            }, _this.handleFocus = function (e) {
                if (!_this.state.focused) {
                    _this.setState({ focused: true });
                    _this.props.onFocus(e);
                }
            }, _this.handleBlur = function (e) {
                _this.setState({ focused: false });
                _this.props.onBlur(e);
            }, _this.handleChange = function (e) {
                var value = e.target ? e.target.value : e;
                _this.checkIsFilled(value);
                _this.props.onChange(value);
            }, _temp), _possibleConstructorReturn(_this, _ret);
        }

        _createClass(Field, [{
            key: 'componentWillReceiveProps',
            value: function componentWillReceiveProps(nextProps) {
                if (nextProps.value !== this.state.value) {
                    this.checkIsFilled(nextProps.value);
                }
            }
        }, {
            key: 'checkIsFilled',
            value: function checkIsFilled(value) {
                var filled = _.isString(value) && value.length > 0 || _.isNumber(value);

                this.setState({ filled: filled });
            }
        }, {
            key: 'render',
            value: function render() {
                var _this2 = this;

                var _props = this.props,
                    boxed = _props.boxed,
                    children = _props.children,
                    disabled = _props.disabled,
                    error = _props.error,
                    floating = _props.floating,
                    icon = _props.icon,
                    label = _props.label,
                    large = _props.large,
                    name = _props.name,
                    required = _props.required,
                    other = _objectWithoutProperties(_props, ['boxed', 'children', 'disabled', 'error', 'floating', 'icon', 'label', 'large', 'name', 'required']);

                var _state = this.state,
                    filled = _state.filled,
                    focused = _state.focused;


                var fieldProps = {
                    disabled: disabled,
                    icon: icon
                };

                var iconProps = {
                    filled: filled,
                    focused: focused,
                    value: icon
                };

                var inputWrapperProps = {
                    boxed: boxed,
                    disabled: disabled,
                    error: error,
                    focused: focused,
                    icon: icon,
                    innerRef: function innerRef(c) {
                        return _this2.inputWrapperDomElement = c;
                    },
                    large: large
                };

                var labelProps = {
                    boxed: boxed,
                    error: error,
                    floating: floating,
                    filled: filled,
                    focused: focused,
                    htmlFor: name,
                    large: large
                };

                var wrappedComponentProps = _extends({}, other, {
                    boxed: boxed,
                    disabled: disabled,
                    large: large,
                    name: name,
                    onBlur: this.handleBlur,
                    onFocus: this.handleFocus,
                    onChange: this.handleChange,
                    onHeightChange: this.handleHeightChange
                });

                var errorProps = {
                    boxed: boxed,
                    icon: icon
                };

                return React.createElement(
                    FieldElement,
                    fieldProps,
                    React.createElement(
                        ContentWrapperElement,
                        null,
                        icon && React.createElement(IconElement, iconProps),
                        React.createElement(
                            InputWrapperElement,
                            inputWrapperProps,
                            label && React.createElement(
                                LabelElement,
                                labelProps,
                                label,
                                required && React.createElement(
                                    LabelRequiredElement,
                                    { focused: focused },
                                    ' * '
                                )
                            ),
                            React.createElement(
                                WrappedComponent,
                                wrappedComponentProps,
                                children
                            )
                        )
                    ),
                    error && React.createElement(
                        ErrorElement,
                        errorProps,
                        error
                    )
                );
            }
        }]);

        return Field;
    }(Component), _class.propTypes = {
        boxed: pt.bool,
        children: pt.node,
        disabled: pt.bool,
        error: pt.node,
        floating: pt.bool,
        icon: pt.string,
        label: pt.oneOfType([pt.string, pt.node]),
        large: pt.bool,
        name: pt.string,
        onBlur: pt.func,
        onChange: pt.func,
        onFocus: pt.func,
        required: pt.bool
    }, _class.defaultProps = {
        filled: null,
        floating: true,
        large: false,
        onBlur: noop,
        onChange: noop,
        onFocus: noop
    }, _temp2;
}