var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import _ from 'lodash';
import React, { Component } from 'react';
import { PropTypes as pt } from 'prop-types';
import { TableElement, TableHeadElement, TableBodyElement, TableHeaderRowElement, TableRowElement, TableCellElement, ColumnDefinitionsElement, ColumnElement } from './style';
import TableHeaderCell from './TableHeaderCell';
import SortOrder from './SortOrder';

var Table = function (_Component) {
    _inherits(Table, _Component);

    function Table() {
        var _ref;

        var _temp, _this, _ret;

        _classCallCheck(this, Table);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Table.__proto__ || Object.getPrototypeOf(Table)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
            sortColumn: null,
            sortOrder: SortOrder.Descending
        }, _this.handleSort = function (columnIndex) {
            var column = _this.props.mapping[columnIndex];
            if (_this.state.sortColumn === columnIndex) {
                _this.setState({ sortOrder: _this.state.sortOrder.getOpposite() });
            } else if (column.valueKey) {
                _this.setState({ sortColumn: columnIndex, sortOrder: SortOrder.Descending });
            }
        }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(Table, [{
        key: 'render',
        value: function render() {
            var _props = this.props,
                mapping = _props.mapping,
                source = _props.source,
                other = _objectWithoutProperties(_props, ['mapping', 'source']);

            var _state = this.state,
                sortColumn = _state.sortColumn,
                sortOrder = _state.sortOrder;


            var headerProps = {
                onSort: this.handleSort,
                sortOrder: sortOrder
            };

            var sortedSource = source;
            if (sortColumn) {
                var valueKey = mapping[sortColumn].valueKey;

                sortedSource = _.orderBy(sortedSource, valueKey, sortOrder.value);
            }

            return React.createElement(
                TableElement,
                other,
                React.createElement(
                    ColumnDefinitionsElement,
                    null,
                    _.map(mapping, function (m, index) {
                        return React.createElement(ColumnElement, { key: index, columnWidth: m.columnWidth });
                    })
                ),
                React.createElement(
                    TableHeadElement,
                    null,
                    React.createElement(
                        TableHeaderRowElement,
                        null,
                        _.map(mapping, function (m, index) {
                            return React.createElement(TableHeaderCell, _extends({}, m, { key: index, sortedBy: index === sortColumn, columnIndex: index }, headerProps));
                        })
                    )
                ),
                React.createElement(
                    TableBodyElement,
                    null,
                    _.map(sortedSource, function (s, index) {
                        return React.createElement(
                            TableRowElement,
                            { key: index },
                            _.map(mapping, function (m, i) {
                                return React.createElement(
                                    TableCellElement,
                                    { key: i, columnAlignment: m.columnAlignment },
                                    m.render ? m.render(s) : s[m.valueKey]
                                );
                            })
                        );
                    })
                )
            );
        }
    }]);

    return Table;
}(Component);

Table.propTypes = {
    mapping: pt.array,
    source: pt.array
};
Table.defaultProps = {
    mapping: [],
    source: []
};


export default Table;