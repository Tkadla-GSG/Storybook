var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import _ from 'lodash';
import React, { PropTypes as pt } from 'react';
import { noop } from '../utils/func';
import { SwitchElement, NativeControlElement, SwitchBackgroundElement, SwitchKnobElement } from './style';

var Switch = function (_React$Component) {
    _inherits(Switch, _React$Component);

    function Switch() {
        var _ref;

        var _temp, _this, _ret;

        _classCallCheck(this, Switch);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Switch.__proto__ || Object.getPrototypeOf(Switch)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
            checked: _this.props.checked
        }, _this.handleToggle = function () {
            if (_this.props.disabled) {
                return;
            }

            _this.toggleCheck();
        }, _this.toggleCheck = function () {
            _this.setState({ checked: !_this.state.checked }, function () {
                return _this.props.onChange(_this.state.checked);
            });
        }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(Switch, [{
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
            if (!_.isUndefined(nextProps.checked) && nextProps.checked !== this.props.checked) {
                this.setState({ checked: nextProps.checked });
            }
        }
    }, {
        key: 'render',
        value: function render() {
            var disabled = this.props.disabled;
            var checked = this.state.checked;


            var nativeControlProps = {
                checked: checked,
                onClick: this.handleToggle,
                readOnly: true
            };

            var switchProps = { disabled: disabled, checked: checked };

            return React.createElement(
                SwitchElement,
                null,
                React.createElement(NativeControlElement, nativeControlProps),
                React.createElement(
                    SwitchBackgroundElement,
                    switchProps,
                    React.createElement(SwitchKnobElement, switchProps)
                )
            );
        }
    }]);

    return Switch;
}(React.Component);

Switch.propTypes = {
    checked: pt.bool,
    disabled: pt.bool,
    onChange: pt.func
};
Switch.defaultProps = {
    checked: false,
    disabled: false,
    onChange: noop
};


export default Switch;