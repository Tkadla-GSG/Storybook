var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import { PropTypes as pt } from 'prop-types';

import { noop } from '../utils/func';
import IconButton from '../Button/IconButton';
import Menu from '../Menu/Menu';
import ClickAway from '../ClickAway/ClickAway';
import { IconMenuElement } from './style';

var IconMenu = function (_Component) {
    _inherits(IconMenu, _Component);

    function IconMenu() {
        var _ref;

        var _temp, _this, _ret;

        _classCallCheck(this, IconMenu);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = IconMenu.__proto__ || Object.getPrototypeOf(IconMenu)).call.apply(_ref, [this].concat(args))), _this), _this.state = {}, _this.handleClick = function () {
            if (!_this.state.opened) {
                _this.props.registerClickAway();
                _this.setState({ opened: true });
            }
        }, _this.handleChange = function (items) {
            return _this.props.onChange(items[0]);
        }, _this.handleItemClick = function (item) {
            _this.close();
            _this.props.onItemSelected(item);
        }, _this.handleClickAway = function () {
            return _this.close();
        }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    // IconMenu does not support multiselect


    _createClass(IconMenu, [{
        key: 'close',
        value: function close() {
            if (this.state.opened) {
                this.props.deregisterClickAway();
                this.setState({ opened: false });
            }
        }
    }, {
        key: 'render',
        value: function render() {
            var _this2 = this;

            var _props = this.props,
                icon = _props.icon,
                children = _props.children,
                innerRef = _props.innerRef,
                other = _objectWithoutProperties(_props, ['icon', 'children', 'innerRef']);

            var opened = this.state.opened;


            var iconMenuProps = {
                innerRef: innerRef
            };

            var buttonProps = {
                icon: icon,
                onClick: this.handleClick,
                innerRef: function innerRef(c) {
                    return _this2.icon = c;
                }
            };

            var menuProps = _extends({}, other, {
                anchorElement: function anchorElement() {
                    return _this2.icon;
                },
                onItemClick: this.handleItemClick,
                onChange: this.handleChange,
                opened: opened
            });

            return React.createElement(
                IconMenuElement,
                iconMenuProps,
                React.createElement(IconButton, buttonProps),
                React.createElement(
                    Menu,
                    menuProps,
                    children
                )
            );
        }
    }]);

    return IconMenu;
}(Component);

IconMenu.propTypes = {
    deregisterClickAway: pt.func,
    icon: pt.string,
    innerRef: pt.func,
    children: pt.node,
    onItemSelected: pt.func,
    onChange: pt.func,
    registerClickAway: pt.func
};
IconMenu.defaultProps = {
    onItemSelected: noop,
    onChange: noop
};


export default ClickAway(IconMenu);