var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import { PropTypes as pt } from 'prop-types';

import { noop } from '../utils/func';
import OpenableOverlay from '../OpenableOverlay/OpenableOverlay';
import Origin from '../OpenableOverlay/Origin';
import List from '../List/List';
import MenuItem from './MenuItem';

var Menu = function (_Component) {
    _inherits(Menu, _Component);

    function Menu() {
        var _ref;

        var _temp, _this, _ret;

        _classCallCheck(this, Menu);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Menu.__proto__ || Object.getPrototypeOf(Menu)).call.apply(_ref, [this].concat(args))), _this), _this.state = {}, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(Menu, [{
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
            var _this2 = this;

            if (this.props.opened !== nextProps.opened && nextProps.opened) {
                // allow keyboard arrow navigation after open
                setTimeout(function () {
                    return _this2.listDomElement.focus();
                });
            }
        }
    }, {
        key: 'render',
        value: function render() {
            var _this3 = this;

            var _props = this.props,
                anchorOrigin = _props.anchorOrigin,
                children = _props.children,
                innerRef = _props.innerRef,
                targetOrigin = _props.targetOrigin,
                opened = _props.opened,
                other = _objectWithoutProperties(_props, ['anchorOrigin', 'children', 'innerRef', 'targetOrigin', 'opened']);

            var overlayProps = {
                anchorOrigin: anchorOrigin,
                innerRef: innerRef,
                opened: opened,
                targetOrigin: targetOrigin
            };

            var listProps = _extends({}, other, {
                innerRef: function innerRef(c) {
                    return _this3.listDomElement = c;
                },
                itemType: MenuItem,
                cyclicNavigation: true,
                navigable: true,
                searchable: true,
                tabIndex: -1
            });

            return React.createElement(
                OpenableOverlay,
                overlayProps,
                React.createElement(
                    List,
                    listProps,
                    children
                )
            );
        }
    }]);

    return Menu;
}(Component);

Menu.propTypes = {
    anchorOrigin: pt.instanceOf(Origin),
    targetOrigin: pt.instanceOf(Origin),
    children: pt.node,
    innerRef: pt.func,
    opened: pt.bool
};
Menu.defaultProps = {
    innerRef: noop
};
export default Menu;