var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import _ from 'lodash';
import React, { Component } from 'react';
import { PropTypes as pt } from 'prop-types';
import { KeyCode } from 'mews-js';

import { noop } from '../utils/func';
import Origin from '../OpenableOverlay/Origin';
import ClickAway from '../ClickAway/ClickAway';
import Menu from './Menu';
import MenuItem from './MenuItem';
import { DropDownMenuElement, DropDownMenuValueElement, DropDownMenuArrowElement } from './style';

var selectedPropType = pt.oneOfType([pt.string, pt.number]);

var DropDownMenu = function (_Component) {
    _inherits(DropDownMenu, _Component);

    function DropDownMenu() {
        var _ref;

        var _temp, _this, _ret;

        _classCallCheck(this, DropDownMenu);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = DropDownMenu.__proto__ || Object.getPrototypeOf(DropDownMenu)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
            opened: false,
            selected: _this.props.selected && (_this.props.multiselect ? _this.props.selected : [_this.props.selected]) || []
        }, _this.handleClick = function (e) {
            _this.open();
            _this.props.onClick(e);
        }, _this.handleItemClick = function (item) {
            if (!_this.props.multiselect) {
                _this.close();
            }

            _this.props.onItemSelected(item);
        }, _this.handleClickAway = function () {
            return _this.close();
        }, _this.handleKeyDown = function (event) {
            var keyCode = KeyCode.getByValue(event.which);

            switch (keyCode) {
                case KeyCode.Up:
                case KeyCode.Down:
                case KeyCode.Enter:
                    _this.open();
                    break;

                case KeyCode.Esc:
                    _this.close();
                    break;

                default:
                    break;
            }
        }, _this.handleChange = function (value) {
            _this.setState({ selected: value });
            _this.props.onChange(_this.props.multiselect ? value : value[0]);
        }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(DropDownMenu, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            this.setWidth();
        }
    }, {
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
            if (!_.isNil(nextProps.selected) && this.state.selected !== nextProps.selected) {
                this.setState({ selected: this.props.multiselect ? nextProps.selected : [nextProps.selected] });
            }
        }
    }, {
        key: 'componentDidUpdate',
        value: function componentDidUpdate() {
            this.setWidth();
        }
    }, {
        key: 'setWidth',
        value: function setWidth() {
            if (this.props.autoWidth) {
                // add one to avoid browsers rounding cutting off the text
                var width = this.menuDomElement.offsetWidth + 1;

                this.dropDownMenu.style.width = width + 'px';
                this.menuDomElement.style.width = width + 'px';
            } else {
                this.menuDomElement.style.width = '100%';
            }
        }
    }, {
        key: 'open',
        value: function open() {
            if (!this.state.opened) {
                this.props.registerClickAway();
                this.setState({ opened: true });
            }
        }
    }, {
        key: 'close',
        value: function close() {
            if (this.state.opened) {
                this.props.deregisterClickAway();
                this.setState({ opened: false });
            }
        }
    }, {
        key: 'renderValues',
        value: function renderValues() {
            var selected = this.state.selected;

            var displayValues = [];

            React.Children.forEach(this.props.children, function (c) {
                if (c.type === MenuItem) {
                    var value = c.props.value;

                    if (_.includes(selected, value)) {
                        var displayValue = c.props.primaryText;
                        displayValues.push(displayValue);
                    }
                }
            });

            var lastChildIndex = displayValues.length - 1;
            return _.map(displayValues, function (value, i) {
                return React.createElement(
                    'span',
                    { key: i },
                    value,
                    i !== lastChildIndex && ', '
                );
            });
        }
    }, {
        key: 'render',
        value: function render() {
            var _this2 = this;

            var _props = this.props,
                children = _props.children,
                className = _props.className,
                large = _props.large,
                onBlur = _props.onBlur,
                onFocus = _props.onFocus,
                onClick = _props.onClick,
                _innerRef = _props.innerRef,
                shadowField = _props.shadowField,
                name = _props.name,
                multiselect = _props.multiselect,
                other = _objectWithoutProperties(_props, ['children', 'className', 'large', 'onBlur', 'onFocus', 'onClick', 'innerRef', 'shadowField', 'name', 'multiselect']);

            var _state = this.state,
                opened = _state.opened,
                selected = _state.selected;


            var dropDownMenuProps = {
                className: className,
                innerRef: function innerRef(c) {
                    _this2.dropDownMenu = c;
                    _innerRef(c);
                },
                large: large,
                onBlur: onBlur,
                onClick: this.handleClick,
                onFocus: onFocus,
                onKeyDown: this.handleKeyDown,
                tabIndex: 0
            };

            var menuProps = _extends({}, other, {
                anchorOrigin: Origin.TopCenter,
                anchorElement: function anchorElement() {
                    return _this2.dropDownMenu;
                },
                innerRef: function innerRef(c) {
                    return _this2.menuDomElement = c;
                },
                multiselect: multiselect,
                onChange: this.handleChange,
                onItemClick: this.handleItemClick,
                opened: opened,
                selectable: true,
                targetOrigin: Origin.TopCenter
            });

            return React.createElement(
                DropDownMenuElement,
                dropDownMenuProps,
                React.createElement(
                    DropDownMenuValueElement,
                    null,
                    this.renderValues()
                ),
                React.createElement(DropDownMenuArrowElement, null),
                React.createElement(
                    Menu,
                    menuProps,
                    children
                ),
                shadowField && React.createElement('input', { type: 'hidden', name: name, value: multiselect ? selected : selected[0] })
            );
        }
    }]);

    return DropDownMenu;
}(Component);

DropDownMenu.propTypes = {
    autoWidth: pt.bool,
    children: pt.node,
    className: pt.string,
    large: pt.bool,
    onBlur: pt.func,
    onChange: pt.func,
    onFocus: pt.func,
    onClick: pt.func,
    selected: pt.oneOfType([selectedPropType, pt.arrayOf(selectedPropType)]),
    shadowField: pt.bool
};
DropDownMenu.defaultProps = {
    autoWidth: true,
    onBlur: noop,
    onClick: noop,
    onFocus: noop,
    onChange: noop,
    onItemSelected: noop
};


export default ClickAway(DropDownMenu);