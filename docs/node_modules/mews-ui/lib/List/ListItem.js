var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import { PropTypes as pt } from 'prop-types';
import Checkbox from '../Checkbox/Checkbox';

import { noop } from '../utils/func';
import { ListItemAvatarElement, ListItemContentElement, ListItemElement, ListItemIconElement, ListItemLeftElement, ListItemRightElement, ListItemPrimaryTextElement, ListItemSecondaryTextElement } from './style';

var ListItem = function (_Component) {
    _inherits(ListItem, _Component);

    function ListItem() {
        var _ref;

        var _temp, _this, _ret;

        _classCallCheck(this, ListItem);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ListItem.__proto__ || Object.getPrototypeOf(ListItem)).call.apply(_ref, [this].concat(args))), _this), _this.state = {}, _this.getPrimaryText = function () {
            return _this.primaryTextElement.textContent;
        }, _this.handleClick = function (e) {
            e.preventDefault();
            e.stopPropagation();
            _this.props.onClick(_this);
        }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(ListItem, [{
        key: 'render',
        value: function render() {
            var _this2 = this;

            var _props = this.props,
                leftAvatar = _props.leftAvatar,
                children = _props.children,
                dense = _props.dense,
                primaryText = _props.primaryText,
                secondaryText = _props.secondaryText,
                _innerRef = _props.innerRef,
                leftIcon = _props.leftIcon,
                rightIcon = _props.rightIcon,
                selected = _props.selected,
                multiselect = _props.multiselect,
                other = _objectWithoutProperties(_props, ['leftAvatar', 'children', 'dense', 'primaryText', 'secondaryText', 'innerRef', 'leftIcon', 'rightIcon', 'selected', 'multiselect']);

            var left = void 0;
            if (multiselect) {
                left = React.createElement(Checkbox, { tabIndex: -1, checked: selected });
            } else if (leftAvatar) {
                left = React.createElement(
                    ListItemAvatarElement,
                    null,
                    leftAvatar
                );
            } else if (leftIcon) {
                left = React.createElement(
                    ListItemIconElement,
                    { left: true },
                    leftIcon
                );
            }

            var right = void 0;
            if (rightIcon) {
                right = React.createElement(
                    ListItemIconElement,
                    { right: true },
                    rightIcon
                );
            }

            var itemProps = _extends({}, other, {
                active: this.state.active,
                dense: dense,
                innerRef: function innerRef(c) {
                    _this2.domElement = c;
                    _innerRef(c);
                },
                selected: selected,
                singleLineWithAvatar: !!leftAvatar && !secondaryText,
                twoLine: !!secondaryText,
                onFocus: this.handleFocus,
                onBlur: this.handleBlur,
                onClick: this.handleClick
            });

            var primaryTextProps = {
                dense: dense,
                innerRef: function innerRef(c) {
                    return _this2.primaryTextElement = c;
                }
            };

            return React.createElement(
                ListItemElement,
                _extends({}, itemProps, { listVariant: 'single-line' }),
                left && React.createElement(
                    ListItemLeftElement,
                    null,
                    left
                ),
                React.createElement(
                    ListItemContentElement,
                    null,
                    React.createElement(
                        ListItemPrimaryTextElement,
                        primaryTextProps,
                        primaryText
                    ),
                    secondaryText && React.createElement(
                        ListItemSecondaryTextElement,
                        null,
                        secondaryText
                    )
                ),
                right && React.createElement(
                    ListItemRightElement,
                    null,
                    right
                ),
                children
            );
        }
    }]);

    return ListItem;
}(Component);

ListItem.propTypes = {
    dense: pt.bool,

    leftAvatar: pt.element,
    leftIcon: pt.element,

    rightAvatar: pt.element,
    rightIcon: pt.element,
    rightIconButton: pt.element,

    primaryText: pt.oneOfType([pt.string, pt.element]),
    secondaryText: pt.string,
    secondaryTextLines: pt.number,

    inset: pt.bool,

    value: pt.any,

    onClick: pt.func,
    innerRef: pt.func,
    children: pt.node
};
ListItem.defaultProps = {
    innerRef: noop,
    onFocus: noop,
    onClick: noop
};


export default ListItem;