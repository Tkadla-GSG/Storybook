var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import _ from 'lodash';
import React, { Component } from 'react';
import { PropTypes as pt } from 'prop-types';
import { isTargetDescendant } from '../utils/events';
import { noop } from '../utils/func';

export default function ClickAway(WrappedComponent) {
    var _class, _temp2;

    return _temp2 = _class = function (_Component) {
        _inherits(_class, _Component);

        function _class() {
            var _ref;

            var _temp, _this, _ret;

            _classCallCheck(this, _class);

            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }

            return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = _class.__proto__ || Object.getPrototypeOf(_class)).call.apply(_ref, [this].concat(args))), _this), _this.registerClickAway = function () {
                var element = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document;

                _this.listeningElement = element;
                _this.listeningElement.addEventListener('click', _this.handleClickAway);
            }, _this.deregisterClickAway = function () {
                _this.listeningElement.removeEventListener('click', _this.handleClickAway);
            }, _this.handleClickAway = function (e) {
                if (_this.component && !isTargetDescendant(e, _this.componentElement) && _.isFunction(_this.component.handleClickAway)) {
                    _this.component.handleClickAway(e);
                }
            }, _temp), _possibleConstructorReturn(_this, _ret);
        }

        _createClass(_class, [{
            key: 'componentWillUnmount',
            value: function componentWillUnmount() {
                if (this.listeningElement) {
                    this.deregisterClickAway();
                }
            }
        }, {
            key: 'render',
            value: function render() {
                var _this2 = this;

                var _props = this.props,
                    _innerRef = _props.innerRef,
                    componentRef = _props.componentRef,
                    other = _objectWithoutProperties(_props, ['innerRef', 'componentRef']);

                var componentProps = _extends({}, other, {
                    deregisterClickAway: this.deregisterClickAway,
                    registerClickAway: this.registerClickAway,
                    innerRef: function innerRef(c) {
                        _this2.componentElement = c;
                        _innerRef(c);
                    },
                    ref: function ref(c) {
                        _this2.component = c;
                        componentRef(c);
                    }
                });

                return React.createElement(WrappedComponent, componentProps);
            }
        }]);

        return _class;
    }(Component), _class.propTypes = {
        innerRef: pt.func,
        componentRef: pt.func
    }, _class.defaultProps = {
        innerRef: noop,
        componentRef: noop
    }, _temp2;
}