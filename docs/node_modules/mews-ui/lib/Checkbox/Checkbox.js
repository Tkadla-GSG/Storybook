var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import { PropTypes as pt } from 'prop-types';

import { noop } from '../utils/func';
import { CheckboxElement, InputWrapperElement, InputElement, LabelElement, CheckMarkBackgroundElement, CheckMarkSvgElement, CheckMarkPathElement } from './style';

var Checkbox = function (_Component) {
    _inherits(Checkbox, _Component);

    function Checkbox() {
        var _ref;

        var _temp, _this, _ret;

        _classCallCheck(this, Checkbox);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Checkbox.__proto__ || Object.getPrototypeOf(Checkbox)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
            checked: _this.props.checked || false
        }, _this.handleMouseUp = function () {
            _this.setState({ focusedByMouse: true });
            _this.props.onClick();
        }, _this.handleChange = function (e) {
            e.stopPropagation();

            var checked = !_this.state.checked;
            _this.setState({ checked: checked }, function () {
                return _this.props.onChange(checked);
            });
        }, _this.handleFocus = function (e) {
            _this.setState({ focused: true });
            _this.props.onFocus(e);
        }, _this.handleBlur = function (e) {
            _this.setState({ focused: false, focusedByMouse: false });
            _this.props.onBlur(e);
        }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(Checkbox, [{
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
            if (nextProps.checked !== undefined && nextProps.checked !== this.state.checked) {
                this.setState({ checked: nextProps.checked });
            }
        }
    }, {
        key: 'render',
        value: function render() {
            var _props = this.props,
                children = _props.children,
                disabled = _props.disabled,
                id = _props.id,
                name = _props.name,
                others = _objectWithoutProperties(_props, ['children', 'disabled', 'id', 'name']);

            var _state = this.state,
                checked = _state.checked,
                focused = _state.focused,
                focusedByMouse = _state.focusedByMouse;


            var inputProps = _extends({}, others, {
                checked: checked,
                disabled: disabled,
                id: id,
                name: name,
                onBlur: this.handleBlur,
                onFocus: this.handleFocus,
                type: 'checkbox',
                onChange: noop
            });

            var checkMarkBackgroundProps = {
                checked: checked,
                disabled: disabled
            };

            var checkMarkSvgProps = {
                checked: checked,
                viewBox: '0 0 24 24'
            };

            var checkMarkPathProps = {
                checked: checked,
                fill: 'none',
                d: 'M1.73,12.91 8.1,19.28 22.79,4.59'
            };

            var labelProps = {
                htmlFor: id
            };

            var inputWrapperProps = {
                focused: focused && !focusedByMouse,
                onMouseUp: this.handleMouseUp,
                onChange: this.handleChange
            };

            return React.createElement(
                CheckboxElement,
                null,
                React.createElement(
                    InputWrapperElement,
                    inputWrapperProps,
                    React.createElement(InputElement, inputProps),
                    React.createElement(
                        CheckMarkBackgroundElement,
                        checkMarkBackgroundProps,
                        React.createElement(
                            CheckMarkSvgElement,
                            checkMarkSvgProps,
                            React.createElement(CheckMarkPathElement, checkMarkPathProps)
                        )
                    )
                ),
                React.createElement(
                    LabelElement,
                    labelProps,
                    children
                )
            );
        }
    }]);

    return Checkbox;
}(Component);

Checkbox.propTypes = {
    checked: pt.bool,
    children: pt.node,
    disabled: pt.bool,
    id: pt.string,
    name: pt.string,
    onBlur: pt.func,
    onChange: pt.func,
    onFocus: pt.func,
    onClick: pt.func
};
Checkbox.defaultProps = {
    onBlur: noop,
    onChange: noop,
    onFocus: noop,
    onClick: noop
};
export default Checkbox;