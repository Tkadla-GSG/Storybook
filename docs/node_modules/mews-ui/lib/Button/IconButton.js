var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import _ from 'lodash';
import React, { Component } from 'react';
import { PropTypes as pt } from 'prop-types';

import { noop } from '../utils/func';
import { DEFAULT_THEME } from '../variables';
import { IconButtonElement, IconButtonHrefElement, IconButtonIconElement } from './style';

var IconButton = function (_Component) {
    _inherits(IconButton, _Component);

    function IconButton() {
        var _ref;

        var _temp, _this, _ret;

        _classCallCheck(this, IconButton);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = IconButton.__proto__ || Object.getPrototypeOf(IconButton)).call.apply(_ref, [this].concat(args))), _this), _this.handleMouseUp = function (e) {
            _this.button.blur();
            _this.props.onMouseUp(e);
        }, _this.handleMouseLeave = function (e) {
            _this.button.blur();
            _this.props.onMouseLeave(e);
        }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(IconButton, [{
        key: 'render',
        value: function render() {
            var _this2 = this;

            var _props = this.props,
                children = _props.children,
                href = _props.href,
                icon = _props.icon,
                _innerRef = _props.innerRef,
                primary = _props.primary,
                type = _props.type,
                others = _objectWithoutProperties(_props, ['children', 'href', 'icon', 'innerRef', 'primary', 'type']);

            var Element = href ? IconButtonHrefElement : IconButtonElement;

            var level = primary ? 'primary' : 'neutral';
            var props = _extends({}, others, {
                disabled: this.props.disabled,
                icon: !!icon,
                innerRef: function innerRef(c) {
                    _this2.button = c;
                    _innerRef(c);
                },
                href: href,
                level: level,
                onMouseLeave: this.handleMouseLeave,
                onMouseUp: this.handleMouseUp,
                type: !href ? type : null,
                shape: 'icon'
            });

            return React.createElement(
                Element,
                props,
                icon && (_.isString(icon) ? React.createElement(IconButtonIconElement, { value: icon }) : icon),
                children
            );
        }
    }]);

    return IconButton;
}(Component);

IconButton.propTypes = {
    accent: pt.bool,
    children: pt.node,
    className: pt.string,
    disabled: pt.bool,
    href: pt.string,
    icon: pt.oneOfType([pt.string, pt.element]),
    innerRef: pt.func,
    inverse: pt.bool,
    neutral: pt.bool,
    onMouseUp: pt.func,
    onMouseLeave: pt.func,
    primary: pt.bool,
    type: pt.string
};
IconButton.defaultProps = {
    innerRef: noop,
    neutral: true,
    onMouseUp: noop,
    onMouseLeave: noop,
    primary: false,
    theme: DEFAULT_THEME,
    type: 'button'
};
export default IconButton;