var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import _ from 'lodash';
import React, { Component } from 'react';
import { PropTypes as pt } from 'prop-types';
import { noop } from '../utils/func';
import { NumberSelectorElement, LabelElement, SliderElement, InputElement } from './style';

export var numberSelectorFactory = function numberSelectorFactory(_ref) {
    var _class, _temp2;

    var Input = _ref.Input;
    return _temp2 = _class = function (_Component) {
        _inherits(NumberSelector, _Component);

        function NumberSelector() {
            var _ref2;

            var _temp, _this, _ret;

            _classCallCheck(this, NumberSelector);

            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }

            return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref2 = NumberSelector.__proto__ || Object.getPrototypeOf(NumberSelector)).call.apply(_ref2, [this].concat(args))), _this), _this.state = {
                value: _this.props.value || 0
            }, _this.handleSliderChange = function (value) {
                _this.setState({ value: value });
                _this.props.onChange(value);
            }, _this.handleInputChange = function (e) {
                var value = e.target ? e.target.value : e.target;
                _this.setState({ value: +value });
            }, _temp), _possibleConstructorReturn(_this, _ret);
        }

        _createClass(NumberSelector, [{
            key: 'componentWillReceiveProps',
            value: function componentWillReceiveProps(nextProps) {
                if (!_.isUndefined(nextProps.value) && nextProps.value !== this.state.value) {
                    this.setState({ value: nextProps.value });
                }
            }
        }, {
            key: 'render',
            value: function render() {
                var _props = this.props,
                    min = _props.min,
                    max = _props.max,
                    label = _props.label;
                var value = this.state.value;


                var sliderProps = {
                    min: min,
                    max: max,
                    value: value,
                    onChange: this.handleSliderChange
                };

                var inputProps = {
                    min: min,
                    max: max,
                    value: value,
                    onChange: this.handleInputChange
                };

                return React.createElement(
                    NumberSelectorElement,
                    null,
                    React.createElement(
                        LabelElement,
                        null,
                        label
                    ),
                    React.createElement(SliderElement, sliderProps),
                    React.createElement(Input, inputProps)
                );
            }
        }]);

        return NumberSelector;
    }(Component), _class.propTypes = {
        value: pt.number,
        min: pt.number,
        max: pt.number,
        label: pt.node,
        onChange: pt.func
    }, _class.defaultProps = {
        onChange: noop
    }, _temp2;
};

var NumberSelector = numberSelectorFactory({ Input: InputElement });
export default NumberSelector;