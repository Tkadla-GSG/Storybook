var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import _ from 'lodash';
import React, { Component } from 'react';
import { PropTypes as pt } from 'prop-types';
import { noop } from '../utils/func';
import { ScrollableSelectorElement, ScrollContainerElement, ScrollItemElement, ScrollItemHighlightElement, ITEM_HEIGHT } from './style';

var TOUCH_DISTANCE_SCALE = 10;

var ScrollableSelector = function (_Component) {
    _inherits(ScrollableSelector, _Component);

    function ScrollableSelector() {
        var _ref;

        var _temp, _this, _ret;

        _classCallCheck(this, ScrollableSelector);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ScrollableSelector.__proto__ || Object.getPrototypeOf(ScrollableSelector)).call.apply(_ref, [this].concat(args))), _this), _this.handleWheel = function (e) {
            var values = _this.props.values;

            var currentIndex = _this.getIndexOfValue();

            var newIndex = currentIndex + (e.deltaY > 0 ? 1 : -1);
            var newValue = values[newIndex];
            if (!_.isUndefined(newValue)) {
                e.preventDefault();
                _this.props.onChange(newValue.value);
            }
        }, _this.handleItemClick = function (value) {
            if (_this.props.value !== value) {
                _this.props.onChange(value);
            }
        }, _this.handleTouchStart = function (e) {
            _this.touchStartY = e.targetTouches[0].pageY;

            _this.setValueFromEvent(e);
            document.body.addEventListener('touchmove', _this.handleTouchMove);
            document.body.addEventListener('touchend', _this.handleTouchEnd);
        }, _this.handleTouchMove = function (e) {
            e.preventDefault();
            _this.setValueFromEvent(e);
        }, _this.handleTouchEnd = function () {
            document.body.removeEventListener('touchmove', _this.handleTouchMove);
            document.body.removeEventListener('touchend', _this.handleTouchEnd);
        }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(ScrollableSelector, [{
        key: 'setValueFromEvent',
        value: function setValueFromEvent(e) {
            var _props = this.props,
                value = _props.value,
                values = _props.values;

            var pageY = e.targetTouches[0].pageY;

            var diff = this.touchStartY - pageY;
            var valueChange = Math.abs(diff) > TOUCH_DISTANCE_SCALE ? Math.sign(diff) * 1 : 0;

            var currentValueIndex = this.getIndexOfValue();
            var newValue = values[currentValueIndex + valueChange];

            if (!_.isUndefined(newValue) && newValue.value !== value) {
                this.touchStartY = pageY;
                this.props.onChange(newValue.value);
            }
        }
    }, {
        key: 'getIndexOfValue',
        value: function getIndexOfValue() {
            var _props2 = this.props,
                value = _props2.value,
                values = _props2.values;

            return _.findIndex(values, function (v) {
                return v.value === value;
            });
        }
    }, {
        key: 'render',
        value: function render() {
            var _this2 = this;

            var _props3 = this.props,
                value = _props3.value,
                afterLabel = _props3.afterLabel;

            var valueIndex = this.getIndexOfValue();

            var scrollContainerProps = {
                style: {
                    transform: 'translateY(-' + valueIndex * ITEM_HEIGHT + 'px)'
                }
            };

            return React.createElement(
                ScrollableSelectorElement,
                { onWheel: this.handleWheel, onTouchStart: this.handleTouchStart },
                React.createElement(
                    ScrollItemHighlightElement,
                    null,
                    afterLabel
                ),
                React.createElement(
                    ScrollContainerElement,
                    scrollContainerProps,
                    _.map(this.props.values, function (v, index) {
                        return React.createElement(
                            ScrollItemElement,
                            { key: index, value: v.value, selected: value === v.value, onItemClick: _this2.handleItemClick },
                            v.text
                        );
                    })
                )
            );
        }
    }]);

    return ScrollableSelector;
}(Component);

ScrollableSelector.propTypes = {
    afterLabel: pt.node,
    onChange: pt.func,
    value: pt.oneOfType([pt.number, pt.string]),
    values: pt.array
};
ScrollableSelector.defaultProps = {
    onChange: noop
};
export default ScrollableSelector;