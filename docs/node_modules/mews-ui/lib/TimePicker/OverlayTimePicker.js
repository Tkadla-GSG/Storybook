var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { PropTypes as pt } from 'react';
import timePickerFactory from './TimePicker';
import OpenableOverlay from '../OpenableOverlay/OpenableOverlay';
import Origin from '../OpenableOverlay/Origin';
import { noop } from '../utils/func';

var overlayTimePickerFactory = function overlayTimePickerFactory(_ref) {
    var _class, _temp2;

    var getTimeService = _ref.getTimeService,
        getDateService = _ref.getDateService,
        getLocalization = _ref.getLocalization;

    var TimePicker = timePickerFactory({ getTimeService: getTimeService, getDateService: getDateService, getLocalization: getLocalization });

    return _temp2 = _class = function (_React$Component) {
        _inherits(OverlayTimePicker, _React$Component);

        function OverlayTimePicker() {
            var _ref2;

            var _temp, _this, _ret;

            _classCallCheck(this, OverlayTimePicker);

            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }

            return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref2 = OverlayTimePicker.__proto__ || Object.getPrototypeOf(OverlayTimePicker)).call.apply(_ref2, [this].concat(args))), _this), _this.open = function (anchorElement) {
                _this.overlay.open(anchorElement);
            }, _this.close = function () {
                var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
                    _ref3$keepFocus = _ref3.keepFocus,
                    keepFocus = _ref3$keepFocus === undefined ? true : _ref3$keepFocus;

                _this.overlay.close({ keepFocus: keepFocus });
            }, _temp), _possibleConstructorReturn(_this, _ret);
        }

        _createClass(OverlayTimePicker, [{
            key: 'getTimePicker',
            value: function getTimePicker() {
                return this.timePicker;
            }
        }, {
            key: 'render',
            value: function render() {
                var _this2 = this;

                var _props = this.props,
                    anchorOrigin = _props.anchorOrigin,
                    targetOrigin = _props.targetOrigin,
                    clickAway = _props.clickAway,
                    onClose = _props.onClose,
                    onOpen = _props.onOpen,
                    other = _objectWithoutProperties(_props, ['anchorOrigin', 'targetOrigin', 'clickAway', 'onClose', 'onOpen']);

                var overlayProps = {
                    anchorOrigin: anchorOrigin,
                    targetOrigin: targetOrigin,
                    clickAway: clickAway,
                    onClose: onClose,
                    onOpen: onOpen,
                    ref: function ref(c) {
                        return _this2.overlay = c;
                    }
                };

                var timePickerProps = _extends({}, other, {
                    ref: function ref(c) {
                        return _this2.timePicker = c;
                    },
                    onTimeChange: this.props.onTimeChange
                });

                return React.createElement(
                    OpenableOverlay,
                    _extends({ 'data-ref': 'time-picker-overlay' }, overlayProps),
                    React.createElement(TimePicker, timePickerProps)
                );
            }
        }]);

        return OverlayTimePicker;
    }(React.Component), _class.propTypes = {
        anchorOrigin: pt.object,
        targetOrigin: pt.object,
        clickAway: pt.element,
        onTimeChange: pt.func
    }, _class.defaultProps = {
        anchorOrigin: Origin.BottomCenter,
        targetOrigin: Origin.TopCenter,
        onTimeChange: noop
    }, _temp2;
};

export default overlayTimePickerFactory;