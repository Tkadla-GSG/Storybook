var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import { Component } from 'react';
import { unmountComponentAtNode, unstable_renderSubtreeIntoContainer } from 'react-dom'; // eslint-disable-line camelcase
import { PropTypes as pt } from 'prop-types';

var Portal = function (_Component) {
    _inherits(Portal, _Component);

    function Portal() {
        _classCallCheck(this, Portal);

        return _possibleConstructorReturn(this, (Portal.__proto__ || Object.getPrototypeOf(Portal)).apply(this, arguments));
    }

    _createClass(Portal, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            this.mountPortal();
            this.renderTarget();
        }
    }, {
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
            this.renderTarget(nextProps.children);
        }
    }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            this.unmountPortal();
        }
    }, {
        key: 'getContainer',
        value: function getContainer() {
            var containerId = this.props.containerId;


            var container = void 0;
            if (containerId) {
                container = document.getElementById(containerId);
            }

            return container || document.body;
        }
    }, {
        key: 'mountPortal',
        value: function mountPortal() {
            // prepare portal
            this.containerNode = this.getContainer();
            this.portalNode = document.createElement('div');
            this.containerNode.appendChild(this.portalNode);
        }
    }, {
        key: 'unmountPortal',
        value: function unmountPortal() {
            // unmount children component
            if (this.portedComponent) {
                unmountComponentAtNode(this.portalNode);
                this.portedComponent = null;
            }

            // unmount portal
            if (this.portalNode) {
                this.containerNode.removeChild(this.portalNode);
                this.portalNode = null;
            }
            this.containerNode = null;
        }
    }, {
        key: 'renderTarget',
        value: function renderTarget() {
            var target = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props.children;

            // mount children component
            this.portedComponent = unstable_renderSubtreeIntoContainer(this, target, this.portalNode);
        }
    }, {
        key: 'render',
        value: function render() {
            return null;
        }
    }]);

    return Portal;
}(Component);

Portal.propTypes = {
    children: pt.node,
    containerId: pt.string
};
export default Portal;