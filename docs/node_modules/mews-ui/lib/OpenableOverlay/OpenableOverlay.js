var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import _ from 'lodash';
import React, { Component } from 'react';
import { PropTypes as pt } from 'prop-types';
import { KeyCode } from 'mews-js';

import { noop, debounce } from '../utils/func';
import ClickAway from '../ClickAway/ClickAway';
import Origin from './Origin';
import { OpenableOverlayElement } from './style';

var RESIZE_DEBOUNCE_TIMEOUT = 100;
var SCROLLBAR_SIZE = 20;
var BOUNCE_PADDING = 8;

var OpenableOverlay = function (_Component) {
    _inherits(OpenableOverlay, _Component);

    function OpenableOverlay() {
        var _ref;

        var _temp, _this, _ret;

        _classCallCheck(this, OpenableOverlay);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = OpenableOverlay.__proto__ || Object.getPrototypeOf(OpenableOverlay)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
            placement: {
                top: 0,
                left: 0
            }
        }, _this.handleClickAway = function () {
            _this.props.onClickAway();
        }, _this.handleKeyDown = function (e) {
            var keyCode = KeyCode.getByValue(e.which);

            switch (keyCode) {
                case KeyCode.Esc:
                    e.preventDefault();
                    e.stopPropagation();

                    _this.close();
                    break;

                default:
                    break;
            }

            _this.props.onKeyDown(e);
        }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(OpenableOverlay, [{
        key: 'componentWillMount',
        value: function componentWillMount() {
            var _this2 = this;

            this.resizeListener = debounce(function () {
                return _this2.checkPlacement();
            }, RESIZE_DEBOUNCE_TIMEOUT);
            window.addEventListener('resize', this.resizeListener);
        }
    }, {
        key: 'componentDidMount',
        value: function componentDidMount() {
            this.checkPlacement();
        }
    }, {
        key: 'componentDidUpdate',
        value: function componentDidUpdate() {
            this.checkPlacement();
        }
    }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            this.resizeListener.cancel();
            window.removeEventListener('resize', this.resizeListener);
        }
    }, {
        key: 'checkPlacement',
        value: function checkPlacement() {
            var _state$placement = this.state.placement,
                top = _state$placement.top,
                left = _state$placement.left;

            var placement = this.computePlacement();
            if (placement && (placement.top !== top || placement.left !== left)) {
                this.setState({ placement: placement });
            }
        }
    }, {
        key: 'computePlacement',
        value: function computePlacement() {
            if (!this.props.opened) {
                return;
            }

            var _props = this.props,
                anchorElement = _props.anchorElement,
                anchorOrigin = _props.anchorOrigin,
                targetOrigin = _props.targetOrigin;


            var realAnchorElement = _.isFunction(anchorElement) ? anchorElement() : anchorElement;
            var finalAnchorElement = realAnchorElement || this.root.parentNode;
            var targetElement = this.root;

            var anchorPosition = getTargetPosition(finalAnchorElement);
            var targetPosition = getTargetPosition(targetElement);

            var top = anchorPosition.vertical[anchorOrigin.vertical] - targetPosition.vertical[targetOrigin.vertical];
            var left = anchorPosition.horizontal[anchorOrigin.horizontal] - targetPosition.horizontal[targetOrigin.horizontal];

            var _window = window,
                viewportWidth = _window.innerWidth;

            var elementWidth = targetElement.offsetWidth;
            var anchorLeft = getElementLeft(finalAnchorElement);

            var absoluteElementLeft = left + anchorLeft;
            if (absoluteElementLeft < 0) {
                left += Math.abs(absoluteElementLeft) + BOUNCE_PADDING;
            }

            var absoluteLeftDiff = viewportWidth - (absoluteElementLeft + elementWidth);
            if (absoluteLeftDiff < 0) {
                var bouncedAbsoluteLeftDiff = absoluteLeftDiff + Math.sign(absoluteLeftDiff) * (SCROLLBAR_SIZE + BOUNCE_PADDING);
                left += bouncedAbsoluteLeftDiff;
            }

            return { top: top, left: left };
        }
    }, {
        key: 'registerHandlers',
        value: function registerHandlers() {
            if (this.props.clickAway) {
                this.hasRegisteredHandler = true;
                this.props.registerClickAway();
            }
        }
    }, {
        key: 'deregisterHandlers',
        value: function deregisterHandlers() {
            if (this.hasRegisteredHandler) {
                this.hasRegisteredHandler = false;
                this.props.deregisterClickAway();
            }
        }
    }, {
        key: 'open',
        value: function open(anchorElement) {
            if (!this.state.isOpen) {
                this.setState({ isOpen: true });
                this.registerHandlers();

                // capture focus
                this.previouslyFocusedNode = document.activeElement;

                this.props.onOpen();
            }

            this.setState({ anchorElement: anchorElement });
        }
    }, {
        key: 'close',
        value: function close() {
            var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
                _ref2$keepFocus = _ref2.keepFocus,
                keepFocus = _ref2$keepFocus === undefined ? true : _ref2$keepFocus;

            if (this.state.isOpen) {
                this.setState({ isOpen: false });
                this.deregisterHandlers();

                // restore focus
                if (keepFocus && this.previouslyFocusedNode) {
                    this.previouslyFocusedNode.focus();
                    this.previouslyFocusedNode = null;
                }

                this.props.onClose();
            }
        }
    }, {
        key: 'isOpen',
        value: function isOpen() {
            return this.state.isOpen;
        }
    }, {
        key: 'disableTransition',
        value: function disableTransition() {}
    }, {
        key: 'enableTransition',
        value: function enableTransition() {}
    }, {
        key: 'render',
        value: function render() {
            var _this3 = this;

            var _props2 = this.props,
                children = _props2.children,
                _innerRef = _props2.innerRef,
                opened = _props2.opened,
                targetOrigin = _props2.targetOrigin,
                other = _objectWithoutProperties(_props2, ['children', 'innerRef', 'opened', 'targetOrigin']);

            var placement = this.state.placement;


            var props = _extends({}, other, {
                innerRef: function innerRef(c) {
                    _this3.root = c;
                    _innerRef(c);
                },
                opened: opened,
                origin: targetOrigin.value,
                placement: placement,
                tabIndex: -1
            });

            return React.createElement(
                OpenableOverlayElement,
                props,
                children
            );
        }
    }]);

    return OpenableOverlay;
}(Component);

OpenableOverlay.propTypes = {
    anchorElement: pt.oneOfType([pt.node, pt.func]),
    anchorOrigin: pt.instanceOf(Origin),
    children: pt.node,
    deregisterClickAway: pt.func,
    innerRef: pt.func,
    onOpen: pt.func,
    onClose: pt.func,
    onClickAway: pt.func,
    onKeyDown: pt.func,
    registerClickAway: pt.func,
    targetOrigin: pt.instanceOf(Origin),
    clickAway: pt.bool,
    opened: pt.bool
};
OpenableOverlay.defaultProps = {
    innerRef: noop,
    onClose: noop,
    onKeyDown: noop,
    onOpen: noop,
    onClickAway: noop,

    anchorOrigin: Origin.TopLeft,
    targetOrigin: Origin.TopLeft,

    maxHeight: 500,
    clickAway: true,

    opened: false
};


export default ClickAway(OpenableOverlay);

function getTargetPosition(el) {
    return {
        vertical: {
            top: 0,
            center: el.offsetHeight / 2,
            bottom: el.offsetHeight
        },
        horizontal: {
            left: 0,
            center: el.offsetWidth / 2,
            right: el.offsetWidth
        }
    };
}

function getElementTop(element) {
    var location = 0;
    var node = element;
    if (node.offsetParent) {
        do {
            location += node.offsetTop;
            node = node.offsetParent;
        } while (node);
    }

    return location >= 0 ? location : 0;
}

function getElementLeft(element) {
    var location = 0;
    var node = element;
    if (node.offsetParent) {
        do {
            location += node.offsetLeft;
            node = node.offsetParent;
        } while (node);
    }

    return location >= 0 ? location : 0;
}