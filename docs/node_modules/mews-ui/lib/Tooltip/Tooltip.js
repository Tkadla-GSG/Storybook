var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import { PropTypes as pt } from 'prop-types';
import Portal from '../Hoc/Portal';
import { noop } from '../utils/func';
import { addEventListenerOnTransitionEnded, removeEventListenerOnTransitionEnded } from '../utils/events';
import Position from './Position';
import { TooltipElement, TooltipContentElement } from './style';

export default (function (ComposedComponent) {
    var _class, _temp2;

    return _temp2 = _class = function (_Component) {
        _inherits(Tooltip, _Component);

        function Tooltip() {
            var _ref;

            var _temp, _this, _ret;

            _classCallCheck(this, Tooltip);

            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }

            return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Tooltip.__proto__ || Object.getPrototypeOf(Tooltip)).call.apply(_ref, [this].concat(args))), _this), _this.state = {}, _this.handleClick = function (e) {
                if (_this.props.tooltipHideOnClick && _this.state.active) {
                    _this.deactivate();
                }

                if (_this.props.tooltipShowOnClick && !_this.state.active) {
                    var position = _this.calculatePosition(e.currentTarget);
                    _this.activate(position);
                }

                _this.props.onClick(e);
            }, _this.handleMouseEnter = function (e) {
                var position = _this.calculatePosition(e.currentTarget);
                _this.activate(position);
                _this.props.onMouseEnter(e);
            }, _this.handleMouseLeave = function (e) {
                _this.deactivate();
                _this.props.onMouseLeave(e);
            }, _this.handleTransformEnd = function () {
                _this.setState({ visible: false });
            }, _temp), _possibleConstructorReturn(_this, _ret);
        }

        _createClass(Tooltip, [{
            key: 'componentWillUnmount',
            value: function componentWillUnmount() {
                if (this.timeout) {
                    clearTimeout(this.timeout);
                }

                if (this.tooltipElement) {
                    removeEventListenerOnTransitionEnded(this.tooltipElement, this.handleTransitionEnd);
                }
            }
        }, {
            key: 'activate',
            value: function activate(_ref2) {
                var _this2 = this;

                var top = _ref2.top,
                    left = _ref2.left,
                    position = _ref2.position;

                if (this.timeout) {
                    clearTimeout(this.timeout);
                }

                this.setState({ visible: true, position: position });

                this.timeout = setTimeout(function () {
                    _this2.setState({ active: true, top: top, left: left });
                }, this.props.tooltipDelay);
            }
        }, {
            key: 'deactivate',
            value: function deactivate() {
                if (this.timeout) {
                    clearTimeout(this.timeout);
                }

                if (this.state.active) {
                    addEventListenerOnTransitionEnded(this.tooltipElement, this.handleTransitionEnd);
                    this.setState({ active: false });
                } else if (this.state.visible) {
                    this.setState({ visible: false });
                }
            }
        }, {
            key: 'getPosition',
            value: function getPosition(element) {
                var tooltipPosition = this.props.tooltipPosition;


                if (tooltipPosition === Position.Horizontal) {
                    var origin = element.getBoundingClientRect();

                    var _getViewport = getViewport(),
                        viewportWidth = _getViewport.width;

                    var toRight = origin.left < viewportWidth / 2 - origin.width / 2;
                    return toRight ? Position.Right : Position.Left;
                } else if (tooltipPosition === Position.Vertical) {
                    var _origin = element.getBoundingClientRect();

                    var _getViewport2 = getViewport(),
                        viewportHeight = _getViewport2.height;

                    var toBottom = _origin.top < viewportHeight / 2 - _origin.height / 2;
                    return toBottom ? Position.Bottom : Position.Top;
                }

                return tooltipPosition;
            }
        }, {
            key: 'calculatePosition',
            value: function calculatePosition(element) {
                var position = this.getPosition(element);

                var _element$getBoundingC = element.getBoundingClientRect(),
                    top = _element$getBoundingC.top,
                    left = _element$getBoundingC.left,
                    height = _element$getBoundingC.height,
                    width = _element$getBoundingC.width;

                var xOffset = window.scrollX || window.pageXOffset;
                var yOffset = window.scrollY || window.pageYOffset;

                if (position === Position.Bottom) {
                    return {
                        top: top + height + yOffset,
                        left: left + width / 2 + xOffset,
                        position: position
                    };
                } else if (position === Position.Top) {
                    return {
                        top: top + yOffset,
                        left: left + width / 2 + xOffset,
                        position: position
                    };
                } else if (position === Position.Left) {
                    return {
                        top: top + height / 2 + yOffset,
                        left: left + xOffset,
                        position: position
                    };
                } else if (position === Position.Right) {
                    return {
                        top: top + height / 2 + yOffset,
                        left: left + width + xOffset,
                        position: position
                    };
                }
            }
        }, {
            key: 'render',
            value: function render() {
                var _this3 = this;

                var _state = this.state,
                    active = _state.active,
                    left = _state.left,
                    top = _state.top,
                    position = _state.position,
                    visible = _state.visible;

                var _props = this.props,
                    children = _props.children,
                    tooltip = _props.tooltip,
                    other = _objectWithoutProperties(_props, ['children', 'tooltip']);

                delete other.tooltipDelay;
                delete other.tooltipHideOnClick;
                delete other.tooltipPosition;
                delete other.tooltipShowOnClick;

                var componentProps = _extends({}, other, {
                    onClick: this.handleClick,
                    onMouseEnter: this.handleMouseEnter,
                    onMouseLeave: this.handleMouseLeave
                });

                var tooltipElement = void 0;
                if (visible) {
                    var tooltipProps = {
                        active: active,
                        top: top,
                        left: left,
                        position: position,
                        innerRef: function innerRef(c) {
                            return _this3.tooltipElement = c;
                        }
                    };

                    tooltipElement = React.createElement(
                        Portal,
                        null,
                        React.createElement(
                            TooltipElement,
                            tooltipProps,
                            React.createElement(
                                TooltipContentElement,
                                null,
                                tooltip
                            )
                        )
                    );
                }

                return React.createElement(
                    ComposedComponent,
                    componentProps,
                    children,
                    tooltipElement
                );
            }
        }]);

        return Tooltip;
    }(Component), _class.propTypes = {
        children: pt.node,
        onClick: pt.func,
        onMouseEnter: pt.func,
        onMouseLeave: pt.func,
        tooltip: pt.node,
        tooltipDelay: pt.number,
        tooltipHideOnClick: pt.bool,
        tooltipPosition: pt.instanceOf(Position),
        tooltipShowOnClick: pt.bool
    }, _class.defaultProps = {
        delay: 0,
        onClick: noop,
        onMouseEnter: noop,
        onMouseLeave: noop,
        tooltipHideOnClick: true,
        tooltipPosition: Position.Vertical,
        tooltipShowOnClick: false
    }, _temp2;
});

function getViewport() {
    return {
        height: window.innerHeight || document.documentElement.offsetHeight,
        width: window.innerWidth || document.documentElement.offsetWidth
    };
}