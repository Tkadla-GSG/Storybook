var _templateObject = _taggedTemplateLiteral(['\n    display: block;\n    font-family: ', ';\n    font-size: 12px;\n    font-weight: 500;\n    max-width: 200px;\n    padding: 4px;\n    pointer-events: none;\n    position: absolute;\n    text-align: center;\n    text-transform: none;\n    transform: scale(0) translateX(-50%);\n    transform-origin: top left;\n    transition: ', ' .2s transform;\n    z-index: ', ';\n\n    left: ', 'px;\n    top: ', 'px;\n\n    ', '\n\n    ', '\n\n    ', '\n\n    ', '\n'], ['\n    display: block;\n    font-family: ', ';\n    font-size: 12px;\n    font-weight: 500;\n    max-width: 200px;\n    padding: 4px;\n    pointer-events: none;\n    position: absolute;\n    text-align: center;\n    text-transform: none;\n    transform: scale(0) translateX(-50%);\n    transform-origin: top left;\n    transition: ', ' .2s transform;\n    z-index: ', ';\n\n    left: ', 'px;\n    top: ', 'px;\n\n    ', '\n\n    ', '\n\n    ', '\n\n    ', '\n']),
    _templateObject2 = _taggedTemplateLiteral(['\n    background: rgba(0, 0, 0, .5);\n    border-radius: 2px;\n    color: ', ';\n    padding: 8px;\n'], ['\n    background: rgba(0, 0, 0, .5);\n    border-radius: 2px;\n    color: ', ';\n    padding: 8px;\n']);

function _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

import styled from 'styled-components';
import { ANIMATION_CURVE_DEFAULT, PREFERRED_FONT, Z_INDEX_HIGHER } from '../variables';
import { COLOR_WHITE } from '../colors';
import Position from './Position';

export var TooltipElement = styled.div(_templateObject, PREFERRED_FONT, ANIMATION_CURVE_DEFAULT, Z_INDEX_HIGHER, function (props) {
    return props.left;
}, function (props) {
    return props.top;
}, function (props) {
    return props.active && '\n        transform: scale(1) translateX(-50%);\n    ';
}, function (props) {
    return props.position === Position.Top && '\n        transform: scale(0) translateX(-50%) translateY(-100%);\n\n        ' + (props.active && 'transform: scale(1) translateX(-50%) translateY(-100%);') + ';\n    ';
}, function (props) {
    return props.position === Position.Left && '\n        transform: scale(0) translateX(-100%) translateY(-50%);\n\n        ' + (props.active && 'transform: scale(1) translateX(-100%) translateY(-50%);') + ';\n      ;\n    ';
}, function (props) {
    return props.position === Position.Right && '\n        transform: scale(0) translateX(0) translateY(-50%);\n\n        ' + (props.active && 'transform: scale(1) translateX(0) translateY(-50%);') + ';\n      ;\n    ';
});

export var TooltipContentElement = styled.div(_templateObject2, COLOR_WHITE);

// arrow style
/*
    content: '';
    bottom: 0;
    left: 50%;
    margin-left: -5px;
    border-width: 5px 5px 0;
    border-color: transparent;
    border-top-color: #000;
*/