import _ from 'lodash';
import React, { Component } from 'react';
import { PropTypes as pt } from 'prop-types';
import { localizationPropTypes } from './propTypes';

class LocalizationProvider extends Component {
    static propTypes = {
        localizeText: pt.func.isRequired,
        localizeDate: pt.func.isRequired,
        localizeProperty: pt.func.isRequired,
        localizeCurrencyValue: pt.func.isRequired,
        languageCode: pt.string.isRequired
    }

    static childContextTypes = {
        localization: localizationPropTypes,
    }

    subscribers = [];

    componentWillUnmount() {
        this.subscribers = [];
    }

    componentWillReceiveProps(nextProps) {
        if (nextProps.languageCode !== this.props.languageCode) {
            _.forEach(this.subscribers, f => f());
        }
    }

    subscribe = func => {
        this.subscribers.push(func);

        return () => {
            this.subscribers = _.filter(this.subscribers, f => f !== func);
        };
    };

    getChildContext() {
        const { languageCode } = this.props;

        return {
            localization: {
                subscribe: this.subscribe,
                localizeText: (...args) => this.props.localizeText(languageCode, ...args),
                localizeDate: (...args) => this.props.localizeDate(languageCode, ...args),
                localizeProperty: (...args) => this.props.localizeProperty(languageCode, ...args),
                localizeCurrencyValue: (...args) => this.props.localizeCurrencyValue(languageCode, ...args),
            }
        };
    }

    render() {
        return this.props.children;
    }
}

export default LocalizationProvider;
