import _ from 'lodash';
import uri from 'urijs';
import { type } from '../utils';
import { ImageResizeMode } from '../enums';
import ConfigurationComponent from './configurationComponent';

var IMAGE_BASE_URL = '/media/image';

export default function RouterComponent(configurationComponent, {
    actions = {},
} = {}) {
    type.check(configurationComponent, ConfigurationComponent);

    var actionCalls = _.transform(actions, (acc, options, action) => {
        _.forEach(options.placeholders, p => {
            if (options.url.indexOf(p) === -1) {
                throw new Error(`Missing placeholder definition in the action '${action}': ${p}`);
            }
        });
        acc[action + 'Url'] = params => getAction(options.url, options.placeholders, options.defaultValues, params);
    }, {});

    return type.create(RouterComponent,
        actionCalls,
        {
            contentUrl(path) {
                return getContentUrl(configurationComponent.getStaticContentBaseUrl(), path);
            },

            contentFallbackUrl(path) {
                return getContentUrl(configurationComponent.getPlatform().primaryUrl, path);
            },

            imageUrl(imageId, { mode = null, width = null, height = null, quality = null } = {}) {
                if (!(width || height)) {
                    throw new Error("Either 'width' or 'height' of image has to be specified.");
                }

                if (mode && !mode instanceof ImageResizeMode) {
                    throw new Error("Image resize 'mode' is of an invalid value: '${mode}'");
                }

                var params = [
                    mode && `mode=${mode.value}`,
                    width && `width=${width}`,
                    height && `height=${height}`,
                    quality && `quality=${quality}`,
                ];
                var paramString = _.compact(params).join('&');

                return configurationComponent.getStaticContentBaseUrl() + IMAGE_BASE_URL + '/' + imageId
                    + (paramString ? `?${paramString}` : '');
            },
        }
    );

    function getContentUrl(baseUrl, path) {
        return `${baseUrl}${configurationComponent.getStaticContentPath()}${path}?v=${configurationComponent.getVersionHash()}`;
    }

    function getAction(url, placeholders, defaultValues = {}, params = {}) {
        var finalUrl = url;

        _.forEach(placeholders, (placeholder, name) => {
            var value = params[name];
            if (_.isUndefined(value)) {
                value = defaultValues[name];
            }
            if (_.isUndefined(value)) {
                throw new Error(`Missing a value for a placeholder: '${name}'`);
            }
            finalUrl = finalUrl.replace(placeholder, encodeURIComponent(value));
            delete params[name];
        });

        if (!_.isEmpty(params)) {
            finalUrl = uri(finalUrl).addQuery(params).valueOf();
        }

        return finalUrl;
    }
}
