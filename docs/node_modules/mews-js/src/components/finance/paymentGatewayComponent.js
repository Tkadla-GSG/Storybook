import _ from 'lodash';
import { type } from '../../utils';
import { PaymentGatewayType } from '../../enums';
import { AdyenComponent, BraintreeComponent, StripeComponent } from './paymentGateways';

const OBFUSCATION_SYMBOL = '*';

export default function PaymentGatewayComponent(adyenComponent, braintreeComponent, stripeComponent) {
    type.check(adyenComponent, AdyenComponent);
    type.check(braintreeComponent, BraintreeComponent);
    type.check(stripeComponent, StripeComponent);

    const paymentGateways = {
        [PaymentGatewayType.Adyen]: adyenComponent,
        [PaymentGatewayType.Braintree]: braintreeComponent,
        [PaymentGatewayType.Stripe]: stripeComponent,
    };

    return type.create(PaymentGatewayComponent, {
        tokenizeCard(paymentGatewayType, ...args) {
            type.check(paymentGatewayType, PaymentGatewayType);
            return paymentGateways[paymentGatewayType].tokenizeCard(...args);
        },

        parseExpiration(expirationString) {
            checkString(expirationString, 'expirationString');

            const [monthString, yearString = ''] = expirationString.replace(/[^0-9/]/g, '').split('/');
            const yearNumber = parseInt(yearString, 10);

            return {
                year: yearNumber + (yearNumber < 100 ? 2000 : 0),
                month: parseInt(monthString, 10),
            };
        },

        obfuscateCardNumber(cardNumber) {
            checkString(cardNumber, 'cardNumber');

            return cardNumber.replace(/ /g, '').replace(/(\d{6})(\d+)(\d{4})/, (match, head, middle, tail) =>
                head + _.repeat(OBFUSCATION_SYMBOL, middle.length) + tail
            );
        },
    });

    function checkString(string, name) {
        if (!_.isString(string)) {
            throw new TypeError(`Expected ${name} to be string, got: (${string}).`);
        }
    }
}
