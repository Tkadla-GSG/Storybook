import Set from 'core-js/library/es6/set';

import { type } from '../utils';
import LoggerComponent from './loggerComponent';
import SentryComponent from './sentryComponent';

import {
    BusinessError,
    NetworkError,
    NotAuthorizedError,
} from '../errors';

var errorWhiteList = new Set([NotAuthorizedError, BusinessError, NetworkError]);

export default function ErrorReporterComponent(loggerComponent, sentryComponent) {
    type.check(loggerComponent, LoggerComponent);
    type.check(sentryComponent, SentryComponent);

    return type.create(ErrorReporterComponent, {
        report,

        withErrorReporting(promise) {
            return Promise.resolve().then(promise).catch(error => {
                report(error);
                throw error;
            });
        },

        setPerson(person) {
            sentryComponent.setPerson(person);
        }
    });

    function report(error, additionalData = {}) {
        loggerComponent.log(error, additionalData);

        if (error && !errorWhiteList.has(error.constructor)) {
            sentryComponent.logError(error, additionalData);
        }
    }
}
