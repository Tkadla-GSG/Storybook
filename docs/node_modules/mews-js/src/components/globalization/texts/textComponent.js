import _ from 'lodash';
import { type } from '../../../utils';
import { DataComponent } from '../data';
import { Localization } from '../localizations';

export default function TextComponent(dataComponent) {
    type.check(dataComponent, DataComponent);

    return type.create(TextComponent, {
        get(key, localization, substitutes, options = {}) {
            if (!_.isString(key) || _.isEmpty(key)) {
                throw new TypeError('Expected the key to be a non-empty string.');
            }

            type.check(localization, Localization);

            var language = localization.getLanguage();
            return translateToLanguage(key, language, substitutes, options);
        },
    });

    function splitKeyToWords(key) {
        return key.split(/(?=[A-Z])/).join(' ');
    }

    function getScopeForLanguage(language) {
        return _.get(dataComponent.getTexts(), [language.getCode()], {});
    }

    function translateToLanguage(key, language, substitutes, { fallbackToKey = true }) {
        if (_.isNull(language)) {
            return fallbackToKey ? splitKeyToWords(key) : null;
        }

        var scope = getScopeForLanguage(language);
        var translation = scope[key];
        if (_.isEmpty(translation)) {
            return translateToLanguage(key, language.getFallbackLanguage(), substitutes, { fallbackToKey });
        }

        _.forEach(substitutes, (value, placeholder) => {
            translation = translation.replace('{' + placeholder + '}', value);
        });

        return translation;
    }
}
