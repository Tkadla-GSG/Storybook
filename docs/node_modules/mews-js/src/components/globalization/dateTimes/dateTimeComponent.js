import moment from 'moment-timezone';
import { type, check, getDateTimeString } from '../../../utils';
import { IsoDay } from '../../../enums';
import DateTimeUtcComponent from '../dateTimesUtc/dateTimeUtcComponent';
import CultureInfoComponent from '../cultureInfos/cultureInfoComponent';
import { IsoFormat, MomentLocalizationFormat } from '../enums';
import { ensureCultureInfo, isValidFormat, format, toMoment } from '../utils';
import DateTime from './dateTime';
import DateTimeUtc from '../dateTimesUtc/dateTimeUtc';
import DateFactory from '../dates/date';
import Time from '../times/time';
import Month from '../months/month';
import { toDateMoment } from '../dates/dateComponent';
import { toTimeMoment } from '../times/timeComponent';

const DATE_TIME_FORMATS = [
    IsoFormat.Date.value,
    IsoFormat.Seconds.value,
    IsoFormat.Milliseconds.value,
    IsoFormat.Microseconds.value,
];

export default function DateTimeComponent(dateTimeUtcComponent, cultureInfoComponent) {
    type.check(dateTimeUtcComponent, DateTimeUtcComponent);
    type.check(cultureInfoComponent, CultureInfoComponent);

    return type.create(DateTimeComponent, {
        parse(dateTimeString, timezone) {
            return parseDateTimeString(dateTimeString, timezone);
        },

        now(timezone) {
            check.timezone(timezone);
            check.notUtcTimezone(timezone);

            var m = moment.tz(timezone);
            return DateTime(m);
        },

        fromUtc(dateTimeUtc, timezone) {
            type.check(dateTimeUtc, DateTimeUtc);
            check.timezone(timezone);
            check.notUtcTimezone(timezone);

            return DateTime(moment.tz(dateTimeUtc.value, timezone));
        },

        toUtc(dateTime) {
            var dateTimeUtcString = toDateTimeMoment(dateTime).utc().toISOString();
            return dateTimeUtcComponent.parse(dateTimeUtcString);
        },

        fromJavascriptDate(dateTime, timezone) {
            type.check(dateTime, Date);
            check.timezone(timezone);
            check.notUtcTimezone(timezone);

            return parseDateTimeString(getDateTimeString(dateTime), timezone);
        },

        toJavascriptDate(dateTime) {
            var m = toDateTimeMoment(dateTime);
            return new Date(m.year(), m.month(), m.date(), m.hours(), m.minutes(), m.seconds(), m.milliseconds());
        },

        fromDate(date) {
            var m = toDateMoment(date);
            return DateTime(m);
        },

        toDate(dateTime) {
            var m = toDateTimeMoment(dateTime);
            return DateFactory(m);
        },

        fromDateAndTime(date, time) {
            var m = toDateMoment(date);
            var mTime = toTimeMoment(time);

            m.hours(mTime.hours());
            m.minutes(mTime.minutes());
            m.seconds(mTime.seconds());

            return DateTime(m);
        },

        toTime(dateTime) {
            var m = toDateTimeMoment(dateTime);
            return Time(m);
        },

        toMonth(date) {
            return Month(toDateTimeMoment(date));
        },

        fromShortTimeString(shortTimeString, timezone, localization) {
            var cultureInfo = ensureCultureInfo(localization.getCulture(), cultureInfoComponent);
            return parseDateTimeString(shortTimeString, timezone, cultureInfo.getDateTimeInfo().shortTimeFormat);
        },

        toShortTimeString(dateTime, localization) {
            return format(toDateTimeMoment(dateTime), localization, MomentLocalizationFormat.ShortTime.value, cultureInfoComponent);
        },

        fromTimeString(timeString, timezone, localization) {
            var cultureInfo = ensureCultureInfo(localization.getCulture(), cultureInfoComponent);
            return parseDateTimeString(timeString, timezone, cultureInfo.getDateTimeInfo().timeFormat);
        },

        toTimeString(dateTime, localization) {
            return format(toDateTimeMoment(dateTime), localization, MomentLocalizationFormat.Time.value, cultureInfoComponent);
        },

        fromDateString(dateString, timezone, localization) {
            var cultureInfo = ensureCultureInfo(localization.getCulture(), cultureInfoComponent);
            return parseDateTimeString(dateString, timezone, cultureInfo.getDateTimeInfo().dateFormat);
        },

        toDateString(dateTime, localization) {
            return format(toDateTimeMoment(dateTime), localization, MomentLocalizationFormat.Date.value, cultureInfoComponent);
        },

        isValidDateString(dateString, localization) {
            return isValidFormat(dateString, localization, 'dateFormat', cultureInfoComponent);
        },

        fromLongDateString(longDateString, timezone, localization) {
            var cultureInfo = ensureCultureInfo(localization.getCulture(), cultureInfoComponent);
            return parseDateTimeString(longDateString, timezone, cultureInfo.getDateTimeInfo().longDateFormat);
        },

        toLongDateString(dateTime, localization) {
            return format(toDateTimeMoment(dateTime), localization, MomentLocalizationFormat.LongDate.value, cultureInfoComponent);
        },

        fromDateTimeString(dateTimeString, timezone, localization) {
            var cultureInfo = ensureCultureInfo(localization.getCulture(), cultureInfoComponent);
            return parseDateTimeString(dateTimeString, timezone, cultureInfo.getDateTimeInfo().dateTimeFormat);
        },

        toDateTimeString(dateTime, localization) {
            return format(toDateTimeMoment(dateTime), localization, MomentLocalizationFormat.DateTime.value, cultureInfoComponent);
        },

        toDayNameString(dateTime, localization) {
            return format(toDateTimeMoment(dateTime), localization, MomentLocalizationFormat.Day.value, cultureInfoComponent);
        },

        toISOString(dateTime) {
            return toDateTimeMoment(dateTime).format(IsoFormat.Milliseconds.value);
        },

        toShortISOString(dateTime) {
            return toDateTimeMoment(dateTime).format(IsoFormat.Date.value);
        },

        toMonthISOString(dateTime) {
            return toDateTimeMoment(dateTime).format(IsoFormat.Month.value);
        },

        getYear(dateTime) {
            return toDateTimeMoment(dateTime).year();
        },

        getMonth(dateTime) {
            return toDateTimeMoment(dateTime).month();
        },

        getDate(dateTime) {
            return toDateTimeMoment(dateTime).date();
        },

        getDayOfWeek(dateTime) {
            return toDateTimeMoment(dateTime).day();
        },

        getHours(dateTime) {
            return toDateTimeMoment(dateTime).hours();
        },

        getMinutes(dateTime) {
            return toDateTimeMoment(dateTime).minutes();
        },

        getSeconds(dateTime) {
            return toDateTimeMoment(dateTime).seconds();
        },

        getMilliseconds(dateTime) {
            return toDateTimeMoment(dateTime).milliseconds();
        },

        getIsoStartOfWeek(dateTime) {
            const m = toDateTimeMoment(dateTime).startOf('isoWeek');
            return DateTime(m);
        },

        valueOf(dateTime) {
            return toDateTimeMoment(dateTime).valueOf();
        },

        clone(dateTime) {
            return DateTime(toDateTimeMoment(dateTime));
        },

        addYears(dateTime, years) {
            return add(dateTime, years, 'years');
        },

        addMonths(dateTime, months) {
            return add(dateTime, months, 'months');
        },

        addWeeks(dateTime, weeks) {
            return add(dateTime, weeks, 'weeks');
        },

        addDays(dateTime, days) {
            return add(dateTime, days, 'days');
        },

        addHours(dateTime, hours) {
            return add(dateTime, hours, 'hours');
        },

        addMinutes(dateTime, minutes) {
            return add(dateTime, minutes, 'minutes');
        },

        addSeconds(dateTime, seconds) {
            return add(dateTime, seconds, 'seconds');
        },

        addMilliseconds(dateTime, milliseconds) {
            return add(dateTime, milliseconds, 'milliseconds');
        },

        stripTime(dateTime) {
            var m = toDateTimeMoment(dateTime).startOf('day');
            return DateTime(m);
        },

        isEqual(dateTime1, dateTime2) {
            checkDateTimes(dateTime1, dateTime2);
            return toDateTimeMoment(dateTime1).isSame(toDateTimeMoment(dateTime2));
        },

        isLess(dateTime1, dateTime2) {
            checkDateTimes(dateTime1, dateTime2);
            return toDateTimeMoment(dateTime1).isBefore(toDateTimeMoment(dateTime2));
        },

        isGreater(dateTime1, dateTime2) {
            checkDateTimes(dateTime1, dateTime2);
            return toDateTimeMoment(dateTime1).isAfter(toDateTimeMoment(dateTime2));
        },

        isLessOrEqual,

        isGreaterOrEqual,

        isDayOfWeek(dateTime, isoDay) {
            type.check(isoDay, IsoDay);

            return toDateTimeMoment(dateTime).isoWeekday() === isoDay.value;
        },

        min(dateTime1, dateTime2) {
            return isLessOrEqual(dateTime1, dateTime2) ? dateTime1 : dateTime2;
        },

        max(dateTime1, dateTime2) {
            return isGreaterOrEqual(dateTime1, dateTime2) ? dateTime1 : dateTime2;
        },

        daysDiff(dateTime1, dateTime2) {
            checkDateTimes(dateTime1, dateTime2);
            return toDateTimeMoment(dateTime1).diff(toDateTimeMoment(dateTime2), 'days');
        },

        hoursDiff(dateTime1, dateTime2) {
            checkDateTimes(dateTime1, dateTime2);
            return toDateTimeMoment(dateTime1).diff(toDateTimeMoment(dateTime2), 'hours');
        },

        minutesDiff(dateTime1, dateTime2) {
            checkDateTimes(dateTime1, dateTime2);
            return toDateTimeMoment(dateTime1).diff(toDateTimeMoment(dateTime2), 'minutes');
        },

        secondsDiff(dateTime1, dateTime2) {
            checkDateTimes(dateTime1, dateTime2);
            return toDateTimeMoment(dateTime1).diff(toDateTimeMoment(dateTime2), 'seconds');
        },
    });
}

function parseDateTimeString(dateTimeString, timezone, formats = DATE_TIME_FORMATS) {
    check.string(dateTimeString);
    check.timezone(timezone);
    check.notUtcTimezone(timezone);

    const m = toMoment(dateTimeString, formats, timezone);
    return DateTime(m);
}

function toDateTimeMoment(dateTime) {
    type.check(dateTime, DateTime);
    return toMoment(dateTime.value, DATE_TIME_FORMATS, dateTime.timezone);
}

function checkDateTimes(dateTime1, dateTime2) {
    check.sameTimezones(dateTime1, dateTime2);
}

function add(dateTime, value, units) {
    check.number(value);

    const m = toDateTimeMoment(dateTime).add(value, units);
    return DateTime(m);
}

function isLessOrEqual(dateTime1, dateTime2) {
    checkDateTimes(dateTime1, dateTime2);
    return toDateTimeMoment(dateTime1).isSameOrBefore(toDateTimeMoment(dateTime2));
}

function isGreaterOrEqual(dateTime1, dateTime2) {
    checkDateTimes(dateTime1, dateTime2);
    return toDateTimeMoment(dateTime1).isSameOrAfter(toDateTimeMoment(dateTime2));
}
