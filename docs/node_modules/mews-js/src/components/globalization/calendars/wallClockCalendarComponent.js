import _ from 'lodash';
import { type } from '../../../utils';
import { WallClockDateComponent } from '../wallClockDates';
import { WallClockMonthComponent } from '../wallClockMonths';
import { CultureInfoComponent } from '../cultureInfos';

const WEEK_LENGTH = 7;

export default function WallClockCalendarComponent(wallClockDateComponent, wallClockMonthComponent, cultureInfoComponent) {
    type.check(wallClockDateComponent, WallClockDateComponent);
    type.check(wallClockMonthComponent, WallClockMonthComponent);
    type.check(cultureInfoComponent, CultureInfoComponent);

    return type.create(WallClockCalendarComponent, {
        getCurrentDate() {
            return wallClockDateComponent.today();
        },

        getMonthOfDate(date) {
            return wallClockDateComponent.toWallClockMonth(date);
        },

        getWeeksOfMonth(month, localization) {
            const dateTimeInfo = getDateTimeInfo(localization);
            const firstDayOfWeek = dateTimeInfo.firstDayOfWeek;

            const dates = wallClockMonthComponent.getDates(month);

            // align first week
            const firstDate = dates[0];
            const firstDateDayOfWeek = wallClockDateComponent.getDayOfWeek(firstDate);
            const normalizedFirstDateDayOfWeek = (firstDateDayOfWeek - firstDayOfWeek + WEEK_LENGTH) % WEEK_LENGTH;

            const firstLineDateCount = WEEK_LENGTH - normalizedFirstDateDayOfWeek;
            const firstLine = _.concat(
                _.times(WEEK_LENGTH - firstLineDateCount, _.constant(null)),
                _.take(dates, firstLineDateCount)
            );

            const rest = _.chain(dates).drop(firstLineDateCount).chunk(WEEK_LENGTH).value();
            const middleLines = _.initial(rest);

            let lastLine = _.last(rest);
            lastLine = _.concat(
                lastLine,
                _.times(WEEK_LENGTH - lastLine.length, _.constant(null))
            );

            return [firstLine, ...middleLines, lastLine];
        },

        getNextMonth(month) {
            return wallClockMonthComponent.next(month);
        },

        getPrevMonth(month) {
            return wallClockMonthComponent.prev(month);
        },

        getNextWeek(date) {
            return wallClockDateComponent.addWeeks(date, 1);
        },

        getPrevWeek(date) {
            return wallClockDateComponent.addWeeks(date, -1);
        },

        getNextDate(date) {
            return wallClockDateComponent.addDays(date, 1);
        },

        getPrevDate(date) {
            return wallClockDateComponent.addDays(date, -1);
        },

        addMonths(month, count) {
            return wallClockMonthComponent.addMonths(month, count);
        },

        subtractMonths(month, count) {
            return wallClockMonthComponent.addMonths(month, -count);
        },

        // returns array of day names, with first entry being first day of week according to given culture
        getDayNames(localization) {
            const dateTimeInfo = getDateTimeInfo(localization);

            const endDays = _.take(dateTimeInfo.dayMinNames, dateTimeInfo.firstDayOfWeek);
            const beginDays = _.drop(dateTimeInfo.dayMinNames, dateTimeInfo.firstDayOfWeek);
            return [...beginDays, ...endDays];
        },

        isMonthDisabled(month, { minDate = null, maxDate = null } = {}) {
            if (minDate) {
                const minMonth = wallClockDateComponent.toWallClockMonth(minDate);
                if (wallClockMonthComponent.isLess(month, minMonth)) {
                    return true;
                }
            }

            if (maxDate) {
                const maxMonth = wallClockDateComponent.toWallClockMonth(maxDate);
                if (wallClockMonthComponent.isGreater(month, maxMonth)) {
                    return true;
                }
            }

            return false;
        },

        isDateDisabled(date, { minDate = null, maxDate = null } = {}) {
            if (minDate && wallClockDateComponent.isLess(date, minDate)) {
                return true;
            }

            if (maxDate && wallClockDateComponent.isGreater(date, maxDate)) {
                return true;
            }

            return false;
        },

        getMonthName(month, localization) {
            return `${wallClockMonthComponent.toMonthString(month, localization)} ${wallClockMonthComponent.getYear(month)}`;
        },

        getDateNumber(date) {
            return wallClockDateComponent.getDate(date);
        },

        isDateEqual(date1, date2) {
            return wallClockDateComponent.isEqual(date1, date2);
        },

        isDateLess(date1, date2) {
            return wallClockDateComponent.isLess(date1, date2);
        },

        isDateGreater(date1, date2) {
            return wallClockDateComponent.isGreater(date1, date2);
        },

        isDateBetween(date, start, end) {
            return wallClockDateComponent.isGreaterOrEqual(date, start) && wallClockDateComponent.isLessOrEqual(date, end);
        },

        isValidDateString(dateString, localization) {
            return wallClockDateComponent.isValidDateString(dateString, localization);
        },

        getDateFromDateString(dateString, localization) {
            return wallClockDateComponent.fromDateString(dateString, localization);
        },

        getDateString(date, localization) {
            return wallClockDateComponent.toDateString(date, localization);
        },

        isMonthEqual(month1, month2) {
            return wallClockMonthComponent.isEqual(month1, month2);
        },

        isMonthLess(month1, month2) {
            return wallClockMonthComponent.isLess(month1, month2);
        },

        isMonthGreater(month1, month2) {
            return wallClockMonthComponent.isGreater(month1, month2);
        },

        getOrderedRange(date1, date2) {
            return [wallClockDateComponent.min(date1, date2), wallClockDateComponent.max(date1, date2)];
        },

        diffMonths(month1, month2) {
            return wallClockMonthComponent.diffMonths(month1, month2);
        },
    });

    function getDateTimeInfo(localization) {
        const cultureInfo = cultureInfoComponent.getByCode(localization.getCulture().getCode());
        return cultureInfo.getDateTimeInfo();
    }
}
