import _ from 'lodash';
import moment from 'moment-timezone';
import { check, type } from '../../../utils';
import CultureInfoComponent from '../cultureInfos/cultureInfoComponent';
import DateFactory from '../dates/date';
import { IsoFormat, DateTimePart, MomentLocalizationFormat, MonthNumber } from '../enums';
import { comparable, manipulable } from '../componentEnhancers';
import { format, parseString, toMoment } from '../utils';
import { toYearMoment } from '../years/yearComponent';
import Month from './month';

const PARTS = [
    DateTimePart.Year,
    DateTimePart.Month,
];

export default function MonthComponent(cultureInfoComponent) {
    type.check(cultureInfoComponent, CultureInfoComponent);

    let monthsDiffError;

    return type.create(MonthComponent,
        comparable(toMonthMoment),
        manipulable(Month, toMonthMoment, PARTS),
        {
            parse(monthString, timezone) {
                check.string(monthString);
                check.timezone(timezone);
                check.notUtcTimezone(timezone);

                const m = parseString(monthString, timezone, IsoFormat.Month.value);
                return Month(m);
            },

            current(timezone) {
                check.timezone(timezone);
                check.notUtcTimezone(timezone);

                const m = moment.tz(timezone);
                return Month(m);
            },

            fromYearAndMonthNumber(year, monthNumber) {
                type.check(monthNumber, MonthNumber);

                const m = toYearMoment(year);
                m.month(monthNumber.value - 1);
                return Month(m);
            },

            monthsDiff(month1, month2) {
                if (process.env.NODE_ENV !== 'production') { // eslint-disable-line no-process-env
                    if (!monthsDiffError) {
                        monthsDiffError = true;
                        console.error('Warning: monthsDiff() method is deprecated. Use diffMonths() instead.'); // eslint-disable-line no-console
                    }
                }
                return this.diffMonths(month1, month2);
            },

            next(month) {
                return this.addMonths(month, 1);
            },

            previous(month) {
                const m = toMonthMoment(month);
                m.subtract(1, 'months');
                return Month(m);
            },

            toString(month, localization) {
                return format(toMonthMoment(month), localization, MomentLocalizationFormat.Month.value, cultureInfoComponent);
            },

            getYear(month) {
                return toMonthMoment(month).year();
            },

            getMonth(month) {
                return toMonthMoment(month).month();
            },

            getDayCount(month) {
                return toMonthMoment(month).daysInMonth();
            },

            getDates(month) {
                var m = toMonthMoment(month);
                var dayCount = m.daysInMonth();
                var dates = _.times(dayCount, d => DateFactory(m.date(d + 1)));

                return dates;
            },
        }
    );
}

function toMonthMoment(month) {
    type.check(month, Month);
    return toMoment(month.value, IsoFormat.Month.value, month.timezone);
}
