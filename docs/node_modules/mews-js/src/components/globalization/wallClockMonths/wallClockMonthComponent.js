import _ from 'lodash';
import moment from 'moment-timezone';
import { type, check } from '../../../utils';
import { parseString, toMoment, format } from '../utils';
import { IsoFormat, DateTimePart, MomentLocalizationFormat } from '../enums';
import { comparable, manipulable } from '../componentEnhancers';
import CultureInfoComponent from '../cultureInfos/cultureInfoComponent';
import WallClockDate from '../wallClockDates/wallClockDate';
import WallClockMonth from './wallClockMonth';

const PARTS = [
    DateTimePart.Year,
    DateTimePart.Month,
];

export default function WallClockMonthComponent(cultureInfoComponent) {
    type.check(cultureInfoComponent, CultureInfoComponent);

    return type.create(WallClockMonthComponent,
        comparable(toWallClockMonthMoment),
        manipulable(WallClockMonth, toWallClockMonthMoment, PARTS),
        {
            parse(monthString) {
                check.string(monthString);

                const m = parseString(monthString, 'Etc/Utc', IsoFormat.Month.value);
                return WallClockMonth(m);
            },

            current() {
                const m = moment.utc();
                return WallClockMonth(m);
            },

            next(wallClockMonth) {
                const m = toWallClockMonthMoment(wallClockMonth);
                m.add(1, 'months');
                return WallClockMonth(m);
            },

            prev(wallClockMonth) {
                const m = toWallClockMonthMoment(wallClockMonth);
                m.subtract(1, 'months');
                return WallClockMonth(m);
            },

            getDates(wallClockMonth) {
                const m = toWallClockMonthMoment(wallClockMonth);
                var dayCount = m.daysInMonth();
                var dates = _.times(dayCount, dayNumber => WallClockDate(m.date(dayNumber + 1)));

                return dates;
            },

            getYear(wallClockMonth) {
                return toWallClockMonthMoment(wallClockMonth).year();
            },

            toMonthString(wallClockMonth, localization) {
                return format(toWallClockMonthMoment(wallClockMonth), localization, MomentLocalizationFormat.Month.value, cultureInfoComponent);
            },
        }
    );
}

export function toWallClockMonthMoment(date) {
    type.check(date, WallClockMonth);
    return toMoment(date.value, IsoFormat.Month.value);
}
