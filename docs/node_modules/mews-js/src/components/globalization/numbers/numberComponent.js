import _ from 'lodash';
import accounting from 'accounting-js';
import { type, check } from '../../../utils';
import { CultureInfoComponent } from '../cultureInfos';
import { Localization } from '../localizations';
import { Currency } from '../currencies';
import { CurrencySymbolPosition, CurrencySymbolSpacing } from '../../../enums';

export default function NumberComponent(cultureInfoComponent) {
    type.check(cultureInfoComponent, CultureInfoComponent);

    var getCachedNumberSettings = _.memoize(getNumberSettings);
    var getCachedCurrencyValueSettings = _.memoize(getCurrencyValueSettings);

    return type.create(NumberComponent, {
        format,
        unformat,

        formatPercent(number, localization, options = {}) {
            return format(number * 100, localization, options) + '%';
        },

        unformatPercent(number, localization) {
            return unformat(number, localization) / 100;
        },

        formatCurrencyValue(currencyValue, currency, localization, options = {}) {
            check.number(currencyValue);
            type.check(currency, Currency);
            type.check(localization, Localization);

            const settings = getCachedCurrencyValueSettings({
                ...options,
                currency,
                cultureCode: localization.getCulture().getCode(),
            });
            return accounting.formatMoney(currencyValue, settings);
        },
    });

    function format(number, localization, options = {}) {
        check.number(number);
        type.check(localization, Localization);
        const { precision = getPrecision(number), ...others } = options;

        var settings = getCachedNumberSettings({ ...others, cultureCode: localization.getCulture().getCode() });
        return accounting.formatMoney(number, { ...settings, precision });
    }

    function unformat(number, localization) {
        type.check(localization, Localization);

        const settings = getCachedNumberSettings({ cultureCode: localization.getCulture().getCode() });
        const fallback = NaN;

        return accounting.unformat(number, settings.decimal, fallback);
    }

    function getNumberSettings({ cultureCode, showPositiveSign = false }) {
        const cultureInfo = ensureCultureInfo(cultureCode);
        const numberInfo = cultureInfo.getNumberInfo();

        return {
            decimal: numberInfo.decimalSeparator,
            format: {
                pos: showPositiveSign ? '+%v' : '%v',
                neg: '-%v',
                zero: '%v',
            },
            thousand: numberInfo.groupSeparator,
        };
    }

    function getCurrencyValueSettings({ currency, cultureCode, precision = null, showPositiveSign = false, showSymbol = true }) {
        const cultureInfo = ensureCultureInfo(cultureCode);
        const currencyInfo = cultureInfo.getCurrencyInfo();

        const positiveFormat = showPositiveSign ? '+%v' : '%v';
        const negativeFormat = '-%v';
        const zeroFormat = '%v';

        return {
            decimal: currencyInfo.decimalSeparator,
            format: {
                pos: showSymbol ? appendCurrencySymbol(positiveFormat, currency, cultureCode) : positiveFormat,
                neg: showSymbol ? appendCurrencySymbol(negativeFormat, currency, cultureCode) : negativeFormat,
                zero: showSymbol ? appendCurrencySymbol(zeroFormat, currency, cultureCode) : zeroFormat,
            },
            precision: !_.isNull(precision) ? precision : currency.getPrecision(),
            symbol: currency.getSymbol(cultureCode),
            thousand: currencyInfo.groupSeparator,
        };
    }

    function appendCurrencySymbol(currencyFormat, currency, cultureCode) {
        const spacing = currency.getSymbolSpacing(cultureCode) === CurrencySymbolSpacing.Single ? ' ' : '';

        return currency.getSymbolPosition(cultureCode) === CurrencySymbolPosition.Prefix
            ? `%s${spacing}${currencyFormat}`
            : `${currencyFormat}${spacing}%s`;
    }

    function ensureCultureInfo(cultureCode) {
        const cultureInfo = cultureInfoComponent.getByCode(cultureCode);
        if (_.isNull(cultureInfo)) {
            throw new Error('Missing a culture info for the culture: ' + cultureCode);
        }

        return cultureInfo;
    }

    function getPrecision(number) {
        if (!isFinite(number)) {
            return 0;
        }

        let exp = 1;
        let precision = 0;
        while (Math.round(number * exp) / exp !== number) {
            exp *= 10; ++precision;
        }

        return precision;
    }
}
