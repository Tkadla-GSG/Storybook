import _ from 'lodash';
import moment from 'moment-timezone';
import { type, check } from '../../../utils';
import CultureInfoComponent from '../cultureInfos/cultureInfoComponent';
import Month from '../months/month';
import { IsoFormat, MomentLocalizationFormat, MonthNumber } from '../enums';
import { format, parseString, toMoment } from '../utils';
import Year from './year';

export default function YearComponent(cultureInfoComponent) {
    type.check(cultureInfoComponent, CultureInfoComponent);

    return type.create(YearComponent, {
        parse(yearString, timezone) {
            check.string(yearString);
            check.timezone(timezone);
            check.notUtcTimezone(timezone);

            const m = parseString(yearString, timezone, IsoFormat.Year.value);
            return Year(m);
        },

        current(timezone) {
            check.timezone(timezone);
            check.notUtcTimezone(timezone);

            const m = moment.tz(timezone);
            return Year(m);
        },

        toString(year, localization) {
            return format(toYearMoment(year), localization, MomentLocalizationFormat.Year.value, cultureInfoComponent);
        },

        getYear(year) {
            return toYearMoment(year).year();
        },

        getMonths(year) {
            const yearMoment = toYearMoment(year);
            const months = _.map(MonthNumber.enumValues, m => Month(yearMoment.month(m.value - 1)));

            return months;
        },

        next(year) {
            const m = toYearMoment(year).add(1, 'years');
            return Year(m);
        },

        previous(year) {
            const m = toYearMoment(year).subtract(1, 'years');
            return Year(m);
        },
    });
}

export function toYearMoment(year) {
    type.check(year, Year);
    return toMoment(year.value, IsoFormat.Year.value, year.timezone);
}
