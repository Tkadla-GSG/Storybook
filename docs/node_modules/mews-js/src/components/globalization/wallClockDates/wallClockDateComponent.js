import moment from 'moment-timezone';
import { type, check, getDateString } from '../../../utils';
import { toMoment, format, unformat, isValidFormat } from '../utils';
import { IsoFormat, DateTimePart, MomentLocalizationFormat } from '../enums';
import { comparable, manipulable } from '../componentEnhancers';
import CultureInfoComponent from '../cultureInfos/cultureInfoComponent';
import DateFactory from '../dates/date';
import WallClockMonth from '../wallClockMonths/wallClockMonth';
import WallClockDate from './wallClockDate';

const PARTS = [
    DateTimePart.Year,
    DateTimePart.Month,
    DateTimePart.Week,
    DateTimePart.Day,
];

export default function WallClockDateComponent(cultureInfoComponent) {
    type.check(cultureInfoComponent, CultureInfoComponent);

    return type.create(WallClockDateComponent,
        comparable(toWallClockDateMoment),
        manipulable(WallClockDate, toWallClockDateMoment, PARTS),
        {
            parse(dateString) {
                check.string(dateString);

                const m = toMoment(dateString, IsoFormat.Date.value);
                return WallClockDate(m);
            },

            today() {
                const m = moment.utc();
                return WallClockDate(m);
            },

            toWallClockMonth(date) {
                return WallClockMonth(toWallClockDateMoment(date));
            },

            fromJavascriptDate(javascriptDate) {
                type.check(javascriptDate, Date);

                const m = toMoment(getDateString(javascriptDate));
                return WallClockDate(m);
            },

            toJavascriptDate(date) {
                const m = toWallClockDateMoment(date);
                return new Date(Date.UTC(m.year(), m.month(), m.date()));
            },

            toTimezonedDate(wallClockDate, timezone) {
                type.check(wallClockDate, WallClockDate);
                check.timezone(timezone);
                check.notUtcTimezone(timezone);

                return DateFactory(moment.tz(wallClockDate.value, timezone));
            },

            toDateString(wallClockDate, localization) {
                return format(toWallClockDateMoment(wallClockDate), localization, MomentLocalizationFormat.Date.value, cultureInfoComponent);
            },

            fromDateString(wallClockDateString, localization) {
                return WallClockDate(unformat(wallClockDateString, localization, 'dateFormat', cultureInfoComponent));
            },

            isValidDateString(wallClockDateString, localization) {
                return isValidFormat(wallClockDateString, localization, 'dateFormat', cultureInfoComponent);
            },

            getDayOfWeek(wallClockDate) {
                return toWallClockDateMoment(wallClockDate).day();
            },

            getDate(wallClockDate) {
                return toWallClockDateMoment(wallClockDate).date();
            }
        }
    );
}

export function toWallClockDateMoment(date) {
    type.check(date, WallClockDate);
    return toMoment(date.value, IsoFormat.Date.value, date.timezone);
}
