import { check, type } from '../../../utils';
import CultureInfoComponent from '../cultureInfos/cultureInfoComponent';
import { format, parseString, toMoment, unformat, isValidFormat } from '../utils';
import { IsoFormat, DateTimePart, MomentLocalizationFormat } from '../enums';
import { manipulable } from '../componentEnhancers';
import Time from './time';

const TIME_ISO_FORMATS = [
    IsoFormat.TimeSeconds.value,
    IsoFormat.TimeMilliseconds.value,
    IsoFormat.TimeMicroseconds.value,
];

const PARTS = [
    DateTimePart.Hours,
    DateTimePart.Minutes,
    DateTimePart.Seconds,
];

export default function TimeComponent(cultureInfoComponent) {
    type.check(cultureInfoComponent, CultureInfoComponent);

    return type.create(TimeComponent,
        manipulable(Time, toTimeMoment, PARTS),
        {
            parse(timeString) {
                check.string(timeString);

                const m = parseString(timeString, 'Etc/Utc', TIME_ISO_FORMATS);
                return Time(m);
            },

            toString(time, localization) {
                return format(toTimeMoment(time), localization, MomentLocalizationFormat.Time.value, cultureInfoComponent);
            },

            fromString(timeString, localization) {
                return Time(unformat(timeString, localization, 'timeFormat', cultureInfoComponent));
            },

            isValidString(timeString, localization) {
                return isValidFormat(timeString, localization, 'timeFormat', cultureInfoComponent);
            },

            toShortString(time, localization) {
                return format(toTimeMoment(time), localization, MomentLocalizationFormat.ShortTime.value, cultureInfoComponent);
            },

            fromShortString(shortTimeString, localization) {
                return Time(unformat(shortTimeString, localization, 'shortTimeFormat', cultureInfoComponent));
            },

            isValidShortString(shortTimeString, localization) {
                return isValidFormat(shortTimeString, localization, 'shortTimeFormat', cultureInfoComponent);
            },

            getHour(time) {
                return toTimeMoment(time).hour();
            },

            getMinute(time) {
                return toTimeMoment(time).minute();
            },

            getSeconds(time) {
                return toTimeMoment(time).seconds();
            },

            getMilliseconds(time) {
                return toTimeMoment(time).milliseconds();
            },

            valueOf(time) {
                return toTimeMoment(time).valueOf();
            },

            isEqual(time1, time2) {
                return toTimeMoment(time1).isSame(toTimeMoment(time2));
            },

            isLess(time1, time2) {
                return toTimeMoment(time1).isBefore(toTimeMoment(time2));
            },

            isLessOrEqual,

            isGreater(time1, time2) {
                return toTimeMoment(time1).isAfter(toTimeMoment(time2));
            },

            isGreaterOrEqual,

            min(time1, time2) {
                return isLessOrEqual(time1, time2) ? time1 : time2;
            },

            max(time1, time2) {
                return isGreaterOrEqual(time1, time2) ? time1 : time2;
            },

            clone(time) {
                return Time(toTimeMoment(time));
            },
        }
    );
}

export function toTimeMoment(time) {
    type.check(time, Time);
    return toMoment(time.value, TIME_ISO_FORMATS, 'Etc/Utc');
}

function isLessOrEqual(time1, time2) {
    return toTimeMoment(time1).isSameOrBefore(toTimeMoment(time2));
}

function isGreaterOrEqual(time1, time2) {
    return toTimeMoment(time1).isSameOrAfter(toTimeMoment(time2));
}

