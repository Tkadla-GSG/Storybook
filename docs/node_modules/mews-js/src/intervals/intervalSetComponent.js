import type from '../utils/type';
import _ from 'lodash';
import Interval from './interval';
import IntervalComponent from './intervalComponent';

export default function IntervalSetComponent() {
    return type.create(IntervalSetComponent, {
        addSet(add = [], set = []) {
            let newSet = set;

            _.each(add, i => {
                newSet = this.addInterval(i, newSet);
            });

            return newSet;
        },

        addInterval(interval, set = []) {
            type.check(set, Array);
            type.check(interval, Interval);

            set.push(interval);

            const sorted = _.sortBy(set, i => i.low);
            const newSet = [sorted[0]];

            _.each(sorted, i => {
                const top = _.last(newSet);

                if (IntervalComponent().collides(i, top)) {
                    newSet[newSet.length - 1] = IntervalComponent().union(i, top);
                } else {
                    newSet.push(i);
                }
            });

            return newSet;
        },

        isEmpty(set = []) {
            return _.isEmpty(set) || _.every(set, i => IntervalComponent().isEmpty(i));
        },

        toArray(set) {
            return _.map(set, interval => ({ high: interval.high, low: interval.low }));
        },

        fromArray(array) {
            return _.map(array, r => new Interval(r));
        },
    });
}
