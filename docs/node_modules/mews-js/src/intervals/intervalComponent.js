import type from '../utils/type';
import _ from 'lodash';
import Interval from './interval';

export default function IntervalComponent() {
    return type.create(IntervalComponent, {
        isEmpty(interval) {
            type.check(interval, Interval);
            return _.isNil(interval.high) || _.isNil(interval.low);
        },

        union(a, b) {
            if (!collides(a, b)) {
                return new Interval();
            }

            const high = _.max([a.high, b.high]);
            const low = _.min([a.low, b.low]);

            return new Interval({ high, low });
        },

        /**
         * Returns set of intervals created by difference.
         * Difference is made in order of subtracting B from A.
         */
        difference(a, b) {
            const intervalIntersection = intersection(a, b);

            if (this.isEmpty(intervalIntersection)) {
                return [a];
            }

            if (this.isEqual(a, intervalIntersection)) {
                return [new Interval()];
            }

            if (this.contains(a, b)) {
                return [new Interval({ high: b.low, low: a.low }), new Interval({ high: a.high, low: b.high })];
            }

            if (a.high > b.high) {
                return [new Interval({ high: a.high, low: b.high })];
            }

            return [new Interval({ high: b.low, low: a.low })];
        },

        collides,

        intersection,

        /**
         * Is B contained in A
         */
        contains(a, b) {
            type.check(a, Interval);
            type.check(b, Interval);

            return _.inRange(b.high, a.low, a.high) && _.inRange(b.low, a.low, a.high);
        },

        isEqual(a, b) {
            type.check(a, Interval);
            type.check(b, Interval);

            return a.high === b.high && a.low === b.low;
        },
    });
}

function collides(a, b) {
    type.check(a, Interval);
    type.check(b, Interval);

    return (
        _.inRange(a.high, b.low, b.high) || _.inRange(a.low, b.low, b.high)
        || _.inRange(b.high, a.low, a.high) || _.inRange(b.low, a.low, a.high)
    );
}

function intersection(a, b) {
    if (!collides(a, b)) {
        return new Interval();
    }

    const high = _.min([a.high, b.high]);
    const low = _.max([a.low, b.low]);

    return new Interval({ high, low });
}
