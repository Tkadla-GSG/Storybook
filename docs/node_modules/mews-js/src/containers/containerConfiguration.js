import _ from 'lodash';
import deepFreeze from 'deep-freeze-strict';
import { type } from '../utils';

export default function ContainerConfiguration() {
    var components = {};

    var containerConfiguration = Object.create(ContainerConfiguration.prototype);

    _.assign(containerConfiguration, {
        register(component, dependencyTypes = [], ...params) {
            type.checkType(component);
            checkNotRegistered(component.name);

            _.forEach(dependencyTypes, t => {
                type.checkType(t);

                if (!components[t.name]) {
                    throw new Error(`Dependent component is not registered yet: '${t.name}' in '${component.name}'`);
                }
            });

            components[component.name] = {
                component,
                params,
                dependencyTypes: _.map(dependencyTypes, t => t.name),
            };

            return this;
        },

        extend(configuration) {
            type.check(configuration, ContainerConfiguration);

            _.forEach(configuration.components, (c, typeName) => {
                checkNotRegistered(typeName);
                components[typeName] = c;
            });

            return this;
        },
    });

    Object.defineProperty(containerConfiguration, 'components', {
        get() {
            return { ...components };
        },
    });

    return deepFreeze(containerConfiguration);

    function checkNotRegistered(typeName) {
        if (components[typeName]) {
            throw new Error(`Component is already registered: '${typeName}'`);
        }
    }
}
