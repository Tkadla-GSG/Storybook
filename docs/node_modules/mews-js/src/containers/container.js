import _ from 'lodash';
import deepFreeze from 'deep-freeze-strict';
import { type } from '../utils';
import ContainerConfiguration from './containerConfiguration';

export default function Container(containerConfiguration) {
    type.check(containerConfiguration, ContainerConfiguration);

    var components = containerConfiguration.components;
    var instances = {};

    var container = Object.create(Container.prototype);

    /**
     * This creates property getters on lowerFirst component type names
     * i.e if `DummyType` was registered in configuration, then `container.dummyType` will be
     * lazy-evalued getter for according component.
     */
    var componentsDescriptor = _.transform(components, (acc, c, componentType) => {
        var lowerFirstType = _.lowerFirst(componentType);
        acc[lowerFirstType] = { get: () => get(componentType) };
    }, {});
    Object.defineProperties(container, componentsDescriptor);

    return deepFreeze(container);

    function get(componentType) {
        if (!instances[componentType]) {
            var component = components[componentType];
            var dependencies = _.map(component.dependencyTypes, t => get(t));
            var instance = component.component(...dependencies, ...component.params);

            if (!type.is(instance, component.component)) {
                throw new Error(`Component is not of registered type: '${componentType}'`);
            }

            instances[componentType] = instance;
        }

        return instances[componentType];
    }
}
