import type from '../utils/type';
import _ from 'lodash';

export default function enumify(enumeration, values = {}) {
    type.checkType(enumeration);

    if (!_.isPlainObject(values)) {
        throw TypeError('Values of enumeration expected as object');
    }

    const enumValues = initEnumValues(values);
    const enumProperties = _.keyBy(enumValues, 'name');
    _.assign(enumeration, {
        ...enumProperties,
        enumValues,
        getByName(name) {
            return _.find(enumValues, v => v.name === name);
        },
        getByValue(value) {
            return _.find(enumValues, x => x.value === value);
        },
        toString() {
            return enumeration.name;
        },
    });

    Object.freeze(enumeration);

    function initEnumValues(args) {
        return _.map(args, (val, key) => {
            let mapped = {};

            if (val.hasOwnProperty('value')) {
                mapped = {
                    name: key,
                    ...val,
                };
            } else {
                mapped = {
                    name: key,
                    value: val,
                };
            }

            mapped.toString = function toString() {
                return enumeration.name + key;
            };

            return type.create(enumeration, mapped);
        });
    }
}

export function toLocalizationKey(enumeration) {
    return enumeration.toString();
}
