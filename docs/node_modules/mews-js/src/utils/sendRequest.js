import _ from 'lodash';
import fetch from 'isomorphic-fetch';
import { HttpStatusCode } from '../enums';
import { BusinessError, NetworkError, NotAuthorizedError, NotFoundError, ResponseError, TimeoutError } from '../errors';

export default function sendRequest(
    url,
    {
        accept = 'application/json',
        credentials = 'omit',
        method = 'POST',
    } = {},
    data = null
) {
    let init = {
        credentials,
        method,
        headers: {
            Accept: accept,
            'Content-Type': 'application/json',
        },
    };
    if (data instanceof FormData) {
        init.body = data;
    } else if (data) {
        init.body = JSON.stringify(data);
    }

    return fetch(url, init)
        .catch(error => {
            // fetch throws TypeError on network errors
            if (error instanceof TypeError) {
                throw new NetworkError(error.message);
            }

            throw error;
        })
        .then(checkStatus);
}

function checkStatus(response) {
    if (response.status === HttpStatusCode.NotFound.value) {
        throw createError(NotFoundError, response);
    }

    if (response.status === HttpStatusCode.Timeout.value) {
        throw createError(TimeoutError, response);
    }

    const contentType = _.toLower(response.headers.get('content-type'));
    if (!_.startsWith(contentType, 'application/json')) {
        return response.text().then(text => {
            throw new ResponseError('Unexpected response: ' + text);
        });
    }

    return response.json().then(data => {
        if (response.status === HttpStatusCode.NotAuthorized.value) {
            throw createError(NotAuthorizedError, response, data);
        }

        if (response.status === HttpStatusCode.Forbidden.value) {
            throw createError(BusinessError, response, data);
        }

        if (response.ok) {
            return data;
        }

        throw createError(Error, response, data);
    });
}

function createError(ErrorType, response, data = {}) {
    var message = _.get(data, 'Message', response.statusText);
    var error = new ErrorType(message);
    error.response = response;
    error.data = data;
    return error;
}
