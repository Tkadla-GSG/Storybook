'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = sendRequest;

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _isomorphicFetch = require('isomorphic-fetch');

var _isomorphicFetch2 = _interopRequireDefault(_isomorphicFetch);

var _enums = require('../enums');

var _errors = require('../errors');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function sendRequest(url) {
    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref$accept = _ref.accept,
        accept = _ref$accept === undefined ? 'application/json' : _ref$accept,
        _ref$credentials = _ref.credentials,
        credentials = _ref$credentials === undefined ? 'omit' : _ref$credentials,
        _ref$method = _ref.method,
        method = _ref$method === undefined ? 'POST' : _ref$method;

    var data = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

    var init = {
        credentials: credentials,
        method: method,
        headers: {
            Accept: accept,
            'Content-Type': 'application/json'
        }
    };
    if (data instanceof FormData) {
        init.body = data;
    } else if (data) {
        init.body = JSON.stringify(data);
    }

    return (0, _isomorphicFetch2.default)(url, init).catch(function (error) {
        // fetch throws TypeError on network errors
        if (error instanceof TypeError) {
            throw new _errors.NetworkError(error.message);
        }

        throw error;
    }).then(checkStatus);
}

function checkStatus(response) {
    if (response.status === _enums.HttpStatusCode.NotFound.value) {
        throw createError(_errors.NotFoundError, response);
    }

    if (response.status === _enums.HttpStatusCode.Timeout.value) {
        throw createError(_errors.TimeoutError, response);
    }

    var contentType = _lodash2.default.toLower(response.headers.get('content-type'));
    if (!_lodash2.default.startsWith(contentType, 'application/json')) {
        return response.text().then(function (text) {
            throw new _errors.ResponseError('Unexpected response: ' + text);
        });
    }

    return response.json().then(function (data) {
        if (response.status === _enums.HttpStatusCode.NotAuthorized.value) {
            throw createError(_errors.NotAuthorizedError, response, data);
        }

        if (response.status === _enums.HttpStatusCode.Forbidden.value) {
            throw createError(_errors.BusinessError, response, data);
        }

        if (response.ok) {
            return data;
        }

        throw createError(Error, response, data);
    });
}

function createError(ErrorType, response) {
    var data = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    var message = _lodash2.default.get(data, 'Message', response.statusText);
    var error = new ErrorType(message);
    error.response = response;
    error.data = data;
    return error;
}