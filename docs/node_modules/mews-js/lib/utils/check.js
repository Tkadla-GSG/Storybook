'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _momentTimezone = require('moment-timezone');

var _momentTimezone2 = _interopRequireDefault(_momentTimezone);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var BANNED_TIMEZONES = ['etc/utc', 'etc/universal', 'etc/zulu', 'utc', 'universal', 'zulu', 'etc/uct', 'uct'];

exports.default = {
    notUtcTimezone: function notUtcTimezone(timezone) {
        var normalizedTimezone = _lodash2.default.toLower(timezone);
        if (_lodash2.default.some(BANNED_TIMEZONES, function (t) {
            return t === normalizedTimezone;
        })) {
            throw new Error('UTC timezone is not allowed.');
        }
    },
    timezone: function timezone(_timezone) {
        if (_lodash2.default.isNull(_momentTimezone2.default.tz.zone(_timezone))) {
            throw new Error('Unknown timezone identifier: ' + _timezone);
        }
    },
    string: function string(_string) {
        if (!_lodash2.default.isString(_string)) {
            throw new TypeError('Expected to be a string.');
        }
    },
    number: function number(_number) {
        if (!_lodash2.default.isNumber(_number)) {
            throw new TypeError('Expected a number: "' + _number + '"');
        }
    },
    data: function data(object) {
        if (!_lodash2.default.isObject(object)) {
            throw new TypeError('Expected the data to be an object.');
        }
    },
    sameTimezones: function sameTimezones(entity1, entity2) {
        if (entity1.timezone !== entity2.timezone) {
            throw new Error('Entities are in different timezones.');
        }
    }
};