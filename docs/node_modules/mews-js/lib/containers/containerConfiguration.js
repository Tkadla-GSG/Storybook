'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = ContainerConfiguration;

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _deepFreezeStrict = require('deep-freeze-strict');

var _deepFreezeStrict2 = _interopRequireDefault(_deepFreezeStrict);

var _utils = require('../utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ContainerConfiguration() {
    var components = {};

    var containerConfiguration = Object.create(ContainerConfiguration.prototype);

    _lodash2.default.assign(containerConfiguration, {
        register: function register(component) {
            for (var _len = arguments.length, params = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
                params[_key - 2] = arguments[_key];
            }

            var dependencyTypes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

            _utils.type.checkType(component);
            checkNotRegistered(component.name);

            _lodash2.default.forEach(dependencyTypes, function (t) {
                _utils.type.checkType(t);

                if (!components[t.name]) {
                    throw new Error('Dependent component is not registered yet: \'' + t.name + '\' in \'' + component.name + '\'');
                }
            });

            components[component.name] = {
                component: component,
                params: params,
                dependencyTypes: _lodash2.default.map(dependencyTypes, function (t) {
                    return t.name;
                })
            };

            return this;
        },
        extend: function extend(configuration) {
            _utils.type.check(configuration, ContainerConfiguration);

            _lodash2.default.forEach(configuration.components, function (c, typeName) {
                checkNotRegistered(typeName);
                components[typeName] = c;
            });

            return this;
        }
    });

    Object.defineProperty(containerConfiguration, 'components', {
        get: function get() {
            return _extends({}, components);
        }
    });

    return (0, _deepFreezeStrict2.default)(containerConfiguration);

    function checkNotRegistered(typeName) {
        if (components[typeName]) {
            throw new Error('Component is already registered: \'' + typeName + '\'');
        }
    }
}