'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = Container;

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _deepFreezeStrict = require('deep-freeze-strict');

var _deepFreezeStrict2 = _interopRequireDefault(_deepFreezeStrict);

var _utils = require('../utils');

var _containerConfiguration = require('./containerConfiguration');

var _containerConfiguration2 = _interopRequireDefault(_containerConfiguration);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function Container(containerConfiguration) {
    _utils.type.check(containerConfiguration, _containerConfiguration2.default);

    var components = containerConfiguration.components;
    var instances = {};

    var container = Object.create(Container.prototype);

    /**
     * This creates property getters on lowerFirst component type names
     * i.e if `DummyType` was registered in configuration, then `container.dummyType` will be
     * lazy-evalued getter for according component.
     */
    var componentsDescriptor = _lodash2.default.transform(components, function (acc, c, componentType) {
        var lowerFirstType = _lodash2.default.lowerFirst(componentType);
        acc[lowerFirstType] = { get: function get() {
                return _get(componentType);
            } };
    }, {});
    Object.defineProperties(container, componentsDescriptor);

    return (0, _deepFreezeStrict2.default)(container);

    function _get(componentType) {
        if (!instances[componentType]) {
            var component = components[componentType];
            var dependencies = _lodash2.default.map(component.dependencyTypes, function (t) {
                return _get(t);
            });
            var instance = component.component.apply(component, _toConsumableArray(dependencies).concat(_toConsumableArray(component.params)));

            if (!_utils.type.is(instance, component.component)) {
                throw new Error('Component is not of registered type: \'' + componentType + '\'');
            }

            instances[componentType] = instance;
        }

        return instances[componentType];
    }
}