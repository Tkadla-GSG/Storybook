'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = YearComponent;
exports.toYearMoment = toYearMoment;

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _momentTimezone = require('moment-timezone');

var _momentTimezone2 = _interopRequireDefault(_momentTimezone);

var _utils = require('../../../utils');

var _cultureInfoComponent = require('../cultureInfos/cultureInfoComponent');

var _cultureInfoComponent2 = _interopRequireDefault(_cultureInfoComponent);

var _month = require('../months/month');

var _month2 = _interopRequireDefault(_month);

var _enums = require('../enums');

var _utils2 = require('../utils');

var _year = require('./year');

var _year2 = _interopRequireDefault(_year);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function YearComponent(cultureInfoComponent) {
    _utils.type.check(cultureInfoComponent, _cultureInfoComponent2.default);

    return _utils.type.create(YearComponent, {
        parse: function parse(yearString, timezone) {
            _utils.check.string(yearString);
            _utils.check.timezone(timezone);
            _utils.check.notUtcTimezone(timezone);

            var m = (0, _utils2.parseString)(yearString, timezone, _enums.IsoFormat.Year.value);
            return (0, _year2.default)(m);
        },
        current: function current(timezone) {
            _utils.check.timezone(timezone);
            _utils.check.notUtcTimezone(timezone);

            var m = _momentTimezone2.default.tz(timezone);
            return (0, _year2.default)(m);
        },
        toString: function toString(year, localization) {
            return (0, _utils2.format)(toYearMoment(year), localization, _enums.MomentLocalizationFormat.Year.value, cultureInfoComponent);
        },
        getYear: function getYear(year) {
            return toYearMoment(year).year();
        },
        getMonths: function getMonths(year) {
            var yearMoment = toYearMoment(year);
            var months = _lodash2.default.map(_enums.MonthNumber.enumValues, function (m) {
                return (0, _month2.default)(yearMoment.month(m.value - 1));
            });

            return months;
        },
        next: function next(year) {
            var m = toYearMoment(year).add(1, 'years');
            return (0, _year2.default)(m);
        },
        previous: function previous(year) {
            var m = toYearMoment(year).subtract(1, 'years');
            return (0, _year2.default)(m);
        }
    });
}

function toYearMoment(year) {
    _utils.type.check(year, _year2.default);
    return (0, _utils2.toMoment)(year.value, _enums.IsoFormat.Year.value, year.timezone);
}