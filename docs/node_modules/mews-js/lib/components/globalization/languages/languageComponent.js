'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = LanguageComponent;

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _utils = require('../../../utils');

var _data = require('../data');

var _language = require('./language');

var _language2 = _interopRequireDefault(_language);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function LanguageComponent(dataComponent) {
    _utils.type.check(dataComponent, _data.DataComponent);

    var languages = {};
    var defaultLanguageCode = null;

    return _utils.type.create(LanguageComponent, {
        getDefault: function getDefault() {
            if (_lodash2.default.isNull(defaultLanguageCode)) {
                var defaultLanguageData = _lodash2.default.find(dataComponent.getLanguages(), 'isDefault');

                if (!defaultLanguageData) {
                    throw new Error('There is no language set as default.');
                }

                buildLanguageChain(defaultLanguageData);
                defaultLanguageCode = defaultLanguageData.code;
            }

            return languages[defaultLanguageCode];
        },
        getByCode: function getByCode(code) {
            if (!languages[code]) {
                var languageData = getLanguageData(code);

                if (!languageData) {
                    throw new Error('Unknown language: "' + code + '"');
                }

                buildLanguageChain(languageData);
            }

            return languages[code] || null;
        },
        getAll: function getAll() {
            var languagesData = dataComponent.getLanguages();
            if (_lodash2.default.size(languages) !== _lodash2.default.size(languagesData)) {
                var missingLanguagesData = _lodash2.default.reject(languagesData, function (l) {
                    return languages[l.code];
                });
                _lodash2.default.each(missingLanguagesData, function (l) {
                    // it could have been added as fallback already
                    if (!languages[l]) {
                        buildLanguageChain(l);
                    }
                });
            }

            return languages;
        }
    });

    function buildLanguageChain(fromLanguageData) {
        var languageDataChain = [fromLanguageData];
        var nextCode = fromLanguageData.fallbackLanguageCode;
        var previousCode = fromLanguageData.code;
        var fallbackLanguage = null;

        while (!_lodash2.default.isNull(nextCode)) {
            if (languages[nextCode]) {
                fallbackLanguage = languages[nextCode];
                break;
            }

            var nextLanguageData = getLanguageData(nextCode);

            if (!nextLanguageData) {
                throw new Error('Unknown fallback language: "' + nextCode + '" (for "' + previousCode + '")');
            }

            if (containsLanguageData(languageDataChain, nextLanguageData)) {
                throw new Error('Languages fallback chain is not acyclic');
            }

            languageDataChain.push(nextLanguageData);
            previousCode = nextCode;
            nextCode = nextLanguageData.fallbackLanguageCode;
        }

        _lodash2.default.forEachRight(languageDataChain, function (_ref) {
            var code = _ref.code,
                englishName = _ref.englishName,
                isDefault = _ref.isDefault,
                localName = _ref.localName;

            languages[code] = (0, _language2.default)({
                code: code,
                englishName: englishName,
                isDefault: isDefault,
                localName: localName
            }, fallbackLanguage);

            fallbackLanguage = languages[code];
        });
    }

    function getLanguageData(code) {
        return _lodash2.default.find(dataComponent.getLanguages(), function (l) {
            return l.code === code;
        });
    }

    function containsLanguageData(container, _ref2) {
        var code = _ref2.code;

        return _lodash2.default.some(container, function (l) {
            return l.code === code;
        });
    }
}