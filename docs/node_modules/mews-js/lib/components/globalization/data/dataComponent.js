'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = DataComponent;

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _deepFreezeStrict = require('deep-freeze-strict');

var _deepFreezeStrict2 = _interopRequireDefault(_deepFreezeStrict);

var _utils = require('../../../utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function DataComponent(initialData) {
    _utils.check.data(initialData);
    var dataSource = (0, _deepFreezeStrict2.default)(_lodash2.default.cloneDeep(initialData));

    return _utils.type.create(DataComponent, {
        getLanguages: function getLanguages() {
            return dataSource.languages;
        },
        getCountries: function getCountries() {
            return dataSource.countries;
        },
        getCultures: function getCultures() {
            return dataSource.cultures;
        },
        getCurrencies: function getCurrencies() {
            return dataSource.currencies;
        },
        getTexts: function getTexts() {
            return dataSource.texts;
        },
        getCultureInfos: function getCultureInfos() {
            return dataSource.cultureInfos;
        },
        addData: function addData(data) {
            _utils.check.data(data);
            var newDataSource = _lodash2.default.clone(dataSource);

            _lodash2.default.forEach(data, function (values, key) {
                if (_lodash2.default.isArray(newDataSource[key])) {
                    newDataSource[key] = [].concat(_toConsumableArray(newDataSource[key]), _toConsumableArray(values));
                } else {
                    newDataSource[key] = _extends({}, newDataSource[key], values);
                }
            });

            dataSource = (0, _deepFreezeStrict2.default)(newDataSource);
        }
    });
}