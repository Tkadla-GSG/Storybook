'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = MonthComponent;

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _momentTimezone = require('moment-timezone');

var _momentTimezone2 = _interopRequireDefault(_momentTimezone);

var _utils = require('../../../utils');

var _cultureInfoComponent = require('../cultureInfos/cultureInfoComponent');

var _cultureInfoComponent2 = _interopRequireDefault(_cultureInfoComponent);

var _date = require('../dates/date');

var _date2 = _interopRequireDefault(_date);

var _enums = require('../enums');

var _componentEnhancers = require('../componentEnhancers');

var _utils2 = require('../utils');

var _yearComponent = require('../years/yearComponent');

var _month = require('./month');

var _month2 = _interopRequireDefault(_month);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var PARTS = [_enums.DateTimePart.Year, _enums.DateTimePart.Month];

function MonthComponent(cultureInfoComponent) {
    _utils.type.check(cultureInfoComponent, _cultureInfoComponent2.default);

    var monthsDiffError = void 0;

    return _utils.type.create(MonthComponent, (0, _componentEnhancers.comparable)(toMonthMoment), (0, _componentEnhancers.manipulable)(_month2.default, toMonthMoment, PARTS), {
        parse: function parse(monthString, timezone) {
            _utils.check.string(monthString);
            _utils.check.timezone(timezone);
            _utils.check.notUtcTimezone(timezone);

            var m = (0, _utils2.parseString)(monthString, timezone, _enums.IsoFormat.Month.value);
            return (0, _month2.default)(m);
        },
        current: function current(timezone) {
            _utils.check.timezone(timezone);
            _utils.check.notUtcTimezone(timezone);

            var m = _momentTimezone2.default.tz(timezone);
            return (0, _month2.default)(m);
        },
        fromYearAndMonthNumber: function fromYearAndMonthNumber(year, monthNumber) {
            _utils.type.check(monthNumber, _enums.MonthNumber);

            var m = (0, _yearComponent.toYearMoment)(year);
            m.month(monthNumber.value - 1);
            return (0, _month2.default)(m);
        },
        monthsDiff: function monthsDiff(month1, month2) {
            if (process.env.NODE_ENV !== 'production') {
                // eslint-disable-line no-process-env
                if (!monthsDiffError) {
                    monthsDiffError = true;
                    console.error('Warning: monthsDiff() method is deprecated. Use diffMonths() instead.'); // eslint-disable-line no-console
                }
            }
            return this.diffMonths(month1, month2);
        },
        next: function next(month) {
            return this.addMonths(month, 1);
        },
        previous: function previous(month) {
            var m = toMonthMoment(month);
            m.subtract(1, 'months');
            return (0, _month2.default)(m);
        },
        toString: function toString(month, localization) {
            return (0, _utils2.format)(toMonthMoment(month), localization, _enums.MomentLocalizationFormat.Month.value, cultureInfoComponent);
        },
        getYear: function getYear(month) {
            return toMonthMoment(month).year();
        },
        getMonth: function getMonth(month) {
            return toMonthMoment(month).month();
        },
        getDayCount: function getDayCount(month) {
            return toMonthMoment(month).daysInMonth();
        },
        getDates: function getDates(month) {
            var m = toMonthMoment(month);
            var dayCount = m.daysInMonth();
            var dates = _lodash2.default.times(dayCount, function (d) {
                return (0, _date2.default)(m.date(d + 1));
            });

            return dates;
        }
    });
}

function toMonthMoment(month) {
    _utils.type.check(month, _month2.default);
    return (0, _utils2.toMoment)(month.value, _enums.IsoFormat.Month.value, month.timezone);
}