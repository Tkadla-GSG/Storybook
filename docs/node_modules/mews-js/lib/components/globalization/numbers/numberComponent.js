'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = NumberComponent;

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _accountingJs = require('accounting-js');

var _accountingJs2 = _interopRequireDefault(_accountingJs);

var _utils = require('../../../utils');

var _cultureInfos = require('../cultureInfos');

var _localizations = require('../localizations');

var _currencies = require('../currencies');

var _enums = require('../../../enums');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function NumberComponent(cultureInfoComponent) {
    _utils.type.check(cultureInfoComponent, _cultureInfos.CultureInfoComponent);

    var getCachedNumberSettings = _lodash2.default.memoize(getNumberSettings);
    var getCachedCurrencyValueSettings = _lodash2.default.memoize(getCurrencyValueSettings);

    return _utils.type.create(NumberComponent, {
        format: format,
        unformat: unformat,

        formatPercent: function formatPercent(number, localization) {
            var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

            return format(number * 100, localization, options) + '%';
        },
        unformatPercent: function unformatPercent(number, localization) {
            return unformat(number, localization) / 100;
        },
        formatCurrencyValue: function formatCurrencyValue(currencyValue, currency, localization) {
            var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

            _utils.check.number(currencyValue);
            _utils.type.check(currency, _currencies.Currency);
            _utils.type.check(localization, _localizations.Localization);

            var settings = getCachedCurrencyValueSettings(_extends({}, options, {
                currency: currency,
                cultureCode: localization.getCulture().getCode()
            }));
            return _accountingJs2.default.formatMoney(currencyValue, settings);
        }
    });

    function format(number, localization) {
        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

        _utils.check.number(number);
        _utils.type.check(localization, _localizations.Localization);

        var _options$precision = options.precision,
            precision = _options$precision === undefined ? getPrecision(number) : _options$precision,
            others = _objectWithoutProperties(options, ['precision']);

        var settings = getCachedNumberSettings(_extends({}, others, { cultureCode: localization.getCulture().getCode() }));
        return _accountingJs2.default.formatMoney(number, _extends({}, settings, { precision: precision }));
    }

    function unformat(number, localization) {
        _utils.type.check(localization, _localizations.Localization);

        var settings = getCachedNumberSettings({ cultureCode: localization.getCulture().getCode() });
        var fallback = NaN;

        return _accountingJs2.default.unformat(number, settings.decimal, fallback);
    }

    function getNumberSettings(_ref) {
        var cultureCode = _ref.cultureCode,
            _ref$showPositiveSign = _ref.showPositiveSign,
            showPositiveSign = _ref$showPositiveSign === undefined ? false : _ref$showPositiveSign;

        var cultureInfo = ensureCultureInfo(cultureCode);
        var numberInfo = cultureInfo.getNumberInfo();

        return {
            decimal: numberInfo.decimalSeparator,
            format: {
                pos: showPositiveSign ? '+%v' : '%v',
                neg: '-%v',
                zero: '%v'
            },
            thousand: numberInfo.groupSeparator
        };
    }

    function getCurrencyValueSettings(_ref2) {
        var currency = _ref2.currency,
            cultureCode = _ref2.cultureCode,
            _ref2$precision = _ref2.precision,
            precision = _ref2$precision === undefined ? null : _ref2$precision,
            _ref2$showPositiveSig = _ref2.showPositiveSign,
            showPositiveSign = _ref2$showPositiveSig === undefined ? false : _ref2$showPositiveSig,
            _ref2$showSymbol = _ref2.showSymbol,
            showSymbol = _ref2$showSymbol === undefined ? true : _ref2$showSymbol;

        var cultureInfo = ensureCultureInfo(cultureCode);
        var currencyInfo = cultureInfo.getCurrencyInfo();

        var positiveFormat = showPositiveSign ? '+%v' : '%v';
        var negativeFormat = '-%v';
        var zeroFormat = '%v';

        return {
            decimal: currencyInfo.decimalSeparator,
            format: {
                pos: showSymbol ? appendCurrencySymbol(positiveFormat, currency, cultureCode) : positiveFormat,
                neg: showSymbol ? appendCurrencySymbol(negativeFormat, currency, cultureCode) : negativeFormat,
                zero: showSymbol ? appendCurrencySymbol(zeroFormat, currency, cultureCode) : zeroFormat
            },
            precision: !_lodash2.default.isNull(precision) ? precision : currency.getPrecision(),
            symbol: currency.getSymbol(cultureCode),
            thousand: currencyInfo.groupSeparator
        };
    }

    function appendCurrencySymbol(currencyFormat, currency, cultureCode) {
        var spacing = currency.getSymbolSpacing(cultureCode) === _enums.CurrencySymbolSpacing.Single ? ' ' : '';

        return currency.getSymbolPosition(cultureCode) === _enums.CurrencySymbolPosition.Prefix ? '%s' + spacing + currencyFormat : '' + currencyFormat + spacing + '%s';
    }

    function ensureCultureInfo(cultureCode) {
        var cultureInfo = cultureInfoComponent.getByCode(cultureCode);
        if (_lodash2.default.isNull(cultureInfo)) {
            throw new Error('Missing a culture info for the culture: ' + cultureCode);
        }

        return cultureInfo;
    }

    function getPrecision(number) {
        if (!isFinite(number)) {
            return 0;
        }

        var exp = 1;
        var precision = 0;
        while (Math.round(number * exp) / exp !== number) {
            exp *= 10;++precision;
        }

        return precision;
    }
}