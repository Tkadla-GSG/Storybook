'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

exports.default = ensureCultureInfo;

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _momentTimezone = require('moment-timezone');

var _momentTimezone2 = _interopRequireDefault(_momentTimezone);

var _moment = require('moment');

var _type = require('../../../utils/type');

var _type2 = _interopRequireDefault(_type);

var _cultureInfoComponent = require('../cultureInfos/cultureInfoComponent');

var _cultureInfoComponent2 = _interopRequireDefault(_cultureInfoComponent);

var _culture = require('../cultures/culture');

var _culture2 = _interopRequireDefault(_culture);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ensureCultureInfo(culture, cultureInfoComponent) {
    _type2.default.check(cultureInfoComponent, _cultureInfoComponent2.default);
    _type2.default.check(culture, _culture2.default);

    var cultureInfo = cultureInfoComponent.getByCode(culture.getCode());
    if (_lodash2.default.isNull(cultureInfo)) {
        throw new Error('Missing a locale for the culture: ' + culture.getCode());
    }

    if (_lodash2.default.isNull((0, _moment.localeData)(cultureInfo.getCode()))) {
        defineMomentLocale(cultureInfo);
    }

    return cultureInfo;
}

function defineMomentLocale(cultureInfo) {
    var dateTime = cultureInfo.getDateTimeInfo();

    var _dateTime$meridiem = _slicedToArray(dateTime.meridiem, 2),
        am = _dateTime$meridiem[0],
        pm = _dateTime$meridiem[1];

    _momentTimezone2.default.defineLocale(cultureInfo.getCode(), {
        months: dateTime.monthNames,
        monthsShort: dateTime.monthShortNames,
        weekdays: dateTime.dayNames,
        weekdaysShort: dateTime.dayShortNames,
        weekdaysMin: dateTime.dayMinNames,
        longDateFormat: {
            LT: dateTime.shortTimeFormat,
            LTS: dateTime.timeFormat,
            L: dateTime.dateFormat,
            LL: dateTime.longDateFormat,
            LLL: dateTime.dateTimeFormat
        },
        week: {
            dow: dateTime.firstDayOfWeek
        },
        meridiemParse: new RegExp(am + '|' + pm),
        isPM: function isPM(value) {
            return value === pm;
        }
    });
}