'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = Currency;

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _utils = require('../../../utils');

var _enums = require('../../../enums');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function Currency(data) {
    var symbolPosition = _enums.CurrencySymbolPosition.getByName(data.symbolPosition);
    var symbolSpacing = _enums.CurrencySymbolSpacing.getByName(data.symbolSpacing);

    var cultureFormats = _lodash2.default.transform(data.cultureFormats, function (result, format, cultureName) {
        result[cultureName] = {
            symbol: format.symbol,
            symbolPosition: _enums.CurrencySymbolPosition.getByName(format.symbolPosition),
            symbolSpacing: _enums.CurrencySymbolSpacing.getByName(format.symbolSpacing)
        };
    });

    return _utils.type.create(Currency, {
        getCode: function getCode() {
            return data.code;
        },
        getPrecision: function getPrecision() {
            return data.precision;
        },
        getSymbol: function getSymbol() {
            var cultureCode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

            return _lodash2.default.get(cultureFormats, [cultureCode, 'symbol'], data.symbol);
        },
        getSymbolPosition: function getSymbolPosition() {
            var cultureCode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

            return _lodash2.default.get(cultureFormats, [cultureCode, 'symbolPosition'], symbolPosition);
        },
        getSymbolSpacing: function getSymbolSpacing() {
            var cultureCode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

            return _lodash2.default.get(cultureFormats, [cultureCode, 'symbolSpacing'], symbolSpacing);
        },
        getCultureFormats: function getCultureFormats() {
            return cultureFormats;
        }
    });
}