'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = DateTimeComponent;

var _momentTimezone = require('moment-timezone');

var _momentTimezone2 = _interopRequireDefault(_momentTimezone);

var _utils = require('../../../utils');

var _enums = require('../../../enums');

var _dateTimeUtcComponent = require('../dateTimesUtc/dateTimeUtcComponent');

var _dateTimeUtcComponent2 = _interopRequireDefault(_dateTimeUtcComponent);

var _cultureInfoComponent = require('../cultureInfos/cultureInfoComponent');

var _cultureInfoComponent2 = _interopRequireDefault(_cultureInfoComponent);

var _enums2 = require('../enums');

var _utils2 = require('../utils');

var _dateTime = require('./dateTime');

var _dateTime2 = _interopRequireDefault(_dateTime);

var _dateTimeUtc = require('../dateTimesUtc/dateTimeUtc');

var _dateTimeUtc2 = _interopRequireDefault(_dateTimeUtc);

var _date = require('../dates/date');

var _date2 = _interopRequireDefault(_date);

var _time = require('../times/time');

var _time2 = _interopRequireDefault(_time);

var _month = require('../months/month');

var _month2 = _interopRequireDefault(_month);

var _dateComponent = require('../dates/dateComponent');

var _timeComponent = require('../times/timeComponent');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var DATE_TIME_FORMATS = [_enums2.IsoFormat.Date.value, _enums2.IsoFormat.Seconds.value, _enums2.IsoFormat.Milliseconds.value, _enums2.IsoFormat.Microseconds.value];

function DateTimeComponent(dateTimeUtcComponent, cultureInfoComponent) {
    _utils.type.check(dateTimeUtcComponent, _dateTimeUtcComponent2.default);
    _utils.type.check(cultureInfoComponent, _cultureInfoComponent2.default);

    return _utils.type.create(DateTimeComponent, {
        parse: function parse(dateTimeString, timezone) {
            return parseDateTimeString(dateTimeString, timezone);
        },
        now: function now(timezone) {
            _utils.check.timezone(timezone);
            _utils.check.notUtcTimezone(timezone);

            var m = _momentTimezone2.default.tz(timezone);
            return (0, _dateTime2.default)(m);
        },
        fromUtc: function fromUtc(dateTimeUtc, timezone) {
            _utils.type.check(dateTimeUtc, _dateTimeUtc2.default);
            _utils.check.timezone(timezone);
            _utils.check.notUtcTimezone(timezone);

            return (0, _dateTime2.default)(_momentTimezone2.default.tz(dateTimeUtc.value, timezone));
        },
        toUtc: function toUtc(dateTime) {
            var dateTimeUtcString = toDateTimeMoment(dateTime).utc().toISOString();
            return dateTimeUtcComponent.parse(dateTimeUtcString);
        },
        fromJavascriptDate: function fromJavascriptDate(dateTime, timezone) {
            _utils.type.check(dateTime, Date);
            _utils.check.timezone(timezone);
            _utils.check.notUtcTimezone(timezone);

            return parseDateTimeString((0, _utils.getDateTimeString)(dateTime), timezone);
        },
        toJavascriptDate: function toJavascriptDate(dateTime) {
            var m = toDateTimeMoment(dateTime);
            return new Date(m.year(), m.month(), m.date(), m.hours(), m.minutes(), m.seconds(), m.milliseconds());
        },
        fromDate: function fromDate(date) {
            var m = (0, _dateComponent.toDateMoment)(date);
            return (0, _dateTime2.default)(m);
        },
        toDate: function toDate(dateTime) {
            var m = toDateTimeMoment(dateTime);
            return (0, _date2.default)(m);
        },
        fromDateAndTime: function fromDateAndTime(date, time) {
            var m = (0, _dateComponent.toDateMoment)(date);
            var mTime = (0, _timeComponent.toTimeMoment)(time);

            m.hours(mTime.hours());
            m.minutes(mTime.minutes());
            m.seconds(mTime.seconds());

            return (0, _dateTime2.default)(m);
        },
        toTime: function toTime(dateTime) {
            var m = toDateTimeMoment(dateTime);
            return (0, _time2.default)(m);
        },
        toMonth: function toMonth(date) {
            return (0, _month2.default)(toDateTimeMoment(date));
        },
        fromShortTimeString: function fromShortTimeString(shortTimeString, timezone, localization) {
            var cultureInfo = (0, _utils2.ensureCultureInfo)(localization.getCulture(), cultureInfoComponent);
            return parseDateTimeString(shortTimeString, timezone, cultureInfo.getDateTimeInfo().shortTimeFormat);
        },
        toShortTimeString: function toShortTimeString(dateTime, localization) {
            return (0, _utils2.format)(toDateTimeMoment(dateTime), localization, _enums2.MomentLocalizationFormat.ShortTime.value, cultureInfoComponent);
        },
        fromTimeString: function fromTimeString(timeString, timezone, localization) {
            var cultureInfo = (0, _utils2.ensureCultureInfo)(localization.getCulture(), cultureInfoComponent);
            return parseDateTimeString(timeString, timezone, cultureInfo.getDateTimeInfo().timeFormat);
        },
        toTimeString: function toTimeString(dateTime, localization) {
            return (0, _utils2.format)(toDateTimeMoment(dateTime), localization, _enums2.MomentLocalizationFormat.Time.value, cultureInfoComponent);
        },
        fromDateString: function fromDateString(dateString, timezone, localization) {
            var cultureInfo = (0, _utils2.ensureCultureInfo)(localization.getCulture(), cultureInfoComponent);
            return parseDateTimeString(dateString, timezone, cultureInfo.getDateTimeInfo().dateFormat);
        },
        toDateString: function toDateString(dateTime, localization) {
            return (0, _utils2.format)(toDateTimeMoment(dateTime), localization, _enums2.MomentLocalizationFormat.Date.value, cultureInfoComponent);
        },
        isValidDateString: function isValidDateString(dateString, localization) {
            return (0, _utils2.isValidFormat)(dateString, localization, 'dateFormat', cultureInfoComponent);
        },
        fromLongDateString: function fromLongDateString(longDateString, timezone, localization) {
            var cultureInfo = (0, _utils2.ensureCultureInfo)(localization.getCulture(), cultureInfoComponent);
            return parseDateTimeString(longDateString, timezone, cultureInfo.getDateTimeInfo().longDateFormat);
        },
        toLongDateString: function toLongDateString(dateTime, localization) {
            return (0, _utils2.format)(toDateTimeMoment(dateTime), localization, _enums2.MomentLocalizationFormat.LongDate.value, cultureInfoComponent);
        },
        fromDateTimeString: function fromDateTimeString(dateTimeString, timezone, localization) {
            var cultureInfo = (0, _utils2.ensureCultureInfo)(localization.getCulture(), cultureInfoComponent);
            return parseDateTimeString(dateTimeString, timezone, cultureInfo.getDateTimeInfo().dateTimeFormat);
        },
        toDateTimeString: function toDateTimeString(dateTime, localization) {
            return (0, _utils2.format)(toDateTimeMoment(dateTime), localization, _enums2.MomentLocalizationFormat.DateTime.value, cultureInfoComponent);
        },
        toDayNameString: function toDayNameString(dateTime, localization) {
            return (0, _utils2.format)(toDateTimeMoment(dateTime), localization, _enums2.MomentLocalizationFormat.Day.value, cultureInfoComponent);
        },
        toISOString: function toISOString(dateTime) {
            return toDateTimeMoment(dateTime).format(_enums2.IsoFormat.Milliseconds.value);
        },
        toShortISOString: function toShortISOString(dateTime) {
            return toDateTimeMoment(dateTime).format(_enums2.IsoFormat.Date.value);
        },
        toMonthISOString: function toMonthISOString(dateTime) {
            return toDateTimeMoment(dateTime).format(_enums2.IsoFormat.Month.value);
        },
        getYear: function getYear(dateTime) {
            return toDateTimeMoment(dateTime).year();
        },
        getMonth: function getMonth(dateTime) {
            return toDateTimeMoment(dateTime).month();
        },
        getDate: function getDate(dateTime) {
            return toDateTimeMoment(dateTime).date();
        },
        getDayOfWeek: function getDayOfWeek(dateTime) {
            return toDateTimeMoment(dateTime).day();
        },
        getHours: function getHours(dateTime) {
            return toDateTimeMoment(dateTime).hours();
        },
        getMinutes: function getMinutes(dateTime) {
            return toDateTimeMoment(dateTime).minutes();
        },
        getSeconds: function getSeconds(dateTime) {
            return toDateTimeMoment(dateTime).seconds();
        },
        getMilliseconds: function getMilliseconds(dateTime) {
            return toDateTimeMoment(dateTime).milliseconds();
        },
        getIsoStartOfWeek: function getIsoStartOfWeek(dateTime) {
            var m = toDateTimeMoment(dateTime).startOf('isoWeek');
            return (0, _dateTime2.default)(m);
        },
        valueOf: function valueOf(dateTime) {
            return toDateTimeMoment(dateTime).valueOf();
        },
        clone: function clone(dateTime) {
            return (0, _dateTime2.default)(toDateTimeMoment(dateTime));
        },
        addYears: function addYears(dateTime, years) {
            return add(dateTime, years, 'years');
        },
        addMonths: function addMonths(dateTime, months) {
            return add(dateTime, months, 'months');
        },
        addWeeks: function addWeeks(dateTime, weeks) {
            return add(dateTime, weeks, 'weeks');
        },
        addDays: function addDays(dateTime, days) {
            return add(dateTime, days, 'days');
        },
        addHours: function addHours(dateTime, hours) {
            return add(dateTime, hours, 'hours');
        },
        addMinutes: function addMinutes(dateTime, minutes) {
            return add(dateTime, minutes, 'minutes');
        },
        addSeconds: function addSeconds(dateTime, seconds) {
            return add(dateTime, seconds, 'seconds');
        },
        addMilliseconds: function addMilliseconds(dateTime, milliseconds) {
            return add(dateTime, milliseconds, 'milliseconds');
        },
        stripTime: function stripTime(dateTime) {
            var m = toDateTimeMoment(dateTime).startOf('day');
            return (0, _dateTime2.default)(m);
        },
        isEqual: function isEqual(dateTime1, dateTime2) {
            checkDateTimes(dateTime1, dateTime2);
            return toDateTimeMoment(dateTime1).isSame(toDateTimeMoment(dateTime2));
        },
        isLess: function isLess(dateTime1, dateTime2) {
            checkDateTimes(dateTime1, dateTime2);
            return toDateTimeMoment(dateTime1).isBefore(toDateTimeMoment(dateTime2));
        },
        isGreater: function isGreater(dateTime1, dateTime2) {
            checkDateTimes(dateTime1, dateTime2);
            return toDateTimeMoment(dateTime1).isAfter(toDateTimeMoment(dateTime2));
        },


        isLessOrEqual: isLessOrEqual,

        isGreaterOrEqual: isGreaterOrEqual,

        isDayOfWeek: function isDayOfWeek(dateTime, isoDay) {
            _utils.type.check(isoDay, _enums.IsoDay);

            return toDateTimeMoment(dateTime).isoWeekday() === isoDay.value;
        },
        min: function min(dateTime1, dateTime2) {
            return isLessOrEqual(dateTime1, dateTime2) ? dateTime1 : dateTime2;
        },
        max: function max(dateTime1, dateTime2) {
            return isGreaterOrEqual(dateTime1, dateTime2) ? dateTime1 : dateTime2;
        },
        daysDiff: function daysDiff(dateTime1, dateTime2) {
            checkDateTimes(dateTime1, dateTime2);
            return toDateTimeMoment(dateTime1).diff(toDateTimeMoment(dateTime2), 'days');
        },
        hoursDiff: function hoursDiff(dateTime1, dateTime2) {
            checkDateTimes(dateTime1, dateTime2);
            return toDateTimeMoment(dateTime1).diff(toDateTimeMoment(dateTime2), 'hours');
        },
        minutesDiff: function minutesDiff(dateTime1, dateTime2) {
            checkDateTimes(dateTime1, dateTime2);
            return toDateTimeMoment(dateTime1).diff(toDateTimeMoment(dateTime2), 'minutes');
        },
        secondsDiff: function secondsDiff(dateTime1, dateTime2) {
            checkDateTimes(dateTime1, dateTime2);
            return toDateTimeMoment(dateTime1).diff(toDateTimeMoment(dateTime2), 'seconds');
        }
    });
}

function parseDateTimeString(dateTimeString, timezone) {
    var formats = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DATE_TIME_FORMATS;

    _utils.check.string(dateTimeString);
    _utils.check.timezone(timezone);
    _utils.check.notUtcTimezone(timezone);

    var m = (0, _utils2.toMoment)(dateTimeString, formats, timezone);
    return (0, _dateTime2.default)(m);
}

function toDateTimeMoment(dateTime) {
    _utils.type.check(dateTime, _dateTime2.default);
    return (0, _utils2.toMoment)(dateTime.value, DATE_TIME_FORMATS, dateTime.timezone);
}

function checkDateTimes(dateTime1, dateTime2) {
    _utils.check.sameTimezones(dateTime1, dateTime2);
}

function add(dateTime, value, units) {
    _utils.check.number(value);

    var m = toDateTimeMoment(dateTime).add(value, units);
    return (0, _dateTime2.default)(m);
}

function isLessOrEqual(dateTime1, dateTime2) {
    checkDateTimes(dateTime1, dateTime2);
    return toDateTimeMoment(dateTime1).isSameOrBefore(toDateTimeMoment(dateTime2));
}

function isGreaterOrEqual(dateTime1, dateTime2) {
    checkDateTimes(dateTime1, dateTime2);
    return toDateTimeMoment(dateTime1).isSameOrAfter(toDateTimeMoment(dateTime2));
}