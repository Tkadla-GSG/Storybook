'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = TextComponent;

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _utils = require('../../../utils');

var _data = require('../data');

var _localizations = require('../localizations');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function TextComponent(dataComponent) {
    _utils.type.check(dataComponent, _data.DataComponent);

    return _utils.type.create(TextComponent, {
        get: function get(key, localization, substitutes) {
            var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

            if (!_lodash2.default.isString(key) || _lodash2.default.isEmpty(key)) {
                throw new TypeError('Expected the key to be a non-empty string.');
            }

            _utils.type.check(localization, _localizations.Localization);

            var language = localization.getLanguage();
            return translateToLanguage(key, language, substitutes, options);
        }
    });

    function splitKeyToWords(key) {
        return key.split(/(?=[A-Z])/).join(' ');
    }

    function getScopeForLanguage(language) {
        return _lodash2.default.get(dataComponent.getTexts(), [language.getCode()], {});
    }

    function translateToLanguage(key, language, substitutes, _ref) {
        var _ref$fallbackToKey = _ref.fallbackToKey,
            fallbackToKey = _ref$fallbackToKey === undefined ? true : _ref$fallbackToKey;

        if (_lodash2.default.isNull(language)) {
            return fallbackToKey ? splitKeyToWords(key) : null;
        }

        var scope = getScopeForLanguage(language);
        var translation = scope[key];
        if (_lodash2.default.isEmpty(translation)) {
            return translateToLanguage(key, language.getFallbackLanguage(), substitutes, { fallbackToKey: fallbackToKey });
        }

        _lodash2.default.forEach(substitutes, function (value, placeholder) {
            translation = translation.replace('{' + placeholder + '}', value);
        });

        return translation;
    }
}