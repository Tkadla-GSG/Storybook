'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = TimeComponent;
exports.toTimeMoment = toTimeMoment;

var _utils = require('../../../utils');

var _cultureInfoComponent = require('../cultureInfos/cultureInfoComponent');

var _cultureInfoComponent2 = _interopRequireDefault(_cultureInfoComponent);

var _utils2 = require('../utils');

var _enums = require('../enums');

var _componentEnhancers = require('../componentEnhancers');

var _time = require('./time');

var _time2 = _interopRequireDefault(_time);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var TIME_ISO_FORMATS = [_enums.IsoFormat.TimeSeconds.value, _enums.IsoFormat.TimeMilliseconds.value, _enums.IsoFormat.TimeMicroseconds.value];

var PARTS = [_enums.DateTimePart.Hours, _enums.DateTimePart.Minutes, _enums.DateTimePart.Seconds];

function TimeComponent(cultureInfoComponent) {
    _utils.type.check(cultureInfoComponent, _cultureInfoComponent2.default);

    return _utils.type.create(TimeComponent, (0, _componentEnhancers.manipulable)(_time2.default, toTimeMoment, PARTS), {
        parse: function parse(timeString) {
            _utils.check.string(timeString);

            var m = (0, _utils2.parseString)(timeString, 'Etc/Utc', TIME_ISO_FORMATS);
            return (0, _time2.default)(m);
        },
        toString: function toString(time, localization) {
            return (0, _utils2.format)(toTimeMoment(time), localization, _enums.MomentLocalizationFormat.Time.value, cultureInfoComponent);
        },
        fromString: function fromString(timeString, localization) {
            return (0, _time2.default)((0, _utils2.unformat)(timeString, localization, 'timeFormat', cultureInfoComponent));
        },
        isValidString: function isValidString(timeString, localization) {
            return (0, _utils2.isValidFormat)(timeString, localization, 'timeFormat', cultureInfoComponent);
        },
        toShortString: function toShortString(time, localization) {
            return (0, _utils2.format)(toTimeMoment(time), localization, _enums.MomentLocalizationFormat.ShortTime.value, cultureInfoComponent);
        },
        fromShortString: function fromShortString(shortTimeString, localization) {
            return (0, _time2.default)((0, _utils2.unformat)(shortTimeString, localization, 'shortTimeFormat', cultureInfoComponent));
        },
        isValidShortString: function isValidShortString(shortTimeString, localization) {
            return (0, _utils2.isValidFormat)(shortTimeString, localization, 'shortTimeFormat', cultureInfoComponent);
        },
        getHour: function getHour(time) {
            return toTimeMoment(time).hour();
        },
        getMinute: function getMinute(time) {
            return toTimeMoment(time).minute();
        },
        getSeconds: function getSeconds(time) {
            return toTimeMoment(time).seconds();
        },
        getMilliseconds: function getMilliseconds(time) {
            return toTimeMoment(time).milliseconds();
        },
        valueOf: function valueOf(time) {
            return toTimeMoment(time).valueOf();
        },
        isEqual: function isEqual(time1, time2) {
            return toTimeMoment(time1).isSame(toTimeMoment(time2));
        },
        isLess: function isLess(time1, time2) {
            return toTimeMoment(time1).isBefore(toTimeMoment(time2));
        },


        isLessOrEqual: isLessOrEqual,

        isGreater: function isGreater(time1, time2) {
            return toTimeMoment(time1).isAfter(toTimeMoment(time2));
        },


        isGreaterOrEqual: isGreaterOrEqual,

        min: function min(time1, time2) {
            return isLessOrEqual(time1, time2) ? time1 : time2;
        },
        max: function max(time1, time2) {
            return isGreaterOrEqual(time1, time2) ? time1 : time2;
        },
        clone: function clone(time) {
            return (0, _time2.default)(toTimeMoment(time));
        }
    });
}

function toTimeMoment(time) {
    _utils.type.check(time, _time2.default);
    return (0, _utils2.toMoment)(time.value, TIME_ISO_FORMATS, 'Etc/Utc');
}

function isLessOrEqual(time1, time2) {
    return toTimeMoment(time1).isSameOrBefore(toTimeMoment(time2));
}

function isGreaterOrEqual(time1, time2) {
    return toTimeMoment(time1).isSameOrAfter(toTimeMoment(time2));
}