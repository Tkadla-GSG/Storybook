'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = DateComponent;
exports.toDateMoment = toDateMoment;

var _momentTimezone = require('moment-timezone');

var _momentTimezone2 = _interopRequireDefault(_momentTimezone);

var _utils = require('../../../utils');

var _cultureInfoComponent = require('../cultureInfos/cultureInfoComponent');

var _cultureInfoComponent2 = _interopRequireDefault(_cultureInfoComponent);

var _year = require('../years/year');

var _year2 = _interopRequireDefault(_year);

var _month = require('../months/month');

var _month2 = _interopRequireDefault(_month);

var _enums = require('../enums');

var _utils2 = require('../utils');

var _date = require('./date');

var _date2 = _interopRequireDefault(_date);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function DateComponent(cultureInfoComponent) {
    _utils.type.check(cultureInfoComponent, _cultureInfoComponent2.default);

    return _utils.type.create(DateComponent, {
        parse: function parse(dateString, timezone) {
            _utils.check.string(dateString);
            _utils.check.timezone(timezone);
            _utils.check.notUtcTimezone(timezone);

            var m = (0, _utils2.parseString)(dateString, timezone, _enums.IsoFormat.Date.value);
            return (0, _date2.default)(m);
        },
        today: function today(timezone) {
            _utils.check.timezone(timezone);
            _utils.check.notUtcTimezone(timezone);

            var m = _momentTimezone2.default.tz(timezone);
            return (0, _date2.default)(m);
        },
        toMonth: function toMonth(date) {
            return (0, _month2.default)(toDateMoment(date));
        },
        toYear: function toYear(date) {
            return (0, _year2.default)(toDateMoment(date));
        },
        toString: function toString(date, localization) {
            return (0, _utils2.format)(toDateMoment(date), localization, _enums.MomentLocalizationFormat.Date.value, cultureInfoComponent);
        },
        fromString: function fromString(dateString, timezone, localization) {
            return (0, _date2.default)((0, _utils2.unformat)(dateString, localization, 'dateFormat', cultureInfoComponent, timezone));
        },
        isValidString: function isValidString(dateString, localization) {
            return (0, _utils2.isValidFormat)(dateString, localization, 'dateFormat', cultureInfoComponent);
        },
        toDayNameString: function toDayNameString(date, localization) {
            return (0, _utils2.format)(toDateMoment(date), localization, _enums.MomentLocalizationFormat.Day.value, cultureInfoComponent);
        },
        toISOString: function toISOString(date) {
            return toDateMoment(date).format(_enums.IsoFormat.Date.value);
        },
        getYear: function getYear(date) {
            return toDateMoment(date).year();
        },
        getMonth: function getMonth(date) {
            return toDateMoment(date).month();
        },
        getDate: function getDate(date) {
            return toDateMoment(date).date();
        },
        getDayOfWeek: function getDayOfWeek(date) {
            return toDateMoment(date).day();
        },
        valueOf: function valueOf(date) {
            return toDateMoment(date).valueOf();
        },
        addDays: function addDays(date, days) {
            _utils.check.number(days);

            var m = toDateMoment(date).add(days, 'days');
            return (0, _date2.default)(m);
        },
        addWeeks: function addWeeks(date, weeks) {
            _utils.check.number(weeks);
            var m = toDateMoment(date).add(weeks, 'weeks');
            return (0, _date2.default)(m);
        },
        daysDiff: function daysDiff(date1, date2) {
            _utils.check.sameTimezones(date1, date2);
            return toDateMoment(date1).diff(toDateMoment(date2), 'days');
        },
        isEqual: function isEqual(date1, date2) {
            _utils.check.sameTimezones(date1, date2);
            return toDateMoment(date1).isSame(toDateMoment(date2));
        },
        isLess: function isLess(date1, date2) {
            _utils.check.sameTimezones(date1, date2);
            return toDateMoment(date1).isBefore(toDateMoment(date2));
        },


        isLessOrEqual: isLessOrEqual,

        isGreater: function isGreater(date1, date2) {
            _utils.check.sameTimezones(date1, date2);
            return toDateMoment(date1).isAfter(toDateMoment(date2));
        },


        isGreaterOrEqual: isGreaterOrEqual,

        min: function min(date1, date2) {
            return isLessOrEqual(date1, date2) ? date1 : date2;
        },
        max: function max(date1, date2) {
            return isGreaterOrEqual(date1, date2) ? date1 : date2;
        },
        clone: function clone(date) {
            return (0, _date2.default)(toDateMoment(date));
        }
    });
}

function toDateMoment(date) {
    _utils.type.check(date, _date2.default);
    return (0, _utils2.toMoment)(date.value, _enums.IsoFormat.Date.value, date.timezone);
}

function isLessOrEqual(date1, date2) {
    _utils.check.sameTimezones(date1, date2);
    return toDateMoment(date1).isSameOrBefore(toDateMoment(date2));
}

function isGreaterOrEqual(date1, date2) {
    _utils.check.sameTimezones(date1, date2);
    return toDateMoment(date1).isSameOrAfter(toDateMoment(date2));
}