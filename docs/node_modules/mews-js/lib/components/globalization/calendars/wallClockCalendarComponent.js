'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = WallClockCalendarComponent;

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _utils = require('../../../utils');

var _wallClockDates = require('../wallClockDates');

var _wallClockMonths = require('../wallClockMonths');

var _cultureInfos = require('../cultureInfos');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var WEEK_LENGTH = 7;

function WallClockCalendarComponent(wallClockDateComponent, wallClockMonthComponent, cultureInfoComponent) {
    _utils.type.check(wallClockDateComponent, _wallClockDates.WallClockDateComponent);
    _utils.type.check(wallClockMonthComponent, _wallClockMonths.WallClockMonthComponent);
    _utils.type.check(cultureInfoComponent, _cultureInfos.CultureInfoComponent);

    return _utils.type.create(WallClockCalendarComponent, {
        getCurrentDate: function getCurrentDate() {
            return wallClockDateComponent.today();
        },
        getMonthOfDate: function getMonthOfDate(date) {
            return wallClockDateComponent.toWallClockMonth(date);
        },
        getWeeksOfMonth: function getWeeksOfMonth(month, localization) {
            var dateTimeInfo = getDateTimeInfo(localization);
            var firstDayOfWeek = dateTimeInfo.firstDayOfWeek;

            var dates = wallClockMonthComponent.getDates(month);

            // align first week
            var firstDate = dates[0];
            var firstDateDayOfWeek = wallClockDateComponent.getDayOfWeek(firstDate);
            var normalizedFirstDateDayOfWeek = (firstDateDayOfWeek - firstDayOfWeek + WEEK_LENGTH) % WEEK_LENGTH;

            var firstLineDateCount = WEEK_LENGTH - normalizedFirstDateDayOfWeek;
            var firstLine = _lodash2.default.concat(_lodash2.default.times(WEEK_LENGTH - firstLineDateCount, _lodash2.default.constant(null)), _lodash2.default.take(dates, firstLineDateCount));

            var rest = _lodash2.default.chain(dates).drop(firstLineDateCount).chunk(WEEK_LENGTH).value();
            var middleLines = _lodash2.default.initial(rest);

            var lastLine = _lodash2.default.last(rest);
            lastLine = _lodash2.default.concat(lastLine, _lodash2.default.times(WEEK_LENGTH - lastLine.length, _lodash2.default.constant(null)));

            return [firstLine].concat(_toConsumableArray(middleLines), [lastLine]);
        },
        getNextMonth: function getNextMonth(month) {
            return wallClockMonthComponent.next(month);
        },
        getPrevMonth: function getPrevMonth(month) {
            return wallClockMonthComponent.prev(month);
        },
        getNextWeek: function getNextWeek(date) {
            return wallClockDateComponent.addWeeks(date, 1);
        },
        getPrevWeek: function getPrevWeek(date) {
            return wallClockDateComponent.addWeeks(date, -1);
        },
        getNextDate: function getNextDate(date) {
            return wallClockDateComponent.addDays(date, 1);
        },
        getPrevDate: function getPrevDate(date) {
            return wallClockDateComponent.addDays(date, -1);
        },
        addMonths: function addMonths(month, count) {
            return wallClockMonthComponent.addMonths(month, count);
        },
        subtractMonths: function subtractMonths(month, count) {
            return wallClockMonthComponent.addMonths(month, -count);
        },


        // returns array of day names, with first entry being first day of week according to given culture
        getDayNames: function getDayNames(localization) {
            var dateTimeInfo = getDateTimeInfo(localization);

            var endDays = _lodash2.default.take(dateTimeInfo.dayMinNames, dateTimeInfo.firstDayOfWeek);
            var beginDays = _lodash2.default.drop(dateTimeInfo.dayMinNames, dateTimeInfo.firstDayOfWeek);
            return [].concat(_toConsumableArray(beginDays), _toConsumableArray(endDays));
        },
        isMonthDisabled: function isMonthDisabled(month) {
            var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
                _ref$minDate = _ref.minDate,
                minDate = _ref$minDate === undefined ? null : _ref$minDate,
                _ref$maxDate = _ref.maxDate,
                maxDate = _ref$maxDate === undefined ? null : _ref$maxDate;

            if (minDate) {
                var minMonth = wallClockDateComponent.toWallClockMonth(minDate);
                if (wallClockMonthComponent.isLess(month, minMonth)) {
                    return true;
                }
            }

            if (maxDate) {
                var maxMonth = wallClockDateComponent.toWallClockMonth(maxDate);
                if (wallClockMonthComponent.isGreater(month, maxMonth)) {
                    return true;
                }
            }

            return false;
        },
        isDateDisabled: function isDateDisabled(date) {
            var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
                _ref2$minDate = _ref2.minDate,
                minDate = _ref2$minDate === undefined ? null : _ref2$minDate,
                _ref2$maxDate = _ref2.maxDate,
                maxDate = _ref2$maxDate === undefined ? null : _ref2$maxDate;

            if (minDate && wallClockDateComponent.isLess(date, minDate)) {
                return true;
            }

            if (maxDate && wallClockDateComponent.isGreater(date, maxDate)) {
                return true;
            }

            return false;
        },
        getMonthName: function getMonthName(month, localization) {
            return wallClockMonthComponent.toMonthString(month, localization) + ' ' + wallClockMonthComponent.getYear(month);
        },
        getDateNumber: function getDateNumber(date) {
            return wallClockDateComponent.getDate(date);
        },
        isDateEqual: function isDateEqual(date1, date2) {
            return wallClockDateComponent.isEqual(date1, date2);
        },
        isDateLess: function isDateLess(date1, date2) {
            return wallClockDateComponent.isLess(date1, date2);
        },
        isDateGreater: function isDateGreater(date1, date2) {
            return wallClockDateComponent.isGreater(date1, date2);
        },
        isDateBetween: function isDateBetween(date, start, end) {
            return wallClockDateComponent.isGreaterOrEqual(date, start) && wallClockDateComponent.isLessOrEqual(date, end);
        },
        isValidDateString: function isValidDateString(dateString, localization) {
            return wallClockDateComponent.isValidDateString(dateString, localization);
        },
        getDateFromDateString: function getDateFromDateString(dateString, localization) {
            return wallClockDateComponent.fromDateString(dateString, localization);
        },
        getDateString: function getDateString(date, localization) {
            return wallClockDateComponent.toDateString(date, localization);
        },
        isMonthEqual: function isMonthEqual(month1, month2) {
            return wallClockMonthComponent.isEqual(month1, month2);
        },
        isMonthLess: function isMonthLess(month1, month2) {
            return wallClockMonthComponent.isLess(month1, month2);
        },
        isMonthGreater: function isMonthGreater(month1, month2) {
            return wallClockMonthComponent.isGreater(month1, month2);
        },
        getOrderedRange: function getOrderedRange(date1, date2) {
            return [wallClockDateComponent.min(date1, date2), wallClockDateComponent.max(date1, date2)];
        },
        diffMonths: function diffMonths(month1, month2) {
            return wallClockMonthComponent.diffMonths(month1, month2);
        }
    });

    function getDateTimeInfo(localization) {
        var cultureInfo = cultureInfoComponent.getByCode(localization.getCulture().getCode());
        return cultureInfo.getDateTimeInfo();
    }
}