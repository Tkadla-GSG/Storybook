'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = DateTimeUtcComponent;
exports.toDateTimeUtcMoment = toDateTimeUtcMoment;

var _momentTimezone = require('moment-timezone');

var _momentTimezone2 = _interopRequireDefault(_momentTimezone);

var _utils = require('../../../utils');

var _toMoment = require('../utils/toMoment');

var _toMoment2 = _interopRequireDefault(_toMoment);

var _isoFormat = require('../enums/isoFormat');

var _isoFormat2 = _interopRequireDefault(_isoFormat);

var _dateTimeUtc = require('./dateTimeUtc');

var _dateTimeUtc2 = _interopRequireDefault(_dateTimeUtc);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var DATE_TIME_UTC_FORMATS = [_isoFormat2.default.Year.value, _isoFormat2.default.UtcSeconds.value, _isoFormat2.default.UtcMilliseconds.value];

function DateTimeUtcComponent() {
    return _utils.type.create(DateTimeUtcComponent, {
        parse: function parse(dateTimeUtcString) {
            _utils.check.string(dateTimeUtcString);

            var m = toUtcMoment(dateTimeUtcString);
            return (0, _dateTimeUtc2.default)(m);
        },
        fromEpoch: function fromEpoch(timestamp) {
            var m = (0, _momentTimezone2.default)(timestamp).utc();
            return (0, _dateTimeUtc2.default)(m);
        },
        now: function now() {
            var m = _momentTimezone2.default.utc();
            return (0, _dateTimeUtc2.default)(m);
        }
    });
}

function toUtcMoment(value) {
    return (0, _toMoment2.default)(value, DATE_TIME_UTC_FORMATS);
}

function toDateTimeUtcMoment(dateTimeUtc) {
    _utils.type.check(dateTimeUtc, _dateTimeUtc2.default);
    return (0, _toMoment2.default)(dateTimeUtc.value, DATE_TIME_UTC_FORMATS);
}