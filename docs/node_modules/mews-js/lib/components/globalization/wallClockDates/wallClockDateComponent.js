'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = WallClockDateComponent;
exports.toWallClockDateMoment = toWallClockDateMoment;

var _momentTimezone = require('moment-timezone');

var _momentTimezone2 = _interopRequireDefault(_momentTimezone);

var _utils = require('../../../utils');

var _utils2 = require('../utils');

var _enums = require('../enums');

var _componentEnhancers = require('../componentEnhancers');

var _cultureInfoComponent = require('../cultureInfos/cultureInfoComponent');

var _cultureInfoComponent2 = _interopRequireDefault(_cultureInfoComponent);

var _date = require('../dates/date');

var _date2 = _interopRequireDefault(_date);

var _wallClockMonth = require('../wallClockMonths/wallClockMonth');

var _wallClockMonth2 = _interopRequireDefault(_wallClockMonth);

var _wallClockDate = require('./wallClockDate');

var _wallClockDate2 = _interopRequireDefault(_wallClockDate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var PARTS = [_enums.DateTimePart.Year, _enums.DateTimePart.Month, _enums.DateTimePart.Week, _enums.DateTimePart.Day];

function WallClockDateComponent(cultureInfoComponent) {
    _utils.type.check(cultureInfoComponent, _cultureInfoComponent2.default);

    return _utils.type.create(WallClockDateComponent, (0, _componentEnhancers.comparable)(toWallClockDateMoment), (0, _componentEnhancers.manipulable)(_wallClockDate2.default, toWallClockDateMoment, PARTS), {
        parse: function parse(dateString) {
            _utils.check.string(dateString);

            var m = (0, _utils2.toMoment)(dateString, _enums.IsoFormat.Date.value);
            return (0, _wallClockDate2.default)(m);
        },
        today: function today() {
            var m = _momentTimezone2.default.utc();
            return (0, _wallClockDate2.default)(m);
        },
        toWallClockMonth: function toWallClockMonth(date) {
            return (0, _wallClockMonth2.default)(toWallClockDateMoment(date));
        },
        fromJavascriptDate: function fromJavascriptDate(javascriptDate) {
            _utils.type.check(javascriptDate, Date);

            var m = (0, _utils2.toMoment)((0, _utils.getDateString)(javascriptDate));
            return (0, _wallClockDate2.default)(m);
        },
        toJavascriptDate: function toJavascriptDate(date) {
            var m = toWallClockDateMoment(date);
            return new Date(Date.UTC(m.year(), m.month(), m.date()));
        },
        toTimezonedDate: function toTimezonedDate(wallClockDate, timezone) {
            _utils.type.check(wallClockDate, _wallClockDate2.default);
            _utils.check.timezone(timezone);
            _utils.check.notUtcTimezone(timezone);

            return (0, _date2.default)(_momentTimezone2.default.tz(wallClockDate.value, timezone));
        },
        toDateString: function toDateString(wallClockDate, localization) {
            return (0, _utils2.format)(toWallClockDateMoment(wallClockDate), localization, _enums.MomentLocalizationFormat.Date.value, cultureInfoComponent);
        },
        fromDateString: function fromDateString(wallClockDateString, localization) {
            return (0, _wallClockDate2.default)((0, _utils2.unformat)(wallClockDateString, localization, 'dateFormat', cultureInfoComponent));
        },
        isValidDateString: function isValidDateString(wallClockDateString, localization) {
            return (0, _utils2.isValidFormat)(wallClockDateString, localization, 'dateFormat', cultureInfoComponent);
        },
        getDayOfWeek: function getDayOfWeek(wallClockDate) {
            return toWallClockDateMoment(wallClockDate).day();
        },
        getDate: function getDate(wallClockDate) {
            return toWallClockDateMoment(wallClockDate).date();
        }
    });
}

function toWallClockDateMoment(date) {
    _utils.type.check(date, _wallClockDate2.default);
    return (0, _utils2.toMoment)(date.value, _enums.IsoFormat.Date.value, date.timezone);
}