'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = RouterComponent;

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _urijs = require('urijs');

var _urijs2 = _interopRequireDefault(_urijs);

var _utils = require('../utils');

var _enums = require('../enums');

var _configurationComponent = require('./configurationComponent');

var _configurationComponent2 = _interopRequireDefault(_configurationComponent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var IMAGE_BASE_URL = '/media/image';

function RouterComponent(configurationComponent) {
    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref$actions = _ref.actions,
        actions = _ref$actions === undefined ? {} : _ref$actions;

    _utils.type.check(configurationComponent, _configurationComponent2.default);

    var actionCalls = _lodash2.default.transform(actions, function (acc, options, action) {
        _lodash2.default.forEach(options.placeholders, function (p) {
            if (options.url.indexOf(p) === -1) {
                throw new Error('Missing placeholder definition in the action \'' + action + '\': ' + p);
            }
        });
        acc[action + 'Url'] = function (params) {
            return getAction(options.url, options.placeholders, options.defaultValues, params);
        };
    }, {});

    return _utils.type.create(RouterComponent, actionCalls, {
        contentUrl: function contentUrl(path) {
            return getContentUrl(configurationComponent.getStaticContentBaseUrl(), path);
        },
        contentFallbackUrl: function contentFallbackUrl(path) {
            return getContentUrl(configurationComponent.getPlatform().primaryUrl, path);
        },
        imageUrl: function imageUrl(imageId) {
            var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
                _ref2$mode = _ref2.mode,
                mode = _ref2$mode === undefined ? null : _ref2$mode,
                _ref2$width = _ref2.width,
                width = _ref2$width === undefined ? null : _ref2$width,
                _ref2$height = _ref2.height,
                height = _ref2$height === undefined ? null : _ref2$height,
                _ref2$quality = _ref2.quality,
                quality = _ref2$quality === undefined ? null : _ref2$quality;

            if (!(width || height)) {
                throw new Error("Either 'width' or 'height' of image has to be specified.");
            }

            if (mode && !mode instanceof _enums.ImageResizeMode) {
                throw new Error("Image resize 'mode' is of an invalid value: '${mode}'");
            }

            var params = [mode && 'mode=' + mode.value, width && 'width=' + width, height && 'height=' + height, quality && 'quality=' + quality];
            var paramString = _lodash2.default.compact(params).join('&');

            return configurationComponent.getStaticContentBaseUrl() + IMAGE_BASE_URL + '/' + imageId + (paramString ? '?' + paramString : '');
        }
    });

    function getContentUrl(baseUrl, path) {
        return '' + baseUrl + configurationComponent.getStaticContentPath() + path + '?v=' + configurationComponent.getVersionHash();
    }

    function getAction(url, placeholders) {
        var defaultValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

        var finalUrl = url;

        _lodash2.default.forEach(placeholders, function (placeholder, name) {
            var value = params[name];
            if (_lodash2.default.isUndefined(value)) {
                value = defaultValues[name];
            }
            if (_lodash2.default.isUndefined(value)) {
                throw new Error('Missing a value for a placeholder: \'' + name + '\'');
            }
            finalUrl = finalUrl.replace(placeholder, encodeURIComponent(value));
            delete params[name];
        });

        if (!_lodash2.default.isEmpty(params)) {
            finalUrl = (0, _urijs2.default)(finalUrl).addQuery(params).valueOf();
        }

        return finalUrl;
    }
}