'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

exports.default = PaymentGatewayComponent;

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _utils = require('../../utils');

var _enums = require('../../enums');

var _paymentGateways2 = require('./paymentGateways');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var OBFUSCATION_SYMBOL = '*';

function PaymentGatewayComponent(adyenComponent, braintreeComponent, stripeComponent) {
    var _paymentGateways;

    _utils.type.check(adyenComponent, _paymentGateways2.AdyenComponent);
    _utils.type.check(braintreeComponent, _paymentGateways2.BraintreeComponent);
    _utils.type.check(stripeComponent, _paymentGateways2.StripeComponent);

    var paymentGateways = (_paymentGateways = {}, _defineProperty(_paymentGateways, _enums.PaymentGatewayType.Adyen, adyenComponent), _defineProperty(_paymentGateways, _enums.PaymentGatewayType.Braintree, braintreeComponent), _defineProperty(_paymentGateways, _enums.PaymentGatewayType.Stripe, stripeComponent), _paymentGateways);

    return _utils.type.create(PaymentGatewayComponent, {
        tokenizeCard: function tokenizeCard(paymentGatewayType) {
            var _paymentGateways$paym;

            _utils.type.check(paymentGatewayType, _enums.PaymentGatewayType);

            for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
            }

            return (_paymentGateways$paym = paymentGateways[paymentGatewayType]).tokenizeCard.apply(_paymentGateways$paym, args);
        },
        parseExpiration: function parseExpiration(expirationString) {
            checkString(expirationString, 'expirationString');

            var _expirationString$rep = expirationString.replace(/[^0-9/]/g, '').split('/'),
                _expirationString$rep2 = _slicedToArray(_expirationString$rep, 2),
                monthString = _expirationString$rep2[0],
                _expirationString$rep3 = _expirationString$rep2[1],
                yearString = _expirationString$rep3 === undefined ? '' : _expirationString$rep3;

            var yearNumber = parseInt(yearString, 10);

            return {
                year: yearNumber + (yearNumber < 100 ? 2000 : 0),
                month: parseInt(monthString, 10)
            };
        },
        obfuscateCardNumber: function obfuscateCardNumber(cardNumber) {
            checkString(cardNumber, 'cardNumber');

            return cardNumber.replace(/ /g, '').replace(/(\d{6})(\d+)(\d{4})/, function (match, head, middle, tail) {
                return head + _lodash2.default.repeat(OBFUSCATION_SYMBOL, middle.length) + tail;
            });
        }
    });

    function checkString(string, name) {
        if (!_lodash2.default.isString(string)) {
            throw new TypeError('Expected ' + name + ' to be string, got: (' + string + ').');
        }
    }
}