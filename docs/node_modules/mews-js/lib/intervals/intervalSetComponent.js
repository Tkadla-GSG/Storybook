'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = IntervalSetComponent;

var _type = require('../utils/type');

var _type2 = _interopRequireDefault(_type);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _interval = require('./interval');

var _interval2 = _interopRequireDefault(_interval);

var _intervalComponent = require('./intervalComponent');

var _intervalComponent2 = _interopRequireDefault(_intervalComponent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function IntervalSetComponent() {
    return _type2.default.create(IntervalSetComponent, {
        addSet: function addSet() {
            var _this = this;

            var add = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
            var set = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

            var newSet = set;

            _lodash2.default.each(add, function (i) {
                newSet = _this.addInterval(i, newSet);
            });

            return newSet;
        },
        addInterval: function addInterval(interval) {
            var set = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

            _type2.default.check(set, Array);
            _type2.default.check(interval, _interval2.default);

            set.push(interval);

            var sorted = _lodash2.default.sortBy(set, function (i) {
                return i.low;
            });
            var newSet = [sorted[0]];

            _lodash2.default.each(sorted, function (i) {
                var top = _lodash2.default.last(newSet);

                if ((0, _intervalComponent2.default)().collides(i, top)) {
                    newSet[newSet.length - 1] = (0, _intervalComponent2.default)().union(i, top);
                } else {
                    newSet.push(i);
                }
            });

            return newSet;
        },
        isEmpty: function isEmpty() {
            var set = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

            return _lodash2.default.isEmpty(set) || _lodash2.default.every(set, function (i) {
                return (0, _intervalComponent2.default)().isEmpty(i);
            });
        },
        toArray: function toArray(set) {
            return _lodash2.default.map(set, function (interval) {
                return { high: interval.high, low: interval.low };
            });
        },
        fromArray: function fromArray(array) {
            return _lodash2.default.map(array, function (r) {
                return new _interval2.default(r);
            });
        }
    });
}