'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = IntervalComponent;

var _type = require('../utils/type');

var _type2 = _interopRequireDefault(_type);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _interval = require('./interval');

var _interval2 = _interopRequireDefault(_interval);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function IntervalComponent() {
    return _type2.default.create(IntervalComponent, {
        isEmpty: function isEmpty(interval) {
            _type2.default.check(interval, _interval2.default);
            return _lodash2.default.isNil(interval.high) || _lodash2.default.isNil(interval.low);
        },
        union: function union(a, b) {
            if (!collides(a, b)) {
                return new _interval2.default();
            }

            var high = _lodash2.default.max([a.high, b.high]);
            var low = _lodash2.default.min([a.low, b.low]);

            return new _interval2.default({ high: high, low: low });
        },


        /**
         * Returns set of intervals created by difference.
         * Difference is made in order of subtracting B from A.
         */
        difference: function difference(a, b) {
            var intervalIntersection = intersection(a, b);

            if (this.isEmpty(intervalIntersection)) {
                return [a];
            }

            if (this.isEqual(a, intervalIntersection)) {
                return [new _interval2.default()];
            }

            if (this.contains(a, b)) {
                return [new _interval2.default({ high: b.low, low: a.low }), new _interval2.default({ high: a.high, low: b.high })];
            }

            if (a.high > b.high) {
                return [new _interval2.default({ high: a.high, low: b.high })];
            }

            return [new _interval2.default({ high: b.low, low: a.low })];
        },


        collides: collides,

        intersection: intersection,

        /**
         * Is B contained in A
         */
        contains: function contains(a, b) {
            _type2.default.check(a, _interval2.default);
            _type2.default.check(b, _interval2.default);

            return _lodash2.default.inRange(b.high, a.low, a.high) && _lodash2.default.inRange(b.low, a.low, a.high);
        },
        isEqual: function isEqual(a, b) {
            _type2.default.check(a, _interval2.default);
            _type2.default.check(b, _interval2.default);

            return a.high === b.high && a.low === b.low;
        }
    });
}

function collides(a, b) {
    _type2.default.check(a, _interval2.default);
    _type2.default.check(b, _interval2.default);

    return _lodash2.default.inRange(a.high, b.low, b.high) || _lodash2.default.inRange(a.low, b.low, b.high) || _lodash2.default.inRange(b.high, a.low, a.high) || _lodash2.default.inRange(b.low, a.low, a.high);
}

function intersection(a, b) {
    if (!collides(a, b)) {
        return new _interval2.default();
    }

    var high = _lodash2.default.min([a.high, b.high]);
    var low = _lodash2.default.max([a.low, b.low]);

    return new _interval2.default({ high: high, low: low });
}