'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = enumify;
exports.toLocalizationKey = toLocalizationKey;

var _type = require('../utils/type');

var _type2 = _interopRequireDefault(_type);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function enumify(enumeration) {
    var values = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _type2.default.checkType(enumeration);

    if (!_lodash2.default.isPlainObject(values)) {
        throw TypeError('Values of enumeration expected as object');
    }

    var enumValues = initEnumValues(values);
    var enumProperties = _lodash2.default.keyBy(enumValues, 'name');
    _lodash2.default.assign(enumeration, _extends({}, enumProperties, {
        enumValues: enumValues,
        getByName: function getByName(name) {
            return _lodash2.default.find(enumValues, function (v) {
                return v.name === name;
            });
        },
        getByValue: function getByValue(value) {
            return _lodash2.default.find(enumValues, function (x) {
                return x.value === value;
            });
        },
        toString: function toString() {
            return enumeration.name;
        }
    }));

    Object.freeze(enumeration);

    function initEnumValues(args) {
        return _lodash2.default.map(args, function (val, key) {
            var mapped = {};

            if (val.hasOwnProperty('value')) {
                mapped = _extends({
                    name: key
                }, val);
            } else {
                mapped = {
                    name: key,
                    value: val
                };
            }

            mapped.toString = function toString() {
                return enumeration.name + key;
            };

            return _type2.default.create(enumeration, mapped);
        });
    }
}

function toLocalizationKey(enumeration) {
    return enumeration.toString();
}