'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = require('./propTypes');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var LocalizationProvider = function (_Component) {
    _inherits(LocalizationProvider, _Component);

    function LocalizationProvider() {
        var _ref;

        var _temp, _this, _ret;

        _classCallCheck(this, LocalizationProvider);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = LocalizationProvider.__proto__ || Object.getPrototypeOf(LocalizationProvider)).call.apply(_ref, [this].concat(args))), _this), _this.subscribers = [], _this.subscribe = function (func) {
            _this.subscribers.push(func);

            return function () {
                _this.subscribers = _lodash2.default.filter(_this.subscribers, function (f) {
                    return f !== func;
                });
            };
        }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(LocalizationProvider, [{
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            this.subscribers = [];
        }
    }, {
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
            if (nextProps.languageCode !== this.props.languageCode) {
                _lodash2.default.forEach(this.subscribers, function (f) {
                    return f();
                });
            }
        }
    }, {
        key: 'getChildContext',
        value: function getChildContext() {
            var _this2 = this;

            var languageCode = this.props.languageCode;


            return {
                localization: {
                    subscribe: this.subscribe,
                    localizeText: function localizeText() {
                        var _props;

                        for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                            args[_key2] = arguments[_key2];
                        }

                        return (_props = _this2.props).localizeText.apply(_props, [languageCode].concat(args));
                    },
                    localizeDate: function localizeDate() {
                        var _props2;

                        for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
                            args[_key3] = arguments[_key3];
                        }

                        return (_props2 = _this2.props).localizeDate.apply(_props2, [languageCode].concat(args));
                    },
                    localizeProperty: function localizeProperty() {
                        var _props3;

                        for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
                            args[_key4] = arguments[_key4];
                        }

                        return (_props3 = _this2.props).localizeProperty.apply(_props3, [languageCode].concat(args));
                    },
                    localizeCurrencyValue: function localizeCurrencyValue() {
                        var _props4;

                        for (var _len5 = arguments.length, args = Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
                            args[_key5] = arguments[_key5];
                        }

                        return (_props4 = _this2.props).localizeCurrencyValue.apply(_props4, [languageCode].concat(args));
                    }
                }
            };
        }
    }, {
        key: 'render',
        value: function render() {
            return this.props.children;
        }
    }]);

    return LocalizationProvider;
}(_react.Component);

LocalizationProvider.propTypes = {
    localizeText: _propTypes.PropTypes.func.isRequired,
    localizeDate: _propTypes.PropTypes.func.isRequired,
    localizeProperty: _propTypes.PropTypes.func.isRequired,
    localizeCurrencyValue: _propTypes.PropTypes.func.isRequired,
    languageCode: _propTypes.PropTypes.string.isRequired
};
LocalizationProvider.childContextTypes = {
    localization: _propTypes2.localizationPropTypes
};
exports.default = LocalizationProvider;